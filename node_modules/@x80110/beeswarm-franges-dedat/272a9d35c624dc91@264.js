// https://observablehq.com/@x80110/beeswarm-franges-dedat@264
export default function define(runtime, observer) {
  const main = runtime.module();
  const fileAttachments = new Map([["td-més_centres.csv",new URL("./files/df13ffcd83d410bcaf853abd4412aad9daadc8381ba00d3aed3b44218858f6996eec1ba7d764ed7a1cad5fad79f210ff1c14b5a81d8a50eca1eb239d1d97d806",import.meta.url)]]);
  main.builtin("FileAttachment", runtime.fileAttachments(name => fileAttachments.get(name)));
  main.variable(observer()).define(["md"], function(md){return(
md`# Beeswarm - Franges d'edat`
)});
  main.variable(observer("chart")).define("chart", ["d3","width","height","xAxis","x","margin","edat","y","data","size","padding","color2","tooltip"], function(d3,width,height,xAxis,x,margin,edat,y,data,size,padding,color2,tooltip)
{
  
  const svg = d3.create('svg')
    .attr('viewBox', [0, 0, width, height]);
  
  svg.append('g').call(xAxis);
  
  svg.selectAll('.line-visites')
    .data(x.ticks())
    .join('line')
    .attr('class', 'line-visites')
    .attr('x1', d => x(d))
    .attr('x2', d => x(d))
    .attr('y1', 10)
    .attr('y2', height - margin.top)
    .attr('stroke-width', .6)
    .attr('stroke', 'lightgray');
  
  svg.selectAll('.label-edat')
    .data(edat)
    .join('text')
    .attr('class', 'label-edat')
    .attr('x', 0)
    .attr('y', d => y(d))
    .attr('text-align', 'right')
    .attr('alignment-baseline', 'right')
    .text(d => d);
        
  const simulation = d3.forceSimulation(data)
    .force('x', d3.forceX((d) => x(d.pacients)).strength(0.1))
    .force('y', d3.forceY((d) => y(d.grups_edat)).strength(0.1))
    .force('collide', d3.forceCollide(d => size(d.visites)/6 + padding).strength(1))
    .stop();
  
      for(let i = 0; i < 300; i++) {
    simulation.tick();      
    }  
    simulation.stop();

  
  svg.selectAll('circle')
    .data(data)
    .join('circle')
    .attr('cx', d => d.x)
    .attr('cy', d => d.y)
    .attr('r', d => size(d.visites)/6)
    .attr('fill', d => color2(d.sexe))
    .attr('opacity', .8);
  
  svg.selectAll("circle")
    .on("mouseover", function(d) {
      d3.select(this)
        .attr('stroke-width', '1')
        .attr("stroke", "black")
      tooltip
        .style("visibility", "visible")
        .html(`<b>Franja d'edat:</b> ${d.grups_edat} <br><b>Sexe: </b>${d.sexe}<br><b>Centre:</b> ${d.centre}<br><b>Pacients:</b> ${d.pacients}<br><b>Visites:</b> ${(d.visites)}`)
  })
    .on("mousemove", function() {
      tooltip
        .style("top", d3.event.pageY - 10 + "px")
        .style("left", d3.event.pageX + 10 + "px")
    })
    .on("mouseout", function() {
      d3.select(this).attr('stroke-width', '0');

      tooltip.style("visibility", "hidden");
    });
  
  


  return svg.node();

  
}
);
  main.variable(observer("data")).define("data", ["FileAttachment"], function(FileAttachment){return(
FileAttachment("td-més_centres.csv").csv()
)});
  main.variable(observer("y")).define("y", ["d3","edat","height","margin"], function(d3,edat,height,margin){return(
d3.scaleBand()
  .domain(edat)
  .range([height + margin.bottom, margin.top])
)});
  main.variable(observer("x")).define("x", ["d3","margin","width"], function(d3,margin,width){return(
d3.scaleLinear()
  .domain([0,1300])
  .nice()
  .range([margin.left, width - margin.right])
)});
  main.variable(observer("xAxis")).define("xAxis", ["height","margin","d3","x"], function(height,margin,d3,x){return(
g => g
  .attr('transform', `translate(0,${height +30 - margin.top})`)
  .call(d3.axisBottom(x))
)});
  main.variable(observer("popExtent")).define("popExtent", ["data","d3"], function(data,d3)
{
  const bounds = data.map((d) => d.visites).sort(d3.ascending);
  return [bounds[0], bounds[bounds.length - 1]];
}
);
  main.variable(observer("size")).define("size", ["d3","popExtent"], function(d3,popExtent){return(
d3.scaleLinear()
  .domain(popExtent)
  .nice()
  .range([2, 15])
)});
  main.variable(observer("dataExtent")).define("dataExtent", ["data","d3"], function(data,d3)
{
  const bounds = data.map((d) => d.visites).sort(d3.ascending);
  return [bounds[0], bounds[bounds.length - 1]];
}
);
  main.variable(observer("edat")).define("edat", function(){return(
['75+', '65-74', '55-64', '45-54', '35-44', '25-34', '18-24', '13-17', '6-12', '<6']
)});
  main.variable(observer("sexe")).define("sexe", function(){return(
['Home', 'Dona']
)});
  main.variable(observer("color")).define("color", ["d3","sexe"], function(d3,sexe){return(
d3.scaleOrdinal()
  .domain(sexe)
  .range(d3.schemeTableau10)
)});
  main.variable(observer("color2")).define("color2", ["d3"], function(d3){return(
d3.scaleOrdinal().range(['#f27522', '#5fa2c1'])
)});
  main.variable(observer("tooltip")).define("tooltip", ["d3"], function(d3){return(
d3
    .select("body")
    .append("div")
    .attr("class", "svg-tooltip")
    .style("position", "absolute")
    .style("visibility", "hidden")
)});
  main.variable(observer("radius")).define("radius", function(){return(
1
)});
  main.variable(observer("padding")).define("padding", function(){return(
0.5
)});
  main.variable(observer("height")).define("height", function(){return(
1100
)});
  main.variable(observer("margin")).define("margin", function(){return(
{
  left: 120,
  right: 120,
  top: 100,
  bottom: 0
}
)});
  main.variable(observer("d3")).define("d3", ["require"], function(require){return(
require("d3@5")
)});
  main.variable(observer("specificStyles")).define("specificStyles", ["html"], function(html){return(
html`
  <style>

  .svg-tooltip {
    font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple   Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    background: white;
    opacity: .9;
    border-radius: .1rem;
    border: 0px solid black;
    color: black;
    display: block;
    font-size: 14px;
    max-width: 320px;
    padding: .2rem .4rem;
    position: absolute;
    text-overflow: ellipsis;
    white-space: pre;
    z-index: 300;
    visibility: hidden;
  }
</style>`
)});
  return main;
}

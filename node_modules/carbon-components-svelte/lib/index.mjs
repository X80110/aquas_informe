import flatpickr from 'flatpickr';

function noop() { }
const identity = x => x;
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
        if (k[0] !== '$')
            result[k] = props[k];
    return result;
}
function compute_rest_props(props, keys) {
    const rest = {};
    keys = new Set(keys);
    for (const k in props)
        if (!keys.has(k) && k[0] !== '$')
            rest[k] = props[k];
    return rest;
}
function compute_slots(slots) {
    const result = {};
    for (const key in slots) {
        result[key] = true;
    }
    return result;
}
function set_store_value(store, ret, value = ret) {
    store.set(value);
    return ret;
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
    return function (event) {
        event.preventDefault();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function stop_propagation(fn) {
    return function (event) {
        event.stopPropagation();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
    // @ts-ignore
    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
    for (const key in attributes) {
        if (attributes[key] == null) {
            node.removeAttribute(key);
        }
        else if (key === 'style') {
            node.style.cssText = attributes[key];
        }
        else if (key === '__value') {
            node.value = node[key] = attributes[key];
        }
        else if (descriptors[key] && descriptors[key].set) {
            node[key] = attributes[key];
        }
        else {
            attr(node, key, attributes[key]);
        }
    }
}
function set_svg_attributes(node, attributes) {
    for (const key in attributes) {
        attr(node, key, attributes[key]);
    }
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function select_option(select, value) {
    for (let i = 0; i < select.options.length; i += 1) {
        const option = select.options[i];
        if (option.__value === value) {
            option.selected = true;
            return;
        }
    }
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}
class HtmlTag {
    constructor(anchor = null) {
        this.a = anchor;
        this.e = this.n = null;
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            this.e = element(target.nodeName);
            this.t = target;
            this.h(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

const active_docs = new Set();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = node.ownerDocument;
    active_docs.add(doc);
    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
    if (!current_rules[name]) {
        current_rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        active_docs.forEach(doc => {
            const stylesheet = doc.__svelte_stylesheet;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            doc.__svelte_rules = {};
        });
        active_docs.clear();
    });
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function beforeUpdate(fn) {
    get_current_component().$$.before_update.push(fn);
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        callbacks.slice().forEach(fn => fn(event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function tick() {
    schedule_update();
    return resolved_promise;
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
const null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn, params, intro) {
    let config = fn(node, params);
    let t = intro ? 0 : 1;
    let running_program = null;
    let pending_program = null;
    let animation_name = null;
    function clear_animation() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function init(program, duration) {
        const d = program.b - t;
        duration *= Math.abs(d);
        return {
            a: t,
            b: program.b,
            d,
            duration,
            start: program.start,
            end: program.start + duration,
            group: program.group
        };
    }
    function go(b) {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        const program = {
            start: now() + delay,
            b
        };
        if (!b) {
            // @ts-ignore todo: improve typings
            program.group = outros;
            outros.r += 1;
        }
        if (running_program || pending_program) {
            pending_program = program;
        }
        else {
            // if this is an intro, and there's a delay, we need to do
            // an initial tick and/or apply CSS animation immediately
            if (css) {
                clear_animation();
                animation_name = create_rule(node, t, b, duration, delay, easing, css);
            }
            if (b)
                tick(0, 1);
            running_program = init(program, duration);
            add_render_callback(() => dispatch(node, b, 'start'));
            loop(now => {
                if (pending_program && now > pending_program.start) {
                    running_program = init(pending_program, duration);
                    pending_program = null;
                    dispatch(node, running_program.b, 'start');
                    if (css) {
                        clear_animation();
                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                    }
                }
                if (running_program) {
                    if (now >= running_program.end) {
                        tick(t = running_program.b, 1 - t);
                        dispatch(node, running_program.b, 'end');
                        if (!pending_program) {
                            // we're done
                            if (running_program.b) {
                                // intro — we can tidy up immediately
                                clear_animation();
                            }
                            else {
                                // outro — needs to be coordinated
                                if (!--running_program.group.r)
                                    run_all(running_program.group.c);
                            }
                        }
                        running_program = null;
                    }
                    else if (now >= running_program.start) {
                        const p = now - running_program.start;
                        t = running_program.a + running_program.d * easing(p / running_program.duration);
                        tick(t, 1 - t);
                    }
                }
                return !!(running_program || pending_program);
            });
        }
    }
    return {
        run(b) {
            if (is_function(config)) {
                wait().then(() => {
                    // @ts-ignore
                    config = config();
                    go(b);
                });
            }
            else {
                go(b);
            }
        },
        end() {
            clear_animation();
            running_program = pending_program = null;
        }
    };
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);

function destroy_block(block, lookup) {
    block.d(1);
    lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
        lookup.delete(block.key);
    });
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while (i--)
        old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    i = n;
    while (i--) {
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        }
        else if (dynamic) {
            block.p(child_ctx, dirty);
        }
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes)
            deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while (o && n) {
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        }
        else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        }
        else if (!lookup.has(new_key) || will_move.has(new_key)) {
            insert(new_block);
        }
        else if (did_move.has(old_key)) {
            o--;
        }
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        }
        else {
            will_move.add(old_key);
            o--;
        }
    }
    while (o--) {
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key))
            destroy(old_block, lookup);
    }
    while (n)
        insert(new_blocks[n - 1]);
    return new_blocks;
}

function get_spread_update(levels, updates) {
    const update = {};
    const to_null_out = {};
    const accounted_for = { $$scope: 1 };
    let i = levels.length;
    while (i--) {
        const o = levels[i];
        const n = updates[i];
        if (n) {
            for (const key in o) {
                if (!(key in n))
                    to_null_out[key] = 1;
            }
            for (const key in n) {
                if (!accounted_for[key]) {
                    update[key] = n[key];
                    accounted_for[key] = 1;
                }
            }
            levels[i] = n;
        }
        else {
            for (const key in o) {
                accounted_for[key] = 1;
            }
        }
    }
    for (const key in to_null_out) {
        if (!(key in update))
            update[key] = undefined;
    }
    return update;
}
function get_spread_object(spread_props) {
    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
}

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */
function readable(value, start) {
    return {
        subscribe: writable(value, start).subscribe
    };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}
function derived(stores, fn, initial_value) {
    const single = !Array.isArray(stores);
    const stores_array = single
        ? [stores]
        : stores;
    const auto = fn.length < 2;
    return readable(initial_value, (set) => {
        let inited = false;
        const values = [];
        let pending = 0;
        let cleanup = noop;
        const sync = () => {
            if (pending) {
                return;
            }
            cleanup();
            const result = fn(single ? values[0] : values, set);
            if (auto) {
                set(result);
            }
            else {
                cleanup = is_function(result) ? result : noop;
            }
        };
        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
            values[i] = value;
            pending &= ~(1 << i);
            if (inited) {
                sync();
            }
        }, () => {
            pending |= (1 << i);
        }));
        inited = true;
        sync();
        return function stop() {
            run_all(unsubscribers);
            cleanup();
        };
    });
}

/* node_modules/carbon-icons-svelte/lib/ChevronRight16/ChevronRight16.svelte generated by Svelte v3.32.1 */

function create_if_block(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ChevronRight16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M11 8L6 13 5.3 12.3 9.6 8 5.3 3.7 6 3z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ChevronRight16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ChevronRight16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/SkeletonText/SkeletonText.svelte generated by Svelte v3.32.1 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i].width;
	return child_ctx;
}

// (39:0) {:else}
function create_else_block(ctx) {
	let p;
	let p_style_value;
	let mounted;
	let dispose;

	let p_levels = [
		/*$$restProps*/ ctx[4],
		{
			style: p_style_value = "width: " + /*width*/ ctx[2] + ";" + /*$$restProps*/ ctx[4].style
		}
	];

	let p_data = {};

	for (let i = 0; i < p_levels.length; i += 1) {
		p_data = assign(p_data, p_levels[i]);
	}

	return {
		c() {
			p = element("p");
			set_attributes(p, p_data);
			toggle_class(p, "bx--skeleton__text", true);
			toggle_class(p, "bx--skeleton__heading", /*heading*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (!mounted) {
				dispose = [
					listen(p, "click", /*click_handler_1*/ ctx[12]),
					listen(p, "mouseover", /*mouseover_handler_1*/ ctx[13]),
					listen(p, "mouseenter", /*mouseenter_handler_1*/ ctx[14]),
					listen(p, "mouseleave", /*mouseleave_handler_1*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(p, p_data = get_spread_update(p_levels, [
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4],
				dirty & /*width, $$restProps*/ 20 && p_style_value !== (p_style_value = "width: " + /*width*/ ctx[2] + ";" + /*$$restProps*/ ctx[4].style) && { style: p_style_value }
			]));

			toggle_class(p, "bx--skeleton__text", true);
			toggle_class(p, "bx--skeleton__heading", /*heading*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(p);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (29:0) {#if paragraph}
function create_if_block$1(ctx) {
	let div;
	let mounted;
	let dispose;
	let each_value = /*rows*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let div_levels = [/*$$restProps*/ ctx[4]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[8]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*rows, heading*/ 9) {
				each_value = /*rows*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]]));
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (31:4) {#each rows as { width }}
function create_each_block(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			set_style(p, "width", /*width*/ ctx[2]);
			toggle_class(p, "bx--skeleton__text", true);
			toggle_class(p, "bx--skeleton__heading", /*heading*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*rows*/ 8) {
				set_style(p, "width", /*width*/ ctx[2]);
			}

			if (dirty & /*heading*/ 1) {
				toggle_class(p, "bx--skeleton__heading", /*heading*/ ctx[0]);
			}
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment$1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*paragraph*/ ctx[1]) return create_if_block$1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let rows;
	let widthNum;
	let widthPx;
	const omit_props_names = ["lines","heading","paragraph","width"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { lines = 3 } = $$props;
	let { heading = false } = $$props;
	let { paragraph = false } = $$props;
	let { width = "100%" } = $$props;
	const RANDOM = [0.973, 0.153, 0.567];

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("lines" in $$new_props) $$invalidate(5, lines = $$new_props.lines);
		if ("heading" in $$new_props) $$invalidate(0, heading = $$new_props.heading);
		if ("paragraph" in $$new_props) $$invalidate(1, paragraph = $$new_props.paragraph);
		if ("width" in $$new_props) $$invalidate(2, width = $$new_props.width);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*width*/ 4) {
			 $$invalidate(6, widthNum = parseInt(width, 10));
		}

		if ($$self.$$.dirty & /*width*/ 4) {
			 $$invalidate(7, widthPx = width.includes("px"));
		}

		if ($$self.$$.dirty & /*paragraph, lines, widthPx, widthNum, rows, width*/ 238) {
			 if (paragraph) {
				for (let i = 0; i < lines; i++) {
					const min = widthPx ? widthNum - 75 : 0;
					const max = widthPx ? widthNum : 75;
					const rand = Math.floor(RANDOM[i % 3] * (max - min + 1)) + min + "px";

					$$invalidate(3, rows = [
						...rows,
						{
							width: widthPx ? rand : `calc(${width} - ${rand})`
						}
					]);
				}
			}
		}
	};

	 $$invalidate(3, rows = []);

	return [
		heading,
		paragraph,
		width,
		rows,
		$$restProps,
		lines,
		widthNum,
		widthPx,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class SkeletonText extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			lines: 5,
			heading: 0,
			paragraph: 1,
			width: 2
		});
	}
}

/* src/Accordion/AccordionSkeleton.svelte generated by Svelte v3.32.1 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (37:2) {#if open}
function create_if_block$2(ctx) {
	let li;
	let span;
	let chevronright16;
	let t0;
	let skeletontext0;
	let t1;
	let div;
	let skeletontext1;
	let t2;
	let skeletontext2;
	let t3;
	let skeletontext3;
	let current;
	chevronright16 = new ChevronRight16({ props: { class: "bx--accordion__arrow" } });
	skeletontext0 = new SkeletonText({ props: { class: "bx--accordion__title" } });
	skeletontext1 = new SkeletonText({ props: { width: "90%" } });
	skeletontext2 = new SkeletonText({ props: { width: "80%" } });
	skeletontext3 = new SkeletonText({ props: { width: "95%" } });

	return {
		c() {
			li = element("li");
			span = element("span");
			create_component(chevronright16.$$.fragment);
			t0 = space();
			create_component(skeletontext0.$$.fragment);
			t1 = space();
			div = element("div");
			create_component(skeletontext1.$$.fragment);
			t2 = space();
			create_component(skeletontext2.$$.fragment);
			t3 = space();
			create_component(skeletontext3.$$.fragment);
			toggle_class(span, "bx--accordion__heading", true);
			attr(div, "class", "bx--accordion__content");
			toggle_class(li, "bx--accordion__item", true);
			toggle_class(li, "bx--accordion__item--active", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, span);
			mount_component(chevronright16, span, null);
			append(span, t0);
			mount_component(skeletontext0, span, null);
			append(li, t1);
			append(li, div);
			mount_component(skeletontext1, div, null);
			append(div, t2);
			mount_component(skeletontext2, div, null);
			append(div, t3);
			mount_component(skeletontext3, div, null);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(chevronright16.$$.fragment, local);
			transition_in(skeletontext0.$$.fragment, local);
			transition_in(skeletontext1.$$.fragment, local);
			transition_in(skeletontext2.$$.fragment, local);
			transition_in(skeletontext3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright16.$$.fragment, local);
			transition_out(skeletontext0.$$.fragment, local);
			transition_out(skeletontext1.$$.fragment, local);
			transition_out(skeletontext2.$$.fragment, local);
			transition_out(skeletontext3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(chevronright16);
			destroy_component(skeletontext0);
			destroy_component(skeletontext1);
			destroy_component(skeletontext2);
			destroy_component(skeletontext3);
		}
	};
}

// (53:2) {#each Array.from({ length: open ? count - 1 : count }, (_, i) => i) as item (item)}
function create_each_block$1(key_1, ctx) {
	let li;
	let span;
	let chevronright16;
	let t0;
	let skeletontext;
	let t1;
	let current;
	chevronright16 = new ChevronRight16({ props: { class: "bx--accordion__arrow" } });
	skeletontext = new SkeletonText({ props: { class: "bx--accordion__title" } });

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			span = element("span");
			create_component(chevronright16.$$.fragment);
			t0 = space();
			create_component(skeletontext.$$.fragment);
			t1 = space();
			attr(span, "class", "bx--accordion__heading");
			attr(li, "class", "bx--accordion__item");
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, span);
			mount_component(chevronright16, span, null);
			append(span, t0);
			mount_component(skeletontext, span, null);
			append(li, t1);
			current = true;
		},
		p(new_ctx, dirty) {
		},
		i(local) {
			if (current) return;
			transition_in(chevronright16.$$.fragment, local);
			transition_in(skeletontext.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright16.$$.fragment, local);
			transition_out(skeletontext.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(chevronright16);
			destroy_component(skeletontext);
		}
	};
}

function create_fragment$2(ctx) {
	let ul;
	let t;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let mounted;
	let dispose;
	let if_block = /*open*/ ctx[3] && create_if_block$2();

	let each_value = Array.from(
		{
			length: /*open*/ ctx[3]
			? /*count*/ ctx[0] - 1
			: /*count*/ ctx[0]
		},
		func
	);

	const get_key = ctx => /*item*/ ctx[9];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$1(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key));
	}

	let ul_levels = [/*$$restProps*/ ctx[4]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (if_block) if_block.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--skeleton", true);
			toggle_class(ul, "bx--accordion", true);
			toggle_class(ul, "bx--accordion--start", /*align*/ ctx[1] === "start");
			toggle_class(ul, "bx--accordion--end", /*align*/ ctx[1] === "end");
			toggle_class(ul, "bx--accordion--sm", /*size*/ ctx[2] === "sm");
			toggle_class(ul, "bx--accordion--xl", /*size*/ ctx[2] === "xl");
		},
		m(target, anchor) {
			insert(target, ul, anchor);
			if (if_block) if_block.m(ul, null);
			append(ul, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler*/ ctx[5]),
					listen(ul, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(ul, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(ul, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[3]) {
				if (if_block) {
					if (dirty & /*open*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$2();
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(ul, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*open, count*/ 9) {
				each_value = Array.from(
					{
						length: /*open*/ ctx[3]
						? /*count*/ ctx[0] - 1
						: /*count*/ ctx[0]
					},
					func
				);

				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, outro_and_destroy_block, create_each_block$1, null, get_each_context$1);
				check_outros();
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]]));
			toggle_class(ul, "bx--skeleton", true);
			toggle_class(ul, "bx--accordion", true);
			toggle_class(ul, "bx--accordion--start", /*align*/ ctx[1] === "start");
			toggle_class(ul, "bx--accordion--end", /*align*/ ctx[1] === "end");
			toggle_class(ul, "bx--accordion--sm", /*size*/ ctx[2] === "sm");
			toggle_class(ul, "bx--accordion--xl", /*size*/ ctx[2] === "xl");
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (if_block) if_block.d();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func = (_, i) => i;

function instance$2($$self, $$props, $$invalidate) {
	const omit_props_names = ["count","align","size","open"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { count = 4 } = $$props;
	let { align = "end" } = $$props;
	let { size = undefined } = $$props;
	let { open = true } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("count" in $$new_props) $$invalidate(0, count = $$new_props.count);
		if ("align" in $$new_props) $$invalidate(1, align = $$new_props.align);
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("open" in $$new_props) $$invalidate(3, open = $$new_props.open);
	};

	return [
		count,
		align,
		size,
		open,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class AccordionSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { count: 0, align: 1, size: 2, open: 3 });
	}
}

/* src/Accordion/Accordion.svelte generated by Svelte v3.32.1 */

function create_else_block$1(ctx) {
	let ul;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let ul_levels = [/*$$restProps*/ ctx[3]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--accordion", true);
			toggle_class(ul, "bx--accordion--start", /*align*/ ctx[0] === "start");
			toggle_class(ul, "bx--accordion--end", /*align*/ ctx[0] === "end");
			toggle_class(ul, "bx--accordion--sm", /*size*/ ctx[1] === "sm");
			toggle_class(ul, "bx--accordion--xl", /*size*/ ctx[1] === "xl");
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler_1*/ ctx[7]),
					listen(ul, "mouseover", /*mouseover_handler_1*/ ctx[8]),
					listen(ul, "mouseenter", /*mouseenter_handler_1*/ ctx[9]),
					listen(ul, "mouseleave", /*mouseleave_handler_1*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(ul, "bx--accordion", true);
			toggle_class(ul, "bx--accordion--start", /*align*/ ctx[0] === "start");
			toggle_class(ul, "bx--accordion--end", /*align*/ ctx[0] === "end");
			toggle_class(ul, "bx--accordion--sm", /*size*/ ctx[1] === "sm");
			toggle_class(ul, "bx--accordion--xl", /*size*/ ctx[1] === "xl");
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (33:0) {#if skeleton}
function create_if_block$3(ctx) {
	let accordionskeleton;
	let current;
	const accordionskeleton_spread_levels = [/*$$restProps*/ ctx[3], { align: /*align*/ ctx[0] }, { size: /*size*/ ctx[1] }];
	let accordionskeleton_props = {};

	for (let i = 0; i < accordionskeleton_spread_levels.length; i += 1) {
		accordionskeleton_props = assign(accordionskeleton_props, accordionskeleton_spread_levels[i]);
	}

	accordionskeleton = new AccordionSkeleton({ props: accordionskeleton_props });
	accordionskeleton.$on("click", /*click_handler*/ ctx[11]);
	accordionskeleton.$on("mouseover", /*mouseover_handler*/ ctx[12]);
	accordionskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[13]);
	accordionskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[14]);

	return {
		c() {
			create_component(accordionskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(accordionskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const accordionskeleton_changes = (dirty & /*$$restProps, align, size*/ 11)
			? get_spread_update(accordionskeleton_spread_levels, [
					dirty & /*$$restProps*/ 8 && get_spread_object(/*$$restProps*/ ctx[3]),
					dirty & /*align*/ 1 && { align: /*align*/ ctx[0] },
					dirty & /*size*/ 2 && { size: /*size*/ ctx[1] }
				])
			: {};

			accordionskeleton.$set(accordionskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(accordionskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(accordionskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(accordionskeleton, detaching);
		}
	};
}

function create_fragment$3(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$3, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	const omit_props_names = ["align","size","disabled","skeleton"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { align = "end" } = $$props;
	let { size = undefined } = $$props;
	let { disabled = false } = $$props;
	let { skeleton = false } = $$props;
	const disableItems = writable(disabled);
	setContext("Accordion", { disableItems });

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("align" in $$new_props) $$invalidate(0, align = $$new_props.align);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("skeleton" in $$new_props) $$invalidate(2, skeleton = $$new_props.skeleton);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*disabled*/ 16) {
			 disableItems.set(disabled);
		}
	};

	return [
		align,
		size,
		skeleton,
		$$restProps,
		disabled,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Accordion extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			align: 0,
			size: 1,
			disabled: 4,
			skeleton: 2
		});
	}
}

/* src/Accordion/AccordionItem.svelte generated by Svelte v3.32.1 */
const get_title_slot_changes = dirty => ({});
const get_title_slot_context = ctx => ({});

// (75:25) {title}
function fallback_block$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$4(ctx) {
	let li;
	let button;
	let chevronright16;
	let t0;
	let div0;
	let t1;
	let div1;
	let current;
	let mounted;
	let dispose;

	chevronright16 = new ChevronRight16({
			props: {
				class: "bx--accordion__arrow",
				"aria-label": /*iconDescription*/ ctx[3]
			}
		});

	const title_slot_template = /*#slots*/ ctx[7].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[6], get_title_slot_context);
	const title_slot_or_fallback = title_slot || fallback_block$1(ctx);
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let li_levels = [/*$$restProps*/ ctx[5]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			button = element("button");
			create_component(chevronright16.$$.fragment);
			t0 = space();
			div0 = element("div");
			if (title_slot_or_fallback) title_slot_or_fallback.c();
			t1 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div0, "bx--accordion__title", true);
			attr(button, "type", "button");
			attr(button, "title", /*iconDescription*/ ctx[3]);
			attr(button, "aria-expanded", /*open*/ ctx[0]);
			button.disabled = /*disabled*/ ctx[1];
			toggle_class(button, "bx--accordion__heading", true);
			toggle_class(div1, "bx--accordion__content", true);
			set_attributes(li, li_data);
			toggle_class(li, "bx--accordion__item", true);
			toggle_class(li, "bx--accordion__item--active", /*open*/ ctx[0]);
			toggle_class(li, "bx--accordion__item--disabled", /*disabled*/ ctx[1]);
			toggle_class(li, "bx--accordion__item--expanding", /*animation*/ ctx[4] === "expanding");
			toggle_class(li, "bx--accordion__item--collapsing", /*animation*/ ctx[4] === "collapsing");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			mount_component(chevronright16, button, null);
			append(button, t0);
			append(button, div0);

			if (title_slot_or_fallback) {
				title_slot_or_fallback.m(div0, null);
			}

			append(li, t1);
			append(li, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[9]),
					listen(button, "click", /*click_handler_1*/ ctx[14]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[12]),
					listen(button, "keydown", /*keydown_handler*/ ctx[13]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[15]),
					listen(li, "animationend", /*animationend_handler*/ ctx[8]),
					listen(li, "animationend", /*animationend_handler_1*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const chevronright16_changes = {};
			if (dirty & /*iconDescription*/ 8) chevronright16_changes["aria-label"] = /*iconDescription*/ ctx[3];
			chevronright16.$set(chevronright16_changes);

			if (title_slot) {
				if (title_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[6], dirty, get_title_slot_changes, get_title_slot_context);
				}
			} else {
				if (title_slot_or_fallback && title_slot_or_fallback.p && dirty & /*title*/ 4) {
					title_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*iconDescription*/ 8) {
				attr(button, "title", /*iconDescription*/ ctx[3]);
			}

			if (!current || dirty & /*open*/ 1) {
				attr(button, "aria-expanded", /*open*/ ctx[0]);
			}

			if (!current || dirty & /*disabled*/ 2) {
				button.disabled = /*disabled*/ ctx[1];
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]]));
			toggle_class(li, "bx--accordion__item", true);
			toggle_class(li, "bx--accordion__item--active", /*open*/ ctx[0]);
			toggle_class(li, "bx--accordion__item--disabled", /*disabled*/ ctx[1]);
			toggle_class(li, "bx--accordion__item--expanding", /*animation*/ ctx[4] === "expanding");
			toggle_class(li, "bx--accordion__item--collapsing", /*animation*/ ctx[4] === "collapsing");
		},
		i(local) {
			if (current) return;
			transition_in(chevronright16.$$.fragment, local);
			transition_in(title_slot_or_fallback, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright16.$$.fragment, local);
			transition_out(title_slot_or_fallback, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(chevronright16);
			if (title_slot_or_fallback) title_slot_or_fallback.d(detaching);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	const omit_props_names = ["title","open","disabled","iconDescription"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = "title" } = $$props;
	let { open = false } = $$props;
	let { disabled = false } = $$props;
	let { iconDescription = "Expand/Collapse" } = $$props;
	let initialDisabled = disabled;
	const ctx = getContext("Accordion");

	const unsubscribe = ctx.disableItems.subscribe(value => {
		if (!value && initialDisabled) return;
		$$invalidate(1, disabled = value);
	});

	let animation = undefined;

	onMount(() => {
		return () => {
			unsubscribe();
		};
	});

	function animationend_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	const click_handler_1 = () => {
		$$invalidate(0, open = !open);
		$$invalidate(4, animation = open ? "expanding" : "collapsing");
	};

	const keydown_handler_1 = ({ key }) => {
		if (open && key === "Escape") {
			$$invalidate(0, open = false);
		}
	};

	const animationend_handler_1 = () => {
		$$invalidate(4, animation = undefined);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("disabled" in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
		if ("iconDescription" in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	return [
		open,
		disabled,
		title,
		iconDescription,
		animation,
		$$restProps,
		$$scope,
		slots,
		animationend_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler_1,
		keydown_handler_1,
		animationend_handler_1
	];
}

class AccordionItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			title: 2,
			open: 0,
			disabled: 1,
			iconDescription: 3
		});
	}
}

/* src/AspectRatio/AspectRatio.svelte generated by Svelte v3.32.1 */

function create_fragment$5(ctx) {
	let div1;
	let div0;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div0, "bx--aspect-ratio--object", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--aspect-ratio", true);
			toggle_class(div1, "bx--aspect-ratio--2x1", /*ratio*/ ctx[0] === "2x1");
			toggle_class(div1, "bx--aspect-ratio--16x9", /*ratio*/ ctx[0] === "16x9");
			toggle_class(div1, "bx--aspect-ratio--4x3", /*ratio*/ ctx[0] === "4x3");
			toggle_class(div1, "bx--aspect-ratio--1x1", /*ratio*/ ctx[0] === "1x1");
			toggle_class(div1, "bx--aspect-ratio--3x4", /*ratio*/ ctx[0] === "3x4");
			toggle_class(div1, "bx--aspect-ratio--9x16", /*ratio*/ ctx[0] === "9x16");
			toggle_class(div1, "bx--aspect-ratio--1x2", /*ratio*/ ctx[0] === "1x2");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--aspect-ratio", true);
			toggle_class(div1, "bx--aspect-ratio--2x1", /*ratio*/ ctx[0] === "2x1");
			toggle_class(div1, "bx--aspect-ratio--16x9", /*ratio*/ ctx[0] === "16x9");
			toggle_class(div1, "bx--aspect-ratio--4x3", /*ratio*/ ctx[0] === "4x3");
			toggle_class(div1, "bx--aspect-ratio--1x1", /*ratio*/ ctx[0] === "1x1");
			toggle_class(div1, "bx--aspect-ratio--3x4", /*ratio*/ ctx[0] === "3x4");
			toggle_class(div1, "bx--aspect-ratio--9x16", /*ratio*/ ctx[0] === "9x16");
			toggle_class(div1, "bx--aspect-ratio--1x2", /*ratio*/ ctx[0] === "1x2");
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	const omit_props_names = ["ratio"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { ratio = "2x1" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("ratio" in $$new_props) $$invalidate(0, ratio = $$new_props.ratio);
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [ratio, $$restProps, $$scope, slots];
}

class AspectRatio extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { ratio: 0 });
	}
}

/* src/Breadcrumb/BreadcrumbSkeleton.svelte generated by Svelte v3.32.1 */

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (19:2) {#each Array.from({ length: count }, (_, i) => i) as item (item)}
function create_each_block$2(key_1, ctx) {
	let div;
	let span;
	let t1;

	return {
		key: key_1,
		first: null,
		c() {
			div = element("div");
			span = element("span");
			span.textContent = " ";
			t1 = space();
			toggle_class(span, "bx--link", true);
			toggle_class(div, "bx--breadcrumb-item", true);
			this.first = div;
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(div, t1);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$6(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*count*/ ctx[1] }, func$1);
	const get_key = ctx => /*item*/ ctx[7];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$2(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key));
	}

	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--breadcrumb", true);
			toggle_class(div, "bx--breadcrumb--no-trailing-slash", /*noTrailingSlash*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 2) {
				each_value = Array.from({ length: /*count*/ ctx[1] }, func$1);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, destroy_block, create_each_block$2, null, get_each_context$2);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--breadcrumb", true);
			toggle_class(div, "bx--breadcrumb--no-trailing-slash", /*noTrailingSlash*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$1 = (_, i) => i;

function instance$6($$self, $$props, $$invalidate) {
	const omit_props_names = ["noTrailingSlash","count"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { noTrailingSlash = false } = $$props;
	let { count = 3 } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("noTrailingSlash" in $$new_props) $$invalidate(0, noTrailingSlash = $$new_props.noTrailingSlash);
		if ("count" in $$new_props) $$invalidate(1, count = $$new_props.count);
	};

	return [
		noTrailingSlash,
		count,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class BreadcrumbSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { noTrailingSlash: 0, count: 1 });
	}
}

/* src/Breadcrumb/Breadcrumb.svelte generated by Svelte v3.32.1 */

function create_else_block$2(ctx) {
	let nav;
	let ol;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let nav_levels = [{ "aria-label": "Breadcrumb" }, /*$$restProps*/ ctx[2]];
	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	return {
		c() {
			nav = element("nav");
			ol = element("ol");
			if (default_slot) default_slot.c();
			toggle_class(ol, "bx--breadcrumb", true);
			toggle_class(ol, "bx--breadcrumb--no-trailing-slash", /*noTrailingSlash*/ ctx[0]);
			set_attributes(nav, nav_data);
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ol);

			if (default_slot) {
				default_slot.m(ol, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(nav, "click", /*click_handler_1*/ ctx[5]),
					listen(nav, "mouseover", /*mouseover_handler_1*/ ctx[6]),
					listen(nav, "mouseenter", /*mouseenter_handler_1*/ ctx[7]),
					listen(nav, "mouseleave", /*mouseleave_handler_1*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			if (dirty & /*noTrailingSlash*/ 1) {
				toggle_class(ol, "bx--breadcrumb--no-trailing-slash", /*noTrailingSlash*/ ctx[0]);
			}

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				{ "aria-label": "Breadcrumb" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (13:0) {#if skeleton}
function create_if_block$4(ctx) {
	let breadcrumbskeleton;
	let current;

	const breadcrumbskeleton_spread_levels = [
		{
			noTrailingSlash: /*noTrailingSlash*/ ctx[0]
		},
		/*$$restProps*/ ctx[2]
	];

	let breadcrumbskeleton_props = {};

	for (let i = 0; i < breadcrumbskeleton_spread_levels.length; i += 1) {
		breadcrumbskeleton_props = assign(breadcrumbskeleton_props, breadcrumbskeleton_spread_levels[i]);
	}

	breadcrumbskeleton = new BreadcrumbSkeleton({ props: breadcrumbskeleton_props });
	breadcrumbskeleton.$on("click", /*click_handler*/ ctx[9]);
	breadcrumbskeleton.$on("mouseover", /*mouseover_handler*/ ctx[10]);
	breadcrumbskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[11]);
	breadcrumbskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[12]);

	return {
		c() {
			create_component(breadcrumbskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(breadcrumbskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const breadcrumbskeleton_changes = (dirty & /*noTrailingSlash, $$restProps*/ 5)
			? get_spread_update(breadcrumbskeleton_spread_levels, [
					dirty & /*noTrailingSlash*/ 1 && {
						noTrailingSlash: /*noTrailingSlash*/ ctx[0]
					},
					dirty & /*$$restProps*/ 4 && get_spread_object(/*$$restProps*/ ctx[2])
				])
			: {};

			breadcrumbskeleton.$set(breadcrumbskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(breadcrumbskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(breadcrumbskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(breadcrumbskeleton, detaching);
		}
	};
}

function create_fragment$7(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$4, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$7($$self, $$props, $$invalidate) {
	const omit_props_names = ["noTrailingSlash","skeleton"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { noTrailingSlash = false } = $$props;
	let { skeleton = false } = $$props;

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("noTrailingSlash" in $$new_props) $$invalidate(0, noTrailingSlash = $$new_props.noTrailingSlash);
		if ("skeleton" in $$new_props) $$invalidate(1, skeleton = $$new_props.skeleton);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [
		noTrailingSlash,
		skeleton,
		$$restProps,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Breadcrumb extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { noTrailingSlash: 0, skeleton: 1 });
	}
}

/* src/Link/Link.svelte generated by Svelte v3.32.1 */

function create_else_block$3(ctx) {
	let a;
	let a_rel_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	let a_levels = [
		{
			rel: a_rel_value = /*$$restProps*/ ctx[6].target === "_blank"
			? "noopener noreferrer"
			: undefined
		},
		{ href: /*href*/ ctx[2] },
		/*$$restProps*/ ctx[6]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--link", true);
			toggle_class(a, "bx--link--disabled", /*disabled*/ ctx[4]);
			toggle_class(a, "bx--link--inline", /*inline*/ ctx[3]);
			toggle_class(a, "bx--link--visited", /*visited*/ ctx[5]);
			toggle_class(a, "bx--link--sm", /*size*/ ctx[1] === "sm");
			toggle_class(a, "bx--link--lg", /*size*/ ctx[1] === "lg");
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			/*a_binding*/ ctx[18](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler_1*/ ctx[13]),
					listen(a, "mouseover", /*mouseover_handler_1*/ ctx[14]),
					listen(a, "mouseenter", /*mouseenter_handler_1*/ ctx[15]),
					listen(a, "mouseleave", /*mouseleave_handler_1*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*$$restProps*/ 64 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[6].target === "_blank"
				? "noopener noreferrer"
				: undefined)) && { rel: a_rel_value },
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(a, "bx--link", true);
			toggle_class(a, "bx--link--disabled", /*disabled*/ ctx[4]);
			toggle_class(a, "bx--link--inline", /*inline*/ ctx[3]);
			toggle_class(a, "bx--link--visited", /*visited*/ ctx[5]);
			toggle_class(a, "bx--link--sm", /*size*/ ctx[1] === "sm");
			toggle_class(a, "bx--link--lg", /*size*/ ctx[1] === "lg");
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot) default_slot.d(detaching);
			/*a_binding*/ ctx[18](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (27:0) {#if disabled}
function create_if_block$5(ctx) {
	let p;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let p_levels = [/*$$restProps*/ ctx[6]];
	let p_data = {};

	for (let i = 0; i < p_levels.length; i += 1) {
		p_data = assign(p_data, p_levels[i]);
	}

	return {
		c() {
			p = element("p");
			if (default_slot) default_slot.c();
			set_attributes(p, p_data);
			toggle_class(p, "bx--link", true);
			toggle_class(p, "bx--link--disabled", /*disabled*/ ctx[4]);
			toggle_class(p, "bx--link--inline", /*inline*/ ctx[3]);
			toggle_class(p, "bx--link--visited", /*visited*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			/*p_binding*/ ctx[17](p);
			current = true;

			if (!mounted) {
				dispose = [
					listen(p, "click", /*click_handler*/ ctx[9]),
					listen(p, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(p, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(p, "mouseleave", /*mouseleave_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			set_attributes(p, p_data = get_spread_update(p_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(p, "bx--link", true);
			toggle_class(p, "bx--link--disabled", /*disabled*/ ctx[4]);
			toggle_class(p, "bx--link--inline", /*inline*/ ctx[3]);
			toggle_class(p, "bx--link--visited", /*visited*/ ctx[5]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (default_slot) default_slot.d(detaching);
			/*p_binding*/ ctx[17](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$8(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$5, create_else_block$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*disabled*/ ctx[4]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$8($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","href","inline","disabled","visited","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { href = undefined } = $$props;
	let { inline = false } = $$props;
	let { disabled = false } = $$props;
	let { visited = false } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	function p_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("inline" in $$new_props) $$invalidate(3, inline = $$new_props.inline);
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("visited" in $$new_props) $$invalidate(5, visited = $$new_props.visited);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		size,
		href,
		inline,
		disabled,
		visited,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		p_binding,
		a_binding
	];
}

class Link extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			size: 1,
			href: 2,
			inline: 3,
			disabled: 4,
			visited: 5,
			ref: 0
		});
	}
}

/* src/Breadcrumb/BreadcrumbItem.svelte generated by Svelte v3.32.1 */
const get_default_slot_changes_1 = dirty => ({ props: dirty & /*$$restProps*/ 4 });

const get_default_slot_context_1 = ctx => ({
	props: {
		"aria-current": /*$$restProps*/ ctx[2]["aria-current"],
		class: "bx--link"
	}
});

const get_default_slot_changes = dirty => ({ props: dirty & /*$$restProps*/ 4 });

const get_default_slot_context = ctx => ({
	props: {
		"aria-current": /*$$restProps*/ ctx[2]["aria-current"],
		class: "bx--link"
	}
});

// (32:2) {:else}
function create_else_block$4(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context_1);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, $$restProps*/ 260) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_default_slot_changes_1, get_default_slot_context_1);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (28:2) {#if href}
function create_if_block$6(ctx) {
	let link;
	let current;

	link = new Link({
			props: {
				href: /*href*/ ctx[0],
				"aria-current": /*$$restProps*/ ctx[2]["aria-current"],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(link.$$.fragment);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};
			if (dirty & /*href*/ 1) link_changes.href = /*href*/ ctx[0];
			if (dirty & /*$$restProps*/ 4) link_changes["aria-current"] = /*$$restProps*/ ctx[2]["aria-current"];

			if (dirty & /*$$scope, $$restProps*/ 260) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

// (29:4) <Link href="{href}" aria-current="{$$restProps['aria-current']}">
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, $$restProps*/ 260) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$9(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block$6, create_else_block$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let li_levels = [/*$$restProps*/ ctx[2]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if_block.c();
			set_attributes(li, li_data);
			toggle_class(li, "bx--breadcrumb-item", true);
			toggle_class(li, "bx--breadcrumb-item--current", /*isCurrentPage*/ ctx[1] && /*$$restProps*/ ctx[2]["aria-current"] !== "page");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "click", /*click_handler*/ ctx[4]),
					listen(li, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(li, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(li, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(li, null);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(li, "bx--breadcrumb-item", true);
			toggle_class(li, "bx--breadcrumb-item--current", /*isCurrentPage*/ ctx[1] && /*$$restProps*/ ctx[2]["aria-current"] !== "page");
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$9($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","isCurrentPage"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { href = undefined } = $$props;
	let { isCurrentPage = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("href" in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ("isCurrentPage" in $$new_props) $$invalidate(1, isCurrentPage = $$new_props.isCurrentPage);
		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	return [
		href,
		isCurrentPage,
		$$restProps,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class BreadcrumbItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$9, create_fragment$9, safe_not_equal, { href: 0, isCurrentPage: 1 });
	}
}

/* src/Button/ButtonSkeleton.svelte generated by Svelte v3.32.1 */

function create_else_block$5(ctx) {
	let div;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler_1*/ ctx[8]),
					listen(div, "mouseover", /*mouseover_handler_1*/ ctx[9]),
					listen(div, "mouseenter", /*mouseenter_handler_1*/ ctx[10]),
					listen(div, "mouseleave", /*mouseleave_handler_1*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (21:0) {#if href}
function create_if_block$7(ctx) {
	let a;
	let t_value = "" + "";
	let t;
	let a_rel_value;
	let mounted;
	let dispose;

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
			? "noopener noreferrer"
			: undefined
		},
		{ role: "button" },
		/*$$restProps*/ ctx[3]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			t = text(t_value);
			set_attributes(a, a_data);
			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[4]),
					listen(a, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(a, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(a, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*href*/ 1 && { href: /*href*/ ctx[0] },
				dirty & /*$$restProps*/ 8 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
				? "noopener noreferrer"
				: undefined) && { rel: a_rel_value },
				{ role: "button" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$a(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[0]) return create_if_block$7;
		return create_else_block$5;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$a($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","size","small"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { href = undefined } = $$props;
	let { size = "default" } = $$props;
	let { small = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("href" in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("small" in $$new_props) $$invalidate(2, small = $$new_props.small);
	};

	return [
		href,
		size,
		small,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class ButtonSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$a, create_fragment$a, safe_not_equal, { href: 0, size: 1, small: 2 });
	}
}

/* src/Button/Button.svelte generated by Svelte v3.32.1 */
const get_default_slot_changes$1 = dirty => ({ props: dirty[0] & /*buttonProps*/ 512 });
const get_default_slot_context$1 = ctx => ({ props: /*buttonProps*/ ctx[9] });

// (153:0) {:else}
function create_else_block$6(ctx) {
	let button;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[0] && create_if_block_4(ctx);
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[4]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [/*buttonProps*/ ctx[9]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append(button, t);

			if (default_slot) {
				default_slot.m(button, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			/*button_binding*/ ctx[32](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_2*/ ctx[23]),
					listen(button, "mouseover", /*mouseover_handler_2*/ ctx[24]),
					listen(button, "mouseenter", /*mouseenter_handler_2*/ ctx[25]),
					listen(button, "mouseleave", /*mouseleave_handler_2*/ ctx[26])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 131072) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[17], dirty, null, null);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 16) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[4];

			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*button_binding*/ ctx[32](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (133:28) 
function create_if_block_2(ctx) {
	let a;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[0] && create_if_block_3(ctx);
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[4]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let a_levels = [/*buttonProps*/ ctx[9]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			if (if_block) if_block.m(a, null);
			append(a, t);

			if (default_slot) {
				default_slot.m(a, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, a, null);
			}

			/*a_binding*/ ctx[31](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler_1*/ ctx[19]),
					listen(a, "mouseover", /*mouseover_handler_1*/ ctx[20]),
					listen(a, "mouseenter", /*mouseenter_handler_1*/ ctx[21]),
					listen(a, "mouseleave", /*mouseleave_handler_1*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(a, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 131072) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[17], dirty, null, null);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 16) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[4];

			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, a, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*a_binding*/ ctx[31](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (131:13) 
function create_if_block_1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], get_default_slot_context$1);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope, buttonProps*/ 131584) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[17], dirty, get_default_slot_changes$1, get_default_slot_context$1);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (120:0) {#if skeleton}
function create_if_block$8(ctx) {
	let buttonskeleton;
	let current;

	const buttonskeleton_spread_levels = [
		{ href: /*href*/ ctx[8] },
		{ size: /*size*/ ctx[2] },
		/*$$restProps*/ ctx[10],
		{
			style: /*hasIconOnly*/ ctx[0] && "width: 3rem;"
		}
	];

	let buttonskeleton_props = {};

	for (let i = 0; i < buttonskeleton_spread_levels.length; i += 1) {
		buttonskeleton_props = assign(buttonskeleton_props, buttonskeleton_spread_levels[i]);
	}

	buttonskeleton = new ButtonSkeleton({ props: buttonskeleton_props });
	buttonskeleton.$on("click", /*click_handler*/ ctx[27]);
	buttonskeleton.$on("mouseover", /*mouseover_handler*/ ctx[28]);
	buttonskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[29]);
	buttonskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[30]);

	return {
		c() {
			create_component(buttonskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(buttonskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const buttonskeleton_changes = (dirty[0] & /*href, size, $$restProps, hasIconOnly*/ 1285)
			? get_spread_update(buttonskeleton_spread_levels, [
					dirty[0] & /*href*/ 256 && { href: /*href*/ ctx[8] },
					dirty[0] & /*size*/ 4 && { size: /*size*/ ctx[2] },
					dirty[0] & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10]),
					dirty[0] & /*hasIconOnly*/ 1 && {
						style: /*hasIconOnly*/ ctx[0] && "width: 3rem;"
					}
				])
			: {};

			buttonskeleton.$set(buttonskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(buttonskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buttonskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(buttonskeleton, detaching);
		}
	};
}

// (162:4) {#if hasIconOnly}
function create_if_block_4(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[4]);
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 16) set_data(t, /*iconDescription*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (143:4) {#if hasIconOnly}
function create_if_block_3(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[4]);
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 16) set_data(t, /*iconDescription*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$b(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$8, create_if_block_1, create_if_block_2, create_else_block$6];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[6]) return 0;
		if (/*as*/ ctx[5]) return 1;
		if (/*href*/ ctx[8] && !/*disabled*/ ctx[7]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$b($$self, $$props, $$invalidate) {
	let buttonProps;

	const omit_props_names = [
		"kind","size","isSelected","hasIconOnly","icon","iconDescription","tooltipAlignment","tooltipPosition","as","skeleton","disabled","href","tabindex","type","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { kind = "primary" } = $$props;
	let { size = "default" } = $$props;
	let { isSelected = false } = $$props;
	let { hasIconOnly = false } = $$props;
	let { icon = undefined } = $$props;
	let { iconDescription = undefined } = $$props;
	let { tooltipAlignment = "center" } = $$props;
	let { tooltipPosition = "bottom" } = $$props;
	let { as = false } = $$props;
	let { skeleton = false } = $$props;
	let { disabled = false } = $$props;
	let { href = undefined } = $$props;
	let { tabindex = "0" } = $$props;
	let { type = "button" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ComposedModal");

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler_2(event) {
		bubble($$self, event);
	}

	function mouseover_handler_2(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("kind" in $$new_props) $$invalidate(11, kind = $$new_props.kind);
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("isSelected" in $$new_props) $$invalidate(12, isSelected = $$new_props.isSelected);
		if ("hasIconOnly" in $$new_props) $$invalidate(0, hasIconOnly = $$new_props.hasIconOnly);
		if ("icon" in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ("iconDescription" in $$new_props) $$invalidate(4, iconDescription = $$new_props.iconDescription);
		if ("tooltipAlignment" in $$new_props) $$invalidate(13, tooltipAlignment = $$new_props.tooltipAlignment);
		if ("tooltipPosition" in $$new_props) $$invalidate(14, tooltipPosition = $$new_props.tooltipPosition);
		if ("as" in $$new_props) $$invalidate(5, as = $$new_props.as);
		if ("skeleton" in $$new_props) $$invalidate(6, skeleton = $$new_props.skeleton);
		if ("disabled" in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ("href" in $$new_props) $$invalidate(8, href = $$new_props.href);
		if ("tabindex" in $$new_props) $$invalidate(15, tabindex = $$new_props.tabindex);
		if ("type" in $$new_props) $$invalidate(16, type = $$new_props.type);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*ref*/ 2) {
			 if (ctx && ref) {
				ctx.declareRef(ref);
			}
		}

		if ($$self.$$.dirty[0] & /*icon*/ 8) {
			 $$invalidate(0, hasIconOnly = icon && !$$slots.default);
		}

		 $$invalidate(9, buttonProps = {
			type: href && !disabled ? undefined : type,
			tabindex,
			disabled,
			href,
			"aria-pressed": hasIconOnly && kind === "ghost" ? isSelected : undefined,
			...$$restProps,
			class: [
				"bx--btn",
				size === "field" && "bx--btn--field",
				size === "small" && "bx--btn--sm",
				kind && `bx--btn--${kind}`,
				disabled && "bx--btn--disabled",
				hasIconOnly && "bx--btn--icon-only",
				hasIconOnly && "bx--tooltip__trigger",
				hasIconOnly && "bx--tooltip--a11y",
				hasIconOnly && tooltipPosition && `bx--tooltip--${tooltipPosition}`,
				hasIconOnly && tooltipAlignment && `bx--tooltip--align-${tooltipAlignment}`,
				hasIconOnly && isSelected && kind === "ghost" && "bx--btn--selected",
				$$restProps.class
			].filter(Boolean).join(" ")
		});
	};

	return [
		hasIconOnly,
		ref,
		size,
		icon,
		iconDescription,
		as,
		skeleton,
		disabled,
		href,
		buttonProps,
		$$restProps,
		kind,
		isSelected,
		tooltipAlignment,
		tooltipPosition,
		tabindex,
		type,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		a_binding,
		button_binding
	];
}

class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$b,
			create_fragment$b,
			safe_not_equal,
			{
				kind: 11,
				size: 2,
				isSelected: 12,
				hasIconOnly: 0,
				icon: 3,
				iconDescription: 4,
				tooltipAlignment: 13,
				tooltipPosition: 14,
				as: 5,
				skeleton: 6,
				disabled: 7,
				href: 8,
				tabindex: 15,
				type: 16,
				ref: 1
			},
			[-1, -1]
		);
	}
}

/* src/Button/ButtonSet.svelte generated by Svelte v3.32.1 */

function create_fragment$c(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let div_levels = [/*$$restProps*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--btn-set", true);
			toggle_class(div, "bx--btn-set--stacked", /*stacked*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div, "bx--btn-set", true);
			toggle_class(div, "bx--btn-set--stacked", /*stacked*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$c($$self, $$props, $$invalidate) {
	const omit_props_names = ["stacked"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { stacked = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("stacked" in $$new_props) $$invalidate(0, stacked = $$new_props.stacked);
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [stacked, $$restProps, $$scope, slots];
}

class ButtonSet extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$c, create_fragment$c, safe_not_equal, { stacked: 0 });
	}
}

/* src/Checkbox/CheckboxSkeleton.svelte generated by Svelte v3.32.1 */

function create_fragment$d(ctx) {
	let div;
	let span;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			span = element("span");
			toggle_class(span, "bx--checkbox-label-text", true);
			toggle_class(span, "bx--skeleton", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
			toggle_class(div, "bx--checkbox-label", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[1]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
			toggle_class(div, "bx--checkbox-label", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$d($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class CheckboxSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});
	}
}

/* src/Checkbox/Checkbox.svelte generated by Svelte v3.32.1 */

function create_else_block$7(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let span;
	let t1;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[11]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			span = element("span");
			t1 = text(/*labelText*/ ctx[6]);
			attr(input, "type", "checkbox");
			input.checked = /*checked*/ ctx[0];
			input.disabled = /*disabled*/ ctx[5];
			attr(input, "id", /*id*/ ctx[10]);
			input.indeterminate = /*indeterminate*/ ctx[2];
			attr(input, "name", /*name*/ ctx[8]);
			input.readOnly = /*readonly*/ ctx[4];
			toggle_class(input, "bx--checkbox", true);
			toggle_class(span, "bx--checkbox-label-text", true);
			toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[7]);
			attr(label, "for", /*id*/ ctx[10]);
			attr(label, "title", /*title*/ ctx[9]);
			toggle_class(label, "bx--checkbox-label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			/*input_binding*/ ctx[21](input);
			append(div, t0);
			append(div, label);
			append(label, span);
			append(span, t1);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[16]),
					listen(input, "change", /*change_handler_1*/ ctx[22]),
					listen(div, "click", /*click_handler_1*/ ctx[12]),
					listen(div, "mouseover", /*mouseover_handler_1*/ ctx[13]),
					listen(div, "mouseenter", /*mouseenter_handler_1*/ ctx[14]),
					listen(div, "mouseleave", /*mouseleave_handler_1*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (dirty & /*disabled*/ 32) {
				input.disabled = /*disabled*/ ctx[5];
			}

			if (dirty & /*id*/ 1024) {
				attr(input, "id", /*id*/ ctx[10]);
			}

			if (dirty & /*indeterminate*/ 4) {
				input.indeterminate = /*indeterminate*/ ctx[2];
			}

			if (dirty & /*name*/ 256) {
				attr(input, "name", /*name*/ ctx[8]);
			}

			if (dirty & /*readonly*/ 16) {
				input.readOnly = /*readonly*/ ctx[4];
			}

			if (dirty & /*labelText*/ 64) set_data(t1, /*labelText*/ ctx[6]);

			if (dirty & /*hideLabel*/ 128) {
				toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[7]);
			}

			if (dirty & /*id*/ 1024) {
				attr(label, "for", /*id*/ ctx[10]);
			}

			if (dirty & /*title*/ 512) {
				attr(label, "title", /*title*/ ctx[9]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]]));
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*input_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (50:0) {#if skeleton}
function create_if_block$9(ctx) {
	let checkboxskeleton;
	let current;
	const checkboxskeleton_spread_levels = [/*$$restProps*/ ctx[11]];
	let checkboxskeleton_props = {};

	for (let i = 0; i < checkboxskeleton_spread_levels.length; i += 1) {
		checkboxskeleton_props = assign(checkboxskeleton_props, checkboxskeleton_spread_levels[i]);
	}

	checkboxskeleton = new CheckboxSkeleton({ props: checkboxskeleton_props });
	checkboxskeleton.$on("click", /*click_handler*/ ctx[17]);
	checkboxskeleton.$on("mouseover", /*mouseover_handler*/ ctx[18]);
	checkboxskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[19]);
	checkboxskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[20]);

	return {
		c() {
			create_component(checkboxskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkboxskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkboxskeleton_changes = (dirty & /*$$restProps*/ 2048)
			? get_spread_update(checkboxskeleton_spread_levels, [get_spread_object(/*$$restProps*/ ctx[11])])
			: {};

			checkboxskeleton.$set(checkboxskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkboxskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkboxskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkboxskeleton, detaching);
		}
	};
}

function create_fragment$e(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$9, create_else_block$7];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[3]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$e($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"checked","indeterminate","skeleton","readonly","disabled","labelText","hideLabel","name","title","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { checked = false } = $$props;
	let { indeterminate = false } = $$props;
	let { skeleton = false } = $$props;
	let { readonly = false } = $$props;
	let { disabled = false } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { name = "" } = $$props;
	let { title = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler_1 = () => {
		$$invalidate(0, checked = !checked);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ("indeterminate" in $$new_props) $$invalidate(2, indeterminate = $$new_props.indeterminate);
		if ("skeleton" in $$new_props) $$invalidate(3, skeleton = $$new_props.skeleton);
		if ("readonly" in $$new_props) $$invalidate(4, readonly = $$new_props.readonly);
		if ("disabled" in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ("labelText" in $$new_props) $$invalidate(6, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(7, hideLabel = $$new_props.hideLabel);
		if ("name" in $$new_props) $$invalidate(8, name = $$new_props.name);
		if ("title" in $$new_props) $$invalidate(9, title = $$new_props.title);
		if ("id" in $$new_props) $$invalidate(10, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*checked*/ 1) {
			 dispatch("check", checked);
		}
	};

	return [
		checked,
		ref,
		indeterminate,
		skeleton,
		readonly,
		disabled,
		labelText,
		hideLabel,
		name,
		title,
		id,
		$$restProps,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		change_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		input_binding,
		change_handler_1
	];
}

class Checkbox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
			checked: 0,
			indeterminate: 2,
			skeleton: 3,
			readonly: 4,
			disabled: 5,
			labelText: 6,
			hideLabel: 7,
			name: 8,
			title: 9,
			id: 10,
			ref: 1
		});
	}
}

/* src/Checkbox/InlineCheckbox.svelte generated by Svelte v3.32.1 */

function create_fragment$f(ctx) {
	let input;
	let input_checked_value;
	let input_aria_checked_value;
	let t;
	let label;
	let label_aria_label_value;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "checkbox" },
		{
			checked: input_checked_value = /*indeterminate*/ ctx[2] ? false : /*checked*/ ctx[1]
		},
		{ indeterminate: /*indeterminate*/ ctx[2] },
		{ id: /*id*/ ctx[4] },
		/*$$restProps*/ ctx[5],
		{ "aria-label": undefined },
		{
			"aria-checked": input_aria_checked_value = /*indeterminate*/ ctx[2] ? "mixed" : /*checked*/ ctx[1]
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			t = space();
			label = element("label");
			set_attributes(input, input_data);
			toggle_class(input, "bx--checkbox", true);
			attr(label, "for", /*id*/ ctx[4]);
			attr(label, "title", /*title*/ ctx[3]);
			attr(label, "aria-label", label_aria_label_value = /*$$props*/ ctx[6]["aria-label"]);
			toggle_class(label, "bx--checkbox-label", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			/*input_binding*/ ctx[8](input);
			insert(target, t, anchor);
			insert(target, label, anchor);

			if (!mounted) {
				dispose = listen(input, "change", /*change_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "checkbox" },
				dirty & /*indeterminate, checked*/ 6 && input_checked_value !== (input_checked_value = /*indeterminate*/ ctx[2] ? false : /*checked*/ ctx[1]) && { checked: input_checked_value },
				dirty & /*indeterminate*/ 4 && { indeterminate: /*indeterminate*/ ctx[2] },
				dirty & /*id*/ 16 && { id: /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5],
				{ "aria-label": undefined },
				dirty & /*indeterminate, checked*/ 6 && input_aria_checked_value !== (input_aria_checked_value = /*indeterminate*/ ctx[2] ? "mixed" : /*checked*/ ctx[1]) && { "aria-checked": input_aria_checked_value }
			]));

			toggle_class(input, "bx--checkbox", true);

			if (dirty & /*id*/ 16) {
				attr(label, "for", /*id*/ ctx[4]);
			}

			if (dirty & /*title*/ 8) {
				attr(label, "title", /*title*/ ctx[3]);
			}

			if (dirty & /*$$props*/ 64 && label_aria_label_value !== (label_aria_label_value = /*$$props*/ ctx[6]["aria-label"])) {
				attr(label, "aria-label", label_aria_label_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[8](null);
			if (detaching) detach(t);
			if (detaching) detach(label);
			mounted = false;
			dispose();
		}
	};
}

function instance$f($$self, $$props, $$invalidate) {
	const omit_props_names = ["checked","indeterminate","title","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { checked = false } = $$props;
	let { indeterminate = false } = $$props;
	let { title = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("checked" in $$new_props) $$invalidate(1, checked = $$new_props.checked);
		if ("indeterminate" in $$new_props) $$invalidate(2, indeterminate = $$new_props.indeterminate);
		if ("title" in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	$$props = exclude_internal_props($$props);

	return [
		ref,
		checked,
		indeterminate,
		title,
		id,
		$$restProps,
		$$props,
		change_handler,
		input_binding
	];
}

class InlineCheckbox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
			checked: 1,
			indeterminate: 2,
			title: 3,
			id: 4,
			ref: 0
		});
	}
}

/* src/ContentSwitcher/ContentSwitcher.svelte generated by Svelte v3.32.1 */

function create_fragment$g(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let div_levels = [{ role: "tablist" }, /*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--content-switcher", true);
			toggle_class(div, "bx--content-switcher--light", /*light*/ ctx[0]);
			toggle_class(div, "bx--content-switcher--sm", /*size*/ ctx[1] === "sm");
			toggle_class(div, "bx--content-switcher--xl", /*size*/ ctx[1] === "xl");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[8]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [{ role: "tablist" }, dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--content-switcher", true);
			toggle_class(div, "bx--content-switcher--light", /*light*/ ctx[0]);
			toggle_class(div, "bx--content-switcher--sm", /*size*/ ctx[1] === "sm");
			toggle_class(div, "bx--content-switcher--xl", /*size*/ ctx[1] === "xl");
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$g($$self, $$props, $$invalidate) {
	let currentIndex;
	let switches;
	const omit_props_names = ["selectedIndex","light","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selectedIndex = 0 } = $$props;
	let { light = false } = $$props;
	let { size = undefined } = $$props;
	const dispatch = createEventDispatcher();
	const currentId = writable(null);

	setContext("ContentSwitcher", {
		currentId,
		add: ({ id, text, selected }) => {
			if (selected) {
				$$invalidate(3, selectedIndex = switches.length);
			}

			$$invalidate(5, switches = [...switches, { id, text, selected }]);
		},
		update: id => {
			$$invalidate(3, selectedIndex = switches.map(({ id }) => id).indexOf(id));
		},
		change: direction => {
			let index = currentIndex + direction;

			if (index < 0) {
				index = switches.length - 1;
			} else if (index >= switches.length) {
				index = 0;
			}

			$$invalidate(3, selectedIndex = index);
		}
	});

	afterUpdate(() => {
		if (selectedIndex !== currentIndex) {
			$$invalidate(4, currentIndex = selectedIndex);
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("selectedIndex" in $$new_props) $$invalidate(3, selectedIndex = $$new_props.selectedIndex);
		if ("light" in $$new_props) $$invalidate(0, light = $$new_props.light);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*switches, currentIndex*/ 48) {
			 if (switches[currentIndex]) {
				dispatch("change", currentIndex);
				currentId.set(switches[currentIndex].id);
			}
		}
	};

	 $$invalidate(4, currentIndex = -1);
	 $$invalidate(5, switches = []);

	return [
		light,
		size,
		$$restProps,
		selectedIndex,
		currentIndex,
		switches,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ContentSwitcher extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$g, create_fragment$g, safe_not_equal, { selectedIndex: 3, light: 0, size: 1 });
	}
}

/* src/ContentSwitcher/Switch.svelte generated by Svelte v3.32.1 */

function fallback_block$2(ctx) {
	let t;

	return {
		c() {
			t = text(/*text*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 4) set_data(t, /*text*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$h(ctx) {
	let button;
	let span;
	let button_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$2(ctx);

	let button_levels = [
		{ role: "tab" },
		{
			tabindex: button_tabindex_value = /*selected*/ ctx[0] ? "0" : "-1"
		},
		{ "aria-selected": /*selected*/ ctx[0] },
		{ disabled: /*disabled*/ ctx[3] },
		{ id: /*id*/ ctx[4] },
		/*$$restProps*/ ctx[6]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			span = element("span");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			toggle_class(span, "bx--content-switcher__label", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--content-switcher-btn", true);
			toggle_class(button, "bx--content-switcher--selected", /*selected*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, span);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(span, null);
			}

			/*button_binding*/ ctx[14](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[9]),
					listen(button, "click", prevent_default(/*click_handler_1*/ ctx[15])),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[12]),
					listen(button, "keydown", /*keydown_handler*/ ctx[13]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*text*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ role: "tab" },
				(!current || dirty & /*selected*/ 1 && button_tabindex_value !== (button_tabindex_value = /*selected*/ ctx[0] ? "0" : "-1")) && { tabindex: button_tabindex_value },
				(!current || dirty & /*selected*/ 1) && { "aria-selected": /*selected*/ ctx[0] },
				(!current || dirty & /*disabled*/ 8) && { disabled: /*disabled*/ ctx[3] },
				(!current || dirty & /*id*/ 16) && { id: /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(button, "bx--content-switcher-btn", true);
			toggle_class(button, "bx--content-switcher--selected", /*selected*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$h($$self, $$props, $$invalidate) {
	const omit_props_names = ["text","selected","disabled","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { text = "Provide text" } = $$props;
	let { selected = false } = $$props;
	let { disabled = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ContentSwitcher");
	ctx.add({ id, text, selected });

	const unsubscribe = ctx.currentId.subscribe($ => {
		$$invalidate(0, selected = $ === id);
	});

	afterUpdate(() => {
		if (selected) {
			ref.focus();
		}
	});

	onDestroy(() => {
		unsubscribe();
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => {
		ctx.update(id);
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === "ArrowRight") {
			ctx.change(1);
		} else if (key === "ArrowLeft") {
			ctx.change(-1);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("text" in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ("selected" in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		selected,
		ref,
		text,
		disabled,
		id,
		ctx,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		button_binding,
		click_handler_1,
		keydown_handler_1
	];
}

class Switch extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
			text: 2,
			selected: 0,
			disabled: 3,
			id: 4,
			ref: 1
		});
	}
}

/* src/ContextMenu/ContextMenu.svelte generated by Svelte v3.32.1 */

function create_fragment$i(ctx) {
	let ul;
	let ul_style_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	let ul_levels = [
		{ role: "menu" },
		{ tabindex: "-1" },
		{ "data-direction": direction },
		{ "data-level": /*level*/ ctx[6] },
		/*$$restProps*/ ctx[11],
		{
			style: ul_style_value = "left: " + /*x*/ ctx[1] + "px; top: " + /*y*/ ctx[2] + "px; " + /*$$restProps*/ ctx[11].style
		}
	];

	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--context-menu", true);
			toggle_class(ul, "bx--context-menu--open", /*open*/ ctx[0]);
			toggle_class(ul, "bx--context-menu--invisible", /*open*/ ctx[0] && /*x*/ ctx[1] === 0 && /*y*/ ctx[2] === 0);
			toggle_class(ul, "bx--context-menu--root", /*level*/ ctx[6] === 1);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			/*ul_binding*/ ctx[19](ul);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "contextmenu", prevent_default(/*contextmenu_handler*/ ctx[16])),
					listen(window, "click", /*click_handler_1*/ ctx[17]),
					listen(window, "keydown", /*keydown_handler_1*/ ctx[18]),
					listen(ul, "click", /*click_handler*/ ctx[14]),
					listen(ul, "click", /*click_handler_2*/ ctx[20]),
					listen(ul, "keydown", /*keydown_handler*/ ctx[15]),
					listen(ul, "keydown", /*keydown_handler_2*/ ctx[21])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
				{ role: "menu" },
				{ tabindex: "-1" },
				{ "data-direction": direction },
				(!current || dirty & /*level*/ 64) && { "data-level": /*level*/ ctx[6] },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11],
				(!current || dirty & /*x, y, $$restProps*/ 2054 && ul_style_value !== (ul_style_value = "left: " + /*x*/ ctx[1] + "px; top: " + /*y*/ ctx[2] + "px; " + /*$$restProps*/ ctx[11].style)) && { style: ul_style_value }
			]));

			toggle_class(ul, "bx--context-menu", true);
			toggle_class(ul, "bx--context-menu--open", /*open*/ ctx[0]);
			toggle_class(ul, "bx--context-menu--invisible", /*open*/ ctx[0] && /*x*/ ctx[1] === 0 && /*y*/ ctx[2] === 0);
			toggle_class(ul, "bx--context-menu--root", /*level*/ ctx[6] === 1);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			/*ul_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

let direction = 1;

function instance$i($$self, $$props, $$invalidate) {
	let level;
	const omit_props_names = ["open","x","y","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $hasPopup;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { open = false } = $$props;
	let { x = 0 } = $$props;
	let { y = 0 } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	const position = writable([x, y]);
	const currentIndex = writable(-1);
	const hasPopup = writable(false);
	component_subscribe($$self, hasPopup, value => $$invalidate(7, $hasPopup = value));
	const ctx = getContext("ContextMenu");
	let options = [];
	let prevX = 0;
	let prevY = 0;
	let focusIndex = -1;

	function close() {
		$$invalidate(0, open = false);
		$$invalidate(1, x = 0);
		$$invalidate(2, y = 0);
		prevX = 0;
		prevY = 0;
		$$invalidate(4, focusIndex = -1);
	}

	setContext("ContextMenu", {
		currentIndex,
		position,
		close,
		setPopup: popup => {
			hasPopup.set(popup);
		}
	});

	afterUpdate(() => {
		if (open) {
			$$invalidate(5, options = [...ref.querySelectorAll("li[data-nested='false']")]);

			if (level === 1) {
				if (prevX !== x || prevY !== y) ref.focus();
				prevX = x;
				prevY = y;
			}

			dispatch("open");
		} else {
			dispatch("close");
		}

		if (!$hasPopup && options[focusIndex]) options[focusIndex].focus();
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	const contextmenu_handler = e => {
		if (level > 1) return;
		if (open || x === 0) $$invalidate(1, x = e.x);
		if (open || y === 0) $$invalidate(2, y = e.y);
		position.set([x, y]);
		$$invalidate(0, open = true);
	};

	const click_handler_1 = e => {
		if (!open) return;
		if (e.target.contains(ref)) close();
	};

	const keydown_handler_1 = e => {
		if (open && e.key === "Escape") close();
	};

	function ul_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(3, ref);
		});
	}

	const click_handler_2 = ({ target }) => {
		const closestOption = target.closest("[tabindex]");

		if (closestOption && closestOption.getAttribute("role") !== "menuitem") {
			close();
		}
	};

	const keydown_handler_2 = e => {
		if (open) e.preventDefault();
		if ($hasPopup) return;

		if (e.key === "ArrowDown") {
			if (focusIndex < options.length - 1) $$invalidate(4, focusIndex++, focusIndex);
		} else if (e.key === "ArrowUp") {
			if (focusIndex === -1) {
				$$invalidate(4, focusIndex = options.length - 1);
			} else {
				if (focusIndex > 0) $$invalidate(4, focusIndex--, focusIndex);
			}
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("x" in $$new_props) $$invalidate(1, x = $$new_props.x);
		if ("y" in $$new_props) $$invalidate(2, y = $$new_props.y);
		if ("ref" in $$new_props) $$invalidate(3, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*focusIndex*/ 16) {
			 currentIndex.set(focusIndex);
		}
	};

	 $$invalidate(6, level = !ctx ? 1 : 2);

	return [
		open,
		x,
		y,
		ref,
		focusIndex,
		options,
		level,
		$hasPopup,
		position,
		hasPopup,
		close,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		contextmenu_handler,
		click_handler_1,
		keydown_handler_1,
		ul_binding,
		click_handler_2,
		keydown_handler_2
	];
}

class ContextMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$i, create_fragment$i, safe_not_equal, { open: 0, x: 1, y: 2, ref: 3 });
	}
}

/* src/ContextMenu/ContextMenuDivider.svelte generated by Svelte v3.32.1 */

function create_fragment$j(ctx) {
	let li;

	return {
		c() {
			li = element("li");
			attr(li, "role", "separator");
			toggle_class(li, "bx--context-menu-divider", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

class ContextMenuDivider extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment$j, safe_not_equal, {});
	}
}

/* src/ContextMenu/ContextMenuGroup.svelte generated by Svelte v3.32.1 */

function create_fragment$k(ctx) {
	let li;
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	return {
		c() {
			li = element("li");
			ul = element("ul");
			if (default_slot) default_slot.c();
			attr(ul, "role", "group");
			attr(ul, "aria-label", /*labelText*/ ctx[0]);
			attr(li, "role", "none");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (!current || dirty & /*labelText*/ 1) {
				attr(ul, "aria-label", /*labelText*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$j($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selectedIds = [] } = $$props;
	let { labelText = "" } = $$props;
	const currentIds = writable([]);

	setContext("ContextMenuGroup", {
		currentIds,
		addOption: ({ id }) => {
			if (!selectedIds.includes(id)) {
				$$invalidate(1, selectedIds = [...selectedIds, id]);
			}
		},
		toggleOption: ({ id }) => {
			if (!selectedIds.includes(id)) {
				$$invalidate(1, selectedIds = [...selectedIds, id]);
			} else {
				$$invalidate(1, selectedIds = selectedIds.filter(_ => _ !== id));
			}
		}
	});

	$$self.$$set = $$props => {
		if ("selectedIds" in $$props) $$invalidate(1, selectedIds = $$props.selectedIds);
		if ("labelText" in $$props) $$invalidate(0, labelText = $$props.labelText);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selectedIds*/ 2) {
			 currentIds.set(selectedIds);
		}
	};

	return [labelText, selectedIds, $$scope, slots];
}

class ContextMenuGroup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$j, create_fragment$k, safe_not_equal, { selectedIds: 1, labelText: 0 });
	}
}

/* node_modules/carbon-icons-svelte/lib/Checkmark16/Checkmark16.svelte generated by Svelte v3.32.1 */

function create_if_block$a(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$3(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$a(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$a(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$l(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$3(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Checkmark16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M13 24L4 15 5.414 13.586 13 21.171 26.586 7.586 28 9 13 24z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Checkmark16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$k($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Checkmark16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$k, create_fragment$l, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/CaretRight16/CaretRight16.svelte generated by Svelte v3.32.1 */

function create_if_block$b(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$4(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$b(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$b(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$m(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$4(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "CaretRight16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M12 8L22 16 12 24z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "CaretRight16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$l($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class CaretRight16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$l, create_fragment$m, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/ContextMenu/ContextMenuOption.svelte generated by Svelte v3.32.1 */
const get_shortcutText_slot_changes = dirty => ({});
const get_shortcutText_slot_context = ctx => ({});
const get_labelText_slot_changes_1 = dirty => ({});
const get_labelText_slot_context_1 = ctx => ({});
const get_labelText_slot_changes = dirty => ({});
const get_labelText_slot_context = ctx => ({});

// (245:2) {:else}
function create_else_block$8(ctx) {
	let div1;
	let t0;
	let span;
	let t1;
	let div0;
	let current;
	let if_block = /*indented*/ ctx[2] && create_if_block_2$1(ctx);
	const labelText_slot_template = /*#slots*/ ctx[21].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[29], get_labelText_slot_context_1);
	const labelText_slot_or_fallback = labelText_slot || fallback_block_2(ctx);
	const shortcutText_slot_template = /*#slots*/ ctx[21].shortcutText;
	const shortcutText_slot = create_slot(shortcutText_slot_template, ctx, /*$$scope*/ ctx[29], get_shortcutText_slot_context);
	const shortcutText_slot_or_fallback = shortcutText_slot || fallback_block_1(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t1 = space();
			div0 = element("div");
			if (shortcutText_slot_or_fallback) shortcutText_slot_or_fallback.c();
			attr(span, "title", /*labelText*/ ctx[5]);
			toggle_class(span, "bx--context-menu-option__label", true);
			toggle_class(div0, "bx--context-menu-option__info", true);
			toggle_class(div1, "bx--context-menu-option__content", true);
			toggle_class(div1, "bx--context-menu-option__content--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t0);
			append(div1, span);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			append(div1, t1);
			append(div1, div0);

			if (shortcutText_slot_or_fallback) {
				shortcutText_slot_or_fallback.m(div0, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*indented*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*indented*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (labelText_slot) {
				if (labelText_slot.p && dirty[0] & /*$$scope*/ 536870912) {
					update_slot(labelText_slot, labelText_slot_template, ctx, /*$$scope*/ ctx[29], dirty, get_labelText_slot_changes_1, get_labelText_slot_context_1);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && dirty[0] & /*labelText*/ 32) {
					labelText_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*labelText*/ 32) {
				attr(span, "title", /*labelText*/ ctx[5]);
			}

			if (shortcutText_slot) {
				if (shortcutText_slot.p && dirty[0] & /*$$scope*/ 536870912) {
					update_slot(shortcutText_slot, shortcutText_slot_template, ctx, /*$$scope*/ ctx[29], dirty, get_shortcutText_slot_changes, get_shortcutText_slot_context);
				}
			} else {
				if (shortcutText_slot_or_fallback && shortcutText_slot_or_fallback.p && dirty[0] & /*shortcutText*/ 64) {
					shortcutText_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(div1, "bx--context-menu-option__content--disabled", /*disabled*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(labelText_slot_or_fallback, local);
			transition_in(shortcutText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(labelText_slot_or_fallback, local);
			transition_out(shortcutText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			if (shortcutText_slot_or_fallback) shortcutText_slot_or_fallback.d(detaching);
		}
	};
}

// (222:2) {#if subOptions}
function create_if_block$c(ctx) {
	let div1;
	let t0;
	let span;
	let t1;
	let div0;
	let caretright16;
	let t2;
	let contextmenu;
	let current;
	let if_block = /*indented*/ ctx[2] && create_if_block_1$1(ctx);
	const labelText_slot_template = /*#slots*/ ctx[21].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[29], get_labelText_slot_context);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$5(ctx);
	caretright16 = new CaretRight16({});

	contextmenu = new ContextMenu({
			props: {
				open: /*submenuOpen*/ ctx[8],
				x: /*submenuPosition*/ ctx[15][0],
				y: /*submenuPosition*/ ctx[15][1],
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t1 = space();
			div0 = element("div");
			create_component(caretright16.$$.fragment);
			t2 = space();
			create_component(contextmenu.$$.fragment);
			attr(span, "title", /*labelText*/ ctx[5]);
			toggle_class(span, "bx--context-menu-option__label", true);
			toggle_class(div0, "bx--context-menu-option__info", true);
			toggle_class(div1, "bx--context-menu-option__content", true);
			toggle_class(div1, "bx--context-menu-option__content--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t0);
			append(div1, span);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			append(div1, t1);
			append(div1, div0);
			mount_component(caretright16, div0, null);
			insert(target, t2, anchor);
			mount_component(contextmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*indented*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*indented*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (labelText_slot) {
				if (labelText_slot.p && dirty[0] & /*$$scope*/ 536870912) {
					update_slot(labelText_slot, labelText_slot_template, ctx, /*$$scope*/ ctx[29], dirty, get_labelText_slot_changes, get_labelText_slot_context);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && dirty[0] & /*labelText*/ 32) {
					labelText_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*labelText*/ 32) {
				attr(span, "title", /*labelText*/ ctx[5]);
			}

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(div1, "bx--context-menu-option__content--disabled", /*disabled*/ ctx[4]);
			}

			const contextmenu_changes = {};
			if (dirty[0] & /*submenuOpen*/ 256) contextmenu_changes.open = /*submenuOpen*/ ctx[8];
			if (dirty[0] & /*submenuPosition*/ 32768) contextmenu_changes.x = /*submenuPosition*/ ctx[15][0];
			if (dirty[0] & /*submenuPosition*/ 32768) contextmenu_changes.y = /*submenuPosition*/ ctx[15][1];

			if (dirty[0] & /*$$scope*/ 536870912) {
				contextmenu_changes.$$scope = { dirty, ctx };
			}

			contextmenu.$set(contextmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(labelText_slot_or_fallback, local);
			transition_in(caretright16.$$.fragment, local);
			transition_in(contextmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(labelText_slot_or_fallback, local);
			transition_out(caretright16.$$.fragment, local);
			transition_out(contextmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			destroy_component(caretright16);
			if (detaching) detach(t2);
			destroy_component(contextmenu, detaching);
		}
	};
}

// (250:6) {#if indented}
function create_if_block_2$1(ctx) {
	let div;
	let switch_instance;
	let current;
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			toggle_class(div, "bx--context-menu-option__icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, null);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (switch_instance) destroy_component(switch_instance);
		}
	};
}

// (256:31) {labelText}
function fallback_block_2(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 32) set_data(t, /*labelText*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (259:34) {shortcutText}
function fallback_block_1(ctx) {
	let t;

	return {
		c() {
			t = text(/*shortcutText*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*shortcutText*/ 64) set_data(t, /*shortcutText*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (227:6) {#if indented}
function create_if_block_1$1(ctx) {
	let div;
	let switch_instance;
	let current;
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			toggle_class(div, "bx--context-menu-option__icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, null);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (switch_instance) destroy_component(switch_instance);
		}
	};
}

// (233:31) {labelText}
function fallback_block$5(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 32) set_data(t, /*labelText*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (238:4) <ContextMenu       open="{submenuOpen}"       x="{submenuPosition[0]}"       y="{submenuPosition[1]}"     >
function create_default_slot$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[21].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[29], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 536870912) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[29], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$n(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let li_aria_disabled_value;
	let li_aria_haspopup_value;
	let li_aria_expanded_value;
	let li_aria_checked_value;
	let li_data_nested_value;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block$c, create_else_block$8];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*subOptions*/ ctx[16]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let li_levels = [
		{ role: /*role*/ ctx[14] },
		{ tabindex: "-1" },
		{
			"aria-disabled": li_aria_disabled_value = !/*subOptions*/ ctx[16] && /*disabled*/ ctx[4]
		},
		{
			"aria-haspopup": li_aria_haspopup_value = /*subOptions*/ ctx[16] ? true : undefined
		},
		{
			"aria-expanded": li_aria_expanded_value = /*subOptions*/ ctx[16]
			? /*submenuOpen*/ ctx[8]
			: undefined
		},
		{ indented: /*indented*/ ctx[2] },
		{
			"aria-checked": li_aria_checked_value = /*isSelectable*/ ctx[9] || /*isRadio*/ ctx[10]
			? /*selected*/ ctx[0]
			: undefined
		},
		{
			"data-nested": li_data_nested_value = /*ref*/ ctx[1] && /*ref*/ ctx[1].closest(".bx--context-menu").getAttribute("data-level") === "2"
		},
		{ "data-sub": /*subOptions*/ ctx[16] },
		{ "data-id": /*id*/ ctx[7] },
		/*$$restProps*/ ctx[18]
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if_block.c();
			set_attributes(li, li_data);
			toggle_class(li, "bx--context-menu-option", true);
			toggle_class(li, "bx--context-menu-option--disabled", true);
			toggle_class(li, "bx--context-menu-option--active", /*subOptions*/ ctx[16] && /*submenuOpen*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			/*li_binding*/ ctx[25](li);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "keydown", /*keydown_handler*/ ctx[22]),
					listen(li, "keydown", /*keydown_handler_1*/ ctx[26]),
					listen(li, "mouseenter", /*mouseenter_handler*/ ctx[23]),
					listen(li, "mouseenter", /*mouseenter_handler_1*/ ctx[27]),
					listen(li, "mouseleave", /*mouseleave_handler*/ ctx[24]),
					listen(li, "mouseleave", /*mouseleave_handler_1*/ ctx[28]),
					listen(li, "click", /*handleClick*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(li, null);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty[0] & /*role*/ 16384) && { role: /*role*/ ctx[14] },
				{ tabindex: "-1" },
				(!current || dirty[0] & /*subOptions, disabled*/ 65552 && li_aria_disabled_value !== (li_aria_disabled_value = !/*subOptions*/ ctx[16] && /*disabled*/ ctx[4])) && { "aria-disabled": li_aria_disabled_value },
				(!current || dirty[0] & /*subOptions*/ 65536 && li_aria_haspopup_value !== (li_aria_haspopup_value = /*subOptions*/ ctx[16] ? true : undefined)) && { "aria-haspopup": li_aria_haspopup_value },
				(!current || dirty[0] & /*subOptions, submenuOpen*/ 65792 && li_aria_expanded_value !== (li_aria_expanded_value = /*subOptions*/ ctx[16]
				? /*submenuOpen*/ ctx[8]
				: undefined)) && { "aria-expanded": li_aria_expanded_value },
				(!current || dirty[0] & /*indented*/ 4) && { indented: /*indented*/ ctx[2] },
				(!current || dirty[0] & /*isSelectable, isRadio, selected*/ 1537 && li_aria_checked_value !== (li_aria_checked_value = /*isSelectable*/ ctx[9] || /*isRadio*/ ctx[10]
				? /*selected*/ ctx[0]
				: undefined)) && { "aria-checked": li_aria_checked_value },
				(!current || dirty[0] & /*ref*/ 2 && li_data_nested_value !== (li_data_nested_value = /*ref*/ ctx[1] && /*ref*/ ctx[1].closest(".bx--context-menu").getAttribute("data-level") === "2")) && { "data-nested": li_data_nested_value },
				(!current || dirty[0] & /*subOptions*/ 65536) && { "data-sub": /*subOptions*/ ctx[16] },
				(!current || dirty[0] & /*id*/ 128) && { "data-id": /*id*/ ctx[7] },
				dirty[0] & /*$$restProps*/ 262144 && /*$$restProps*/ ctx[18]
			]));

			toggle_class(li, "bx--context-menu-option", true);
			toggle_class(li, "bx--context-menu-option--disabled", true);
			toggle_class(li, "bx--context-menu-option--active", /*subOptions*/ ctx[16] && /*submenuOpen*/ ctx[8]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
			/*li_binding*/ ctx[25](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

const moderate01 = 150;

function instance$m($$self, $$props, $$invalidate) {
	let isSelectable;
	let isRadio;
	let subOptions;

	const omit_props_names = [
		"disabled","indented","icon","labelText","selected","selectable","shortcutText","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { disabled = false } = $$props;
	let { indented = false } = $$props;
	let { icon = undefined } = $$props;
	let { labelText = "" } = $$props;
	let { selected = false } = $$props;
	let { selectable = false } = $$props;
	let { shortcutText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	const ctx = getContext("ContextMenu");
	const ctxGroup = getContext("ContextMenuGroup");
	const ctxRadioGroup = getContext("ContextMenuRadioGroup");
	let unsubCurrentIds = undefined;
	let unsubCurrentId = undefined;
	let timeoutHover = undefined;
	let rootMenuPosition = [0, 0];
	let focusIndex = 0;
	let options = [];
	let role = "menuitem";
	let submenuOpen = false;
	let submenuPosition = [0, 0];

	const unsubPosition = ctx.position.subscribe(position => {
		$$invalidate(20, rootMenuPosition = position);
	});

	function handleClick(opts = {}) {
		if (disabled) return ctx.close();
		if (subOptions) return;

		if (!!ctxGroup) {
			ctxGroup.toggleOption({ id });
		} else if (!!ctxRadioGroup) {
			if (opts.fromKeyboard) {
				ctxRadioGroup.setOption({ id: opts.id });
			} else {
				ctxRadioGroup.setOption({ id });
			}
		} else {
			$$invalidate(0, selected = !selected);
		}

		ctx.close();
		dispatch("click");
	}

	onMount(() => {
		if (selected === true) $$invalidate(19, selectable = true);

		if (ctxGroup) {
			unsubCurrentIds = ctxGroup.currentIds.subscribe(_currentIds => {
				$$invalidate(0, selected = _currentIds.includes(id));
			});
		}

		if (ctxRadioGroup) {
			unsubCurrentId = ctxRadioGroup.currentId.subscribe(_id => {
				$$invalidate(0, selected = id === _id);
			});
		}

		return () => {
			unsubPosition();
			if (unsubCurrentIds) unsubCurrentIds();
			if (unsubCurrentId) unsubCurrentId();
			if (typeof timeoutHover === "number") clearTimeout(timeoutHover);
		};
	});

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function li_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler_1 = async ({ key, target }) => {
		if (subOptions && (key === "ArrowRight" || key === " " || key === "Enter")) {
			$$invalidate(8, submenuOpen = true);
			await tick();
			$$invalidate(13, options = [...ref.querySelectorAll("li[tabindex]")]);
			if (options[focusIndex]) options[focusIndex].focus();
			return;
		}

		if (submenuOpen) {
			if (key === "ArrowLeft") {
				$$invalidate(8, submenuOpen = false);
				$$invalidate(12, focusIndex = 0);
				return;
			}

			if (key === "ArrowDown") {
				if (focusIndex < options.length - 1) $$invalidate(12, focusIndex++, focusIndex);
			} else if (key === "ArrowUp") {
				if (focusIndex === -1) {
					$$invalidate(12, focusIndex = options.length - 1);
				} else {
					if (focusIndex > 0) $$invalidate(12, focusIndex--, focusIndex);
				}
			}

			if (options[focusIndex]) options[focusIndex].focus();
		}

		if (key === " " || key === "Enter") {
			handleClick({
				fromKeyboard: true,
				id: target.getAttribute("data-id")
			});
		}
	};

	const mouseenter_handler_1 = () => {
		if (subOptions) {
			$$invalidate(11, timeoutHover = setTimeout(
				() => {
					$$invalidate(8, submenuOpen = true);
				},
				moderate01
			));
		}
	};

	const mouseleave_handler_1 = e => {
		if (subOptions) {
			if (typeof timeoutHover === "number") clearTimeout(timeoutHover);
			$$invalidate(8, submenuOpen = false);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("indented" in $$new_props) $$invalidate(2, indented = $$new_props.indented);
		if ("icon" in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ("labelText" in $$new_props) $$invalidate(5, labelText = $$new_props.labelText);
		if ("selected" in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ("selectable" in $$new_props) $$invalidate(19, selectable = $$new_props.selectable);
		if ("shortcutText" in $$new_props) $$invalidate(6, shortcutText = $$new_props.shortcutText);
		if ("id" in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(29, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*selectable*/ 524288) {
			 $$invalidate(9, isSelectable = !!ctxGroup || selectable);
		}

		if ($$self.$$.dirty[0] & /*submenuOpen*/ 256) {
			 ctx.setPopup(submenuOpen);
		}

		if ($$self.$$.dirty[0] & /*submenuOpen, ref, rootMenuPosition*/ 1048834) {
			 if (submenuOpen) {
				const { width, y } = ref.getBoundingClientRect();
				$$invalidate(15, submenuPosition = [rootMenuPosition[0] + width, y]);
			}
		}

		if ($$self.$$.dirty[0] & /*isSelectable, selected, id, isRadio*/ 1665) {
			 {
				if (isSelectable) {
					$$invalidate(2, indented = true);
					$$invalidate(14, role = "menuitemcheckbox");

					if (selected) {
						if (ctxGroup) ctxGroup.addOption({ id });
						$$invalidate(3, icon = Checkmark16);
					} else {
						$$invalidate(3, icon = undefined);
					}
				}

				if (isRadio) {
					$$invalidate(2, indented = true);
					$$invalidate(14, role = "menuitemradio");
					ctxRadioGroup.addOption({ id });

					if (selected) {
						if (ctxRadioGroup) ctxRadioGroup.setOption({ id });
						$$invalidate(3, icon = Checkmark16);
					} else {
						$$invalidate(3, icon = undefined);
					}
				}
			}
		}
	};

	 $$invalidate(10, isRadio = !!ctxRadioGroup);
	 $$invalidate(16, subOptions = $$slots.default);

	return [
		selected,
		ref,
		indented,
		icon,
		disabled,
		labelText,
		shortcutText,
		id,
		submenuOpen,
		isSelectable,
		isRadio,
		timeoutHover,
		focusIndex,
		options,
		role,
		submenuPosition,
		subOptions,
		handleClick,
		$$restProps,
		selectable,
		rootMenuPosition,
		slots,
		keydown_handler,
		mouseenter_handler,
		mouseleave_handler,
		li_binding,
		keydown_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		$$scope
	];
}

class ContextMenuOption extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$m,
			create_fragment$n,
			safe_not_equal,
			{
				disabled: 4,
				indented: 2,
				icon: 3,
				labelText: 5,
				selected: 0,
				selectable: 19,
				shortcutText: 6,
				id: 7,
				ref: 1
			},
			[-1, -1]
		);
	}
}

/* src/ContextMenu/ContextMenuRadioGroup.svelte generated by Svelte v3.32.1 */

function create_fragment$o(ctx) {
	let li;
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			li = element("li");
			ul = element("ul");
			if (default_slot) default_slot.c();
			attr(ul, "role", "group");
			attr(ul, "aria-label", /*labelText*/ ctx[0]);
			attr(li, "role", "none");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			if (!current || dirty & /*labelText*/ 1) {
				attr(ul, "aria-label", /*labelText*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$n($$self, $$props, $$invalidate) {
	let $radioIds;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selectedId = "" } = $$props;
	let { labelText = "" } = $$props;
	const currentId = writable("");
	const radioIds = writable([]);
	component_subscribe($$self, radioIds, value => $$invalidate(5, $radioIds = value));

	setContext("ContextMenuRadioGroup", {
		currentId,
		radioIds,
		addOption: ({ id }) => {
			if (!$radioIds.includes(id)) {
				radioIds.update(_ => [..._, id]);
			}
		},
		setOption: ({ id }) => {
			$$invalidate(2, selectedId = id);
		}
	});

	$$self.$$set = $$props => {
		if ("selectedId" in $$props) $$invalidate(2, selectedId = $$props.selectedId);
		if ("labelText" in $$props) $$invalidate(0, labelText = $$props.labelText);
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selectedId*/ 4) {
			 currentId.set(selectedId);
		}
	};

	return [labelText, radioIds, selectedId, $$scope, slots];
}

class ContextMenuRadioGroup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$n, create_fragment$o, safe_not_equal, { selectedId: 2, labelText: 0 });
	}
}

/* src/Copy/Copy.svelte generated by Svelte v3.32.1 */

function create_if_block$d(ctx) {
	let t_value = (/*feedback*/ ctx[1] || /*$$restProps*/ ctx[5]["aria-label"]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*feedback, $$restProps*/ 34 && t_value !== (t_value = (/*feedback*/ ctx[1] || /*$$restProps*/ ctx[5]["aria-label"]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (47:8)      
function fallback_block$6(ctx) {
	let if_block_anchor;
	let if_block = /*animation*/ ctx[3] && create_if_block$d(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*animation*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$d(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$p(ctx) {
	let button;
	let t0;
	let span;
	let t1;
	let button_aria_label_value;
	let button_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	const default_slot_or_fallback = default_slot || fallback_block$6(ctx);

	let button_levels = [
		{ type: "button" },
		{ "aria-live": "polite" },
		{
			"aria-label": button_aria_label_value = /*animation*/ ctx[3] ? /*feedback*/ ctx[1] : undefined
		},
		/*$$restProps*/ ctx[5],
		{
			class: button_class_value = "" + (/*$$restProps*/ ctx[5].class + " " + (/*animation*/ ctx[3] && `bx--copy-btn--${/*animation*/ ctx[3]}`))
		}
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t0 = space();
			span = element("span");
			t1 = text(/*feedback*/ ctx[1]);
			attr(span, "aria-hidden", "true");
			toggle_class(span, "bx--assistive-text", true);
			toggle_class(span, "bx--copy-btn__feedback", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--copy", true);
			toggle_class(button, "bx--copy-btn--animating", /*animation*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			append(button, t0);
			append(button, span);
			append(span, t1);
			/*button_binding*/ ctx[10](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[8]),
					listen(button, "click", /*click_handler_1*/ ctx[11]),
					listen(button, "animationend", /*animationend_handler*/ ctx[9]),
					listen(button, "animationend", /*animationend_handler_1*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*feedback, $$restProps, animation*/ 42) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*feedback*/ 2) set_data(t1, /*feedback*/ ctx[1]);

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				{ "aria-live": "polite" },
				(!current || dirty & /*animation, feedback*/ 10 && button_aria_label_value !== (button_aria_label_value = /*animation*/ ctx[3] ? /*feedback*/ ctx[1] : undefined)) && { "aria-label": button_aria_label_value },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5],
				(!current || dirty & /*$$restProps, animation*/ 40 && button_class_value !== (button_class_value = "" + (/*$$restProps*/ ctx[5].class + " " + (/*animation*/ ctx[3] && `bx--copy-btn--${/*animation*/ ctx[3]}`)))) && { class: button_class_value }
			]));

			toggle_class(button, "bx--copy", true);
			toggle_class(button, "bx--copy-btn--animating", /*animation*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[10](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$o($$self, $$props, $$invalidate) {
	const omit_props_names = ["feedback","feedbackTimeout","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { feedback = "Copied!" } = $$props;
	let { feedbackTimeout = 2000 } = $$props;
	let { ref = null } = $$props;
	let animation = undefined;
	let timeout = undefined;

	onMount(() => {
		return () => {
			clearTimeout(timeout);
		};
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function animationend_handler(event) {
		bubble($$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_1 = () => {
		if (animation === "fade-in") return;
		$$invalidate(3, animation = "fade-in");

		$$invalidate(4, timeout = setTimeout(
			() => {
				$$invalidate(3, animation = "fade-out");
			},
			feedbackTimeout
		));
	};

	const animationend_handler_1 = ({ animationName }) => {
		if (animationName === "hide-feedback") {
			$$invalidate(3, animation = undefined);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("feedback" in $$new_props) $$invalidate(1, feedback = $$new_props.feedback);
		if ("feedbackTimeout" in $$new_props) $$invalidate(2, feedbackTimeout = $$new_props.feedbackTimeout);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		feedback,
		feedbackTimeout,
		animation,
		timeout,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		animationend_handler,
		button_binding,
		click_handler_1,
		animationend_handler_1
	];
}

class Copy extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$o, create_fragment$p, safe_not_equal, { feedback: 1, feedbackTimeout: 2, ref: 0 });
	}
}

/* node_modules/carbon-icons-svelte/lib/Copy16/Copy16.svelte generated by Svelte v3.32.1 */

function create_if_block$e(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$7(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$e(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$e(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$q(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$7(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Copy16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M28,10V28H10V10H28m0-2H10a2,2,0,0,0-2,2V28a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V10a2,2,0,0,0-2-2Z");
			attr(path1, "d", "M4,18H2V4A2,2,0,0,1,4,2H18V4H4Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Copy16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$p($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Copy16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$p, create_fragment$q, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/CopyButton/CopyButton.svelte generated by Svelte v3.32.1 */

function create_default_slot$2(ctx) {
	let copy16;
	let current;
	copy16 = new Copy16({ props: { class: "bx--snippet__icon" } });

	return {
		c() {
			create_component(copy16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(copy16, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(copy16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(copy16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(copy16, detaching);
		}
	};
}

function create_fragment$r(ctx) {
	let copy;
	let current;

	const copy_spread_levels = [
		{ class: "bx--copy-btn" },
		{ "aria-label": /*iconDescription*/ ctx[0] },
		{ title: /*iconDescription*/ ctx[0] },
		/*$$restProps*/ ctx[1]
	];

	let copy_props = {
		$$slots: { default: [create_default_slot$2] },
		$$scope: { ctx }
	};

	for (let i = 0; i < copy_spread_levels.length; i += 1) {
		copy_props = assign(copy_props, copy_spread_levels[i]);
	}

	copy = new Copy({ props: copy_props });
	copy.$on("click", /*click_handler*/ ctx[2]);
	copy.$on("animationend", /*animationend_handler*/ ctx[3]);

	return {
		c() {
			create_component(copy.$$.fragment);
		},
		m(target, anchor) {
			mount_component(copy, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const copy_changes = (dirty & /*iconDescription, $$restProps*/ 3)
			? get_spread_update(copy_spread_levels, [
					copy_spread_levels[0],
					dirty & /*iconDescription*/ 1 && { "aria-label": /*iconDescription*/ ctx[0] },
					dirty & /*iconDescription*/ 1 && { title: /*iconDescription*/ ctx[0] },
					dirty & /*$$restProps*/ 2 && get_spread_object(/*$$restProps*/ ctx[1])
				])
			: {};

			if (dirty & /*$$scope*/ 16) {
				copy_changes.$$scope = { dirty, ctx };
			}

			copy.$set(copy_changes);
		},
		i(local) {
			if (current) return;
			transition_in(copy.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(copy.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(copy, detaching);
		}
	};
}

function instance$q($$self, $$props, $$invalidate) {
	const omit_props_names = ["iconDescription"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { iconDescription = "Copy to clipboard" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function animationend_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("iconDescription" in $$new_props) $$invalidate(0, iconDescription = $$new_props.iconDescription);
	};

	return [iconDescription, $$restProps, click_handler, animationend_handler];
}

class CopyButton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$q, create_fragment$r, safe_not_equal, { iconDescription: 0 });
	}
}

/* node_modules/carbon-icons-svelte/lib/WarningFilled16/WarningFilled16.svelte generated by Svelte v3.32.1 */

function create_if_block$f(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$8(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$f(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$f(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$s(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$8(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningFilled16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M8,1C4.2,1,1,4.2,1,8s3.2,7,7,7s7-3.1,7-7S11.9,1,8,1z M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2\tc-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8c0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z");
			attr(path1, "d", "M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2c-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8\tc0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningFilled16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$r($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningFilled16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$r, create_fragment$s, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/WarningAltFilled16/WarningAltFilled16.svelte generated by Svelte v3.32.1 */

function create_if_block$g(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$9(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$g(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$g(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$t(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$9(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningAltFilled16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M14.875,11h2.25V21h-2.25ZM16,27a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,27Z");
			attr(path1, "d", "M29.8872,28.5386l-13-25a1,1,0,0,0-1.7744,0l-13,25A1,1,0,0,0,3,30H29a1,1,0,0,0,.8872-1.4614ZM14.875,11h2.25V21h-2.25ZM16,27a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,27Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningAltFilled16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$s($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningAltFilled16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$s, create_fragment$t, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/ListBox/ListBox.svelte generated by Svelte v3.32.1 */

function create_if_block_1$2(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[6]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*invalidText*/ 64) set_data(t, /*invalidText*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (62:0) {#if !invalid && warn}
function create_if_block$h(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[8]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*warnText*/ 256) set_data(t, /*warnText*/ ctx[8]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$u(ctx) {
	let div;
	let div_data_invalid_value;
	let t0;
	let t1;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div_levels = [
		{ role: "listbox" },
		{ tabindex: "-1" },
		{
			"data-invalid": div_data_invalid_value = /*invalid*/ ctx[5] || undefined
		},
		/*$$restProps*/ ctx[9]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	let if_block0 = /*invalid*/ ctx[5] && create_if_block_1$2(ctx);
	let if_block1 = !/*invalid*/ ctx[5] && /*warn*/ ctx[7] && create_if_block$h(ctx);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box", true);
			toggle_class(div, "bx--list-box--sm", /*size*/ ctx[0] === "sm");
			toggle_class(div, "bx--list-box--xl", /*size*/ ctx[0] === "xl");
			toggle_class(div, "bx--list-box--inline", /*type*/ ctx[1] === "inline");
			toggle_class(div, "bx--list-box--disabled", /*disabled*/ ctx[4]);
			toggle_class(div, "bx--list-box--expanded", /*open*/ ctx[2]);
			toggle_class(div, "bx--list-box--light", /*light*/ ctx[3]);
			toggle_class(div, "bx--list-box--warning", !/*invalid*/ ctx[5] && /*warn*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "keydown", /*keydown_handler*/ ctx[12]),
					listen(div, "keydown", keydown_handler_1),
					listen(div, "click", prevent_default(/*click_handler*/ ctx[13]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "listbox" },
				{ tabindex: "-1" },
				(!current || dirty & /*invalid*/ 32 && div_data_invalid_value !== (div_data_invalid_value = /*invalid*/ ctx[5] || undefined)) && { "data-invalid": div_data_invalid_value },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(div, "bx--list-box", true);
			toggle_class(div, "bx--list-box--sm", /*size*/ ctx[0] === "sm");
			toggle_class(div, "bx--list-box--xl", /*size*/ ctx[0] === "xl");
			toggle_class(div, "bx--list-box--inline", /*type*/ ctx[1] === "inline");
			toggle_class(div, "bx--list-box--disabled", /*disabled*/ ctx[4]);
			toggle_class(div, "bx--list-box--expanded", /*open*/ ctx[2]);
			toggle_class(div, "bx--list-box--light", /*light*/ ctx[3]);
			toggle_class(div, "bx--list-box--warning", !/*invalid*/ ctx[5] && /*warn*/ ctx[7]);

			if (/*invalid*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$2(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*invalid*/ ctx[5] && /*warn*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$h(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

const keydown_handler_1 = e => {
	if (e.key === "Escape") {
		e.stopPropagation();
	}
};

function instance$t($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","type","open","light","disabled","invalid","invalidText","warn","warnText"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { type = "default" } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ("type" in $$new_props) $$invalidate(1, type = $$new_props.type);
		if ("open" in $$new_props) $$invalidate(2, open = $$new_props.open);
		if ("light" in $$new_props) $$invalidate(3, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("invalid" in $$new_props) $$invalidate(5, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(6, invalidText = $$new_props.invalidText);
		if ("warn" in $$new_props) $$invalidate(7, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(8, warnText = $$new_props.warnText);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	return [
		size,
		type,
		open,
		light,
		disabled,
		invalid,
		invalidText,
		warn,
		warnText,
		$$restProps,
		$$scope,
		slots,
		keydown_handler,
		click_handler
	];
}

class ListBox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$t, create_fragment$u, safe_not_equal, {
			size: 0,
			type: 1,
			open: 2,
			light: 3,
			disabled: 4,
			invalid: 5,
			invalidText: 6,
			warn: 7,
			warnText: 8
		});
	}
}

/* src/ListBox/ListBoxField.svelte generated by Svelte v3.32.1 */

function create_fragment$v(ctx) {
	let div;
	let div_role_value;
	let div_aria_owns_value;
	let div_aria_controls_value;
	let div_aria_label_value;
	let div_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div_levels = [
		{
			role: div_role_value = /*ariaExpanded*/ ctx[5] ? "combobox" : /*role*/ ctx[2]
		},
		{ "aria-expanded": /*ariaExpanded*/ ctx[5] },
		{
			"aria-owns": div_aria_owns_value = /*ariaExpanded*/ ctx[5] && /*menuId*/ ctx[6] || undefined
		},
		{
			"aria-controls": div_aria_controls_value = /*ariaExpanded*/ ctx[5] && /*menuId*/ ctx[6] || undefined
		},
		{ "aria-disabled": /*disabled*/ ctx[1] },
		{
			"aria-label": div_aria_label_value = /*ariaExpanded*/ ctx[5]
			? /*translateWithId*/ ctx[4]("close")
			: /*translateWithId*/ ctx[4]("open")
		},
		{
			tabindex: div_tabindex_value = /*disabled*/ ctx[1] ? "-1" : /*tabindex*/ ctx[3]
		},
		/*$$restProps*/ ctx[7]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__field", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[18](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[12]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(div, "keydown", stop_propagation(prevent_default(/*keydown_handler*/ ctx[16]))),
					listen(div, "blur", /*blur_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*ariaExpanded, role*/ 36 && div_role_value !== (div_role_value = /*ariaExpanded*/ ctx[5] ? "combobox" : /*role*/ ctx[2])) && { role: div_role_value },
				(!current || dirty & /*ariaExpanded*/ 32) && { "aria-expanded": /*ariaExpanded*/ ctx[5] },
				(!current || dirty & /*ariaExpanded, menuId*/ 96 && div_aria_owns_value !== (div_aria_owns_value = /*ariaExpanded*/ ctx[5] && /*menuId*/ ctx[6] || undefined)) && { "aria-owns": div_aria_owns_value },
				(!current || dirty & /*ariaExpanded, menuId*/ 96 && div_aria_controls_value !== (div_aria_controls_value = /*ariaExpanded*/ ctx[5] && /*menuId*/ ctx[6] || undefined)) && { "aria-controls": div_aria_controls_value },
				(!current || dirty & /*disabled*/ 2) && { "aria-disabled": /*disabled*/ ctx[1] },
				(!current || dirty & /*ariaExpanded, translateWithId*/ 48 && div_aria_label_value !== (div_aria_label_value = /*ariaExpanded*/ ctx[5]
				? /*translateWithId*/ ctx[4]("close")
				: /*translateWithId*/ ctx[4]("open"))) && { "aria-label": div_aria_label_value },
				(!current || dirty & /*disabled, tabindex*/ 10 && div_tabindex_value !== (div_tabindex_value = /*disabled*/ ctx[1] ? "-1" : /*tabindex*/ ctx[3])) && { tabindex: div_tabindex_value },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(div, "bx--list-box__field", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[18](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$u($$self, $$props, $$invalidate) {
	let ariaExpanded;
	let menuId;
	const omit_props_names = ["disabled","role","tabindex","translationIds","translateWithId","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { disabled = false } = $$props;
	let { role = "combobox" } = $$props;
	let { tabindex = "-1" } = $$props;
	const translationIds = { close: "close", open: "open" };
	let { translateWithId = id => defaultTranslations[id] } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	const defaultTranslations = {
		[translationIds.close]: "Close menu",
		[translationIds.open]: "Open menu"
	};

	const ctx = getContext("MultiSelect");

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(21, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("disabled" in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
		if ("role" in $$new_props) $$invalidate(2, role = $$new_props.role);
		if ("tabindex" in $$new_props) $$invalidate(3, tabindex = $$new_props.tabindex);
		if ("translateWithId" in $$new_props) $$invalidate(4, translateWithId = $$new_props.translateWithId);
		if ("id" in $$new_props) $$invalidate(9, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ref*/ 1) {
			 if (ctx && ref) {
				ctx.declareRef({ key: "field", ref });
			}
		}

		 $$invalidate(5, ariaExpanded = $$props["aria-expanded"]);

		if ($$self.$$.dirty & /*id*/ 512) {
			 $$invalidate(6, menuId = `menu-${id}`);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		ref,
		disabled,
		role,
		tabindex,
		translateWithId,
		ariaExpanded,
		menuId,
		$$restProps,
		translationIds,
		id,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		blur_handler,
		div_binding
	];
}

class ListBoxField extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$u, create_fragment$v, safe_not_equal, {
			disabled: 1,
			role: 2,
			tabindex: 3,
			translationIds: 8,
			translateWithId: 4,
			id: 9,
			ref: 0
		});
	}

	get translationIds() {
		return this.$$.ctx[8];
	}
}

/* src/ListBox/ListBoxMenu.svelte generated by Svelte v3.32.1 */

function create_fragment$w(ctx) {
	let div;
	let div_id_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let div_levels = [
		{ role: "listbox" },
		{
			id: div_id_value = "menu-" + /*id*/ ctx[1]
		},
		/*$$restProps*/ ctx[2]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__menu", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[6](div);
			current = true;

			if (!mounted) {
				dispose = listen(div, "scroll", /*scroll_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "listbox" },
				(!current || dirty & /*id*/ 2 && div_id_value !== (div_id_value = "menu-" + /*id*/ ctx[1])) && { id: div_id_value },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(div, "bx--list-box__menu", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$v($$self, $$props, $$invalidate) {
	const omit_props_names = ["id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	function scroll_handler(event) {
		bubble($$self, event);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [ref, id, $$restProps, $$scope, slots, scroll_handler, div_binding];
}

class ListBoxMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$v, create_fragment$w, safe_not_equal, { id: 1, ref: 0 });
	}
}

/* node_modules/carbon-icons-svelte/lib/ChevronDown16/ChevronDown16.svelte generated by Svelte v3.32.1 */

function create_if_block$i(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$a(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$i(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$i(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$x(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$a(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ChevronDown16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ChevronDown16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$w($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ChevronDown16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$w, create_fragment$x, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/ListBox/ListBoxMenuIcon.svelte generated by Svelte v3.32.1 */

function create_fragment$y(ctx) {
	let div;
	let chevrondown16;
	let current;
	let mounted;
	let dispose;

	chevrondown16 = new ChevronDown16({
			props: {
				"aria-label": /*description*/ ctx[1],
				title: /*description*/ ctx[1]
			}
		});

	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			create_component(chevrondown16.$$.fragment);
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__menu-icon", true);
			toggle_class(div, "bx--list-box__menu-icon--open", /*open*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(chevrondown16, div, null);
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", prevent_default(/*click_handler*/ ctx[5]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const chevrondown16_changes = {};
			if (dirty & /*description*/ 2) chevrondown16_changes["aria-label"] = /*description*/ ctx[1];
			if (dirty & /*description*/ 2) chevrondown16_changes.title = /*description*/ ctx[1];
			chevrondown16.$set(chevrondown16_changes);
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--list-box__menu-icon", true);
			toggle_class(div, "bx--list-box__menu-icon--open", /*open*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(chevrondown16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevrondown16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(chevrondown16);
			mounted = false;
			dispose();
		}
	};
}

function instance$x($$self, $$props, $$invalidate) {
	let description;
	const omit_props_names = ["open","translationIds","translateWithId"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { open = false } = $$props;
	const translationIds = { close: "close", open: "open" };
	let { translateWithId = id => defaultTranslations[id] } = $$props;

	const defaultTranslations = {
		[translationIds.close]: "Close menu",
		[translationIds.open]: "Open menu"
	};

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("translateWithId" in $$new_props) $$invalidate(4, translateWithId = $$new_props.translateWithId);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open, translateWithId*/ 17) {
			 $$invalidate(1, description = open
			? translateWithId("close")
			: translateWithId("open"));
		}
	};

	return [open, description, $$restProps, translationIds, translateWithId, click_handler];
}

class ListBoxMenuIcon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$x, create_fragment$y, safe_not_equal, {
			open: 0,
			translationIds: 3,
			translateWithId: 4
		});
	}

	get translationIds() {
		return this.$$.ctx[3];
	}
}

/* src/ListBox/ListBoxMenuItem.svelte generated by Svelte v3.32.1 */

function create_fragment$z(ctx) {
	let div1;
	let div0;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let div1_levels = [/*$$restProps*/ ctx[2]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div0, "bx--list-box__menu-item__option", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--list-box__menu-item", true);
			toggle_class(div1, "bx--list-box__menu-item--active", /*active*/ ctx[0]);
			toggle_class(div1, "bx--list-box__menu-item--highlighted", /*highlighted*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[5]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div1, "bx--list-box__menu-item", true);
			toggle_class(div1, "bx--list-box__menu-item--active", /*active*/ ctx[0]);
			toggle_class(div1, "bx--list-box__menu-item--highlighted", /*highlighted*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$y($$self, $$props, $$invalidate) {
	const omit_props_names = ["active","highlighted"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { active = false } = $$props;
	let { highlighted = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("active" in $$new_props) $$invalidate(0, active = $$new_props.active);
		if ("highlighted" in $$new_props) $$invalidate(1, highlighted = $$new_props.highlighted);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [
		active,
		highlighted,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ListBoxMenuItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$y, create_fragment$z, safe_not_equal, { active: 0, highlighted: 1 });
	}
}

/* node_modules/carbon-icons-svelte/lib/Close16/Close16.svelte generated by Svelte v3.32.1 */

function create_if_block$j(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$b(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$j(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$j(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$A(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$b(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Close16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Close16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$z($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Close16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$z, create_fragment$A, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/ListBox/ListBoxSelection.svelte generated by Svelte v3.32.1 */

function create_else_block$9(ctx) {
	let div;
	let t;
	let close16;
	let div_tabindex_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*selectionCount*/ ctx[1] !== undefined && create_if_block_1$3(ctx);
	close16 = new Close16({});

	let div_levels = [
		{ role: "button" },
		{ "aria-label": /*description*/ ctx[4] },
		{ title: /*description*/ ctx[4] },
		{
			tabindex: div_tabindex_value = /*disabled*/ ctx[2] ? "-1" : "0"
		},
		/*$$restProps*/ ctx[6]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			create_component(close16.$$.fragment);
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__selection", true);
			toggle_class(div, "bx--tag--filter", /*selectionCount*/ ctx[1]);
			toggle_class(div, "bx--list-box__selection--multi", /*selectionCount*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);
			mount_component(close16, div, null);
			/*div_binding*/ ctx[11](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", stop_propagation(prevent_default(/*click_handler_1*/ ctx[12]))),
					listen(div, "keydown", stop_propagation(/*keydown_handler_1*/ ctx[13]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*selectionCount*/ ctx[1] !== undefined) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$3(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "button" },
				(!current || dirty & /*description*/ 16) && { "aria-label": /*description*/ ctx[4] },
				(!current || dirty & /*description*/ 16) && { title: /*description*/ ctx[4] },
				(!current || dirty & /*disabled*/ 4 && div_tabindex_value !== (div_tabindex_value = /*disabled*/ ctx[2] ? "-1" : "0")) && { tabindex: div_tabindex_value },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(div, "bx--list-box__selection", true);
			toggle_class(div, "bx--tag--filter", /*selectionCount*/ ctx[1]);
			toggle_class(div, "bx--list-box__selection--multi", /*selectionCount*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(close16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			destroy_component(close16);
			/*div_binding*/ ctx[11](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (49:0) {#if selectionCount !== undefined}
function create_if_block$k(ctx) {
	let div1;
	let span;
	let t0;
	let t1;
	let div0;
	let close16;
	let div0_tabindex_value;
	let current;
	let mounted;
	let dispose;
	close16 = new Close16({});

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text(/*selectionCount*/ ctx[1]);
			t1 = space();
			div0 = element("div");
			create_component(close16.$$.fragment);
			attr(span, "title", /*selectionCount*/ ctx[1]);
			toggle_class(span, "bx--tag__label", true);
			attr(div0, "role", "button");
			attr(div0, "tabindex", div0_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0);
			attr(div0, "disabled", /*disabled*/ ctx[2]);
			attr(div0, "aria-label", /*translationIds*/ ctx[3].clearAll);
			attr(div0, "title", /*description*/ ctx[4]);
			toggle_class(div0, "bx--tag__close-icon", true);
			toggle_class(div1, "bx--tag", true);
			toggle_class(div1, "bx--tag--filter", true);
			toggle_class(div1, "bx--tag--high-contrast", true);
			toggle_class(div1, "bx--tag--disabled", /*disabled*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(div1, t1);
			append(div1, div0);
			mount_component(close16, div0, null);
			/*div0_binding*/ ctx[8](div0);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", stop_propagation(prevent_default(/*click_handler*/ ctx[9]))),
					listen(div0, "keydown", stop_propagation(/*keydown_handler*/ ctx[10]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*selectionCount*/ 2) set_data(t0, /*selectionCount*/ ctx[1]);

			if (!current || dirty & /*selectionCount*/ 2) {
				attr(span, "title", /*selectionCount*/ ctx[1]);
			}

			if (!current || dirty & /*disabled*/ 4 && div0_tabindex_value !== (div0_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0)) {
				attr(div0, "tabindex", div0_tabindex_value);
			}

			if (!current || dirty & /*disabled*/ 4) {
				attr(div0, "disabled", /*disabled*/ ctx[2]);
			}

			if (!current || dirty & /*description*/ 16) {
				attr(div0, "title", /*description*/ ctx[4]);
			}

			if (dirty & /*disabled*/ 4) {
				toggle_class(div1, "bx--tag--disabled", /*disabled*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(close16);
			/*div0_binding*/ ctx[8](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (103:4) {#if selectionCount !== undefined}
function create_if_block_1$3(ctx) {
	let t;

	return {
		c() {
			t = text(/*selectionCount*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*selectionCount*/ 2) set_data(t, /*selectionCount*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$B(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$k, create_else_block$9];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*selectionCount*/ ctx[1] !== undefined) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$A($$self, $$props, $$invalidate) {
	let description;
	const omit_props_names = ["selectionCount","disabled","translationIds","translateWithId","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { selectionCount = undefined } = $$props;
	let { disabled = false } = $$props;

	const translationIds = {
		clearAll: "clearAll",
		clearSelection: "clearSelection"
	};

	let { translateWithId = id => defaultTranslations[id] } = $$props;
	let { ref = null } = $$props;

	const defaultTranslations = {
		[translationIds.clearAll]: "Clear all selected items",
		[translationIds.clearSelection]: "Clear selected item"
	};

	const dispatch = createEventDispatcher();
	const ctx = getContext("MultiSelect");

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler = e => {
		if (!disabled) {
			dispatch("clear", e);
		}
	};

	const keydown_handler = e => {
		if (!disabled && e.key === "Enter") {
			dispatch("clear", e);
		}
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_1 = e => {
		if (!disabled) {
			dispatch("clear", e);
		}
	};

	const keydown_handler_1 = e => {
		if (!disabled && e.key === "Enter") {
			dispatch("clear", e);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("selectionCount" in $$new_props) $$invalidate(1, selectionCount = $$new_props.selectionCount);
		if ("disabled" in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ("translateWithId" in $$new_props) $$invalidate(7, translateWithId = $$new_props.translateWithId);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ref*/ 1) {
			 if (ctx && ref) {
				ctx.declareRef({ key: "selection", ref });
			}
		}

		if ($$self.$$.dirty & /*selectionCount, translateWithId*/ 130) {
			 $$invalidate(4, description = selectionCount
			? translateWithId("clearAll")
			: translateWithId("clearSelection"));
		}
	};

	return [
		ref,
		selectionCount,
		disabled,
		translationIds,
		description,
		dispatch,
		$$restProps,
		translateWithId,
		div0_binding,
		click_handler,
		keydown_handler,
		div_binding,
		click_handler_1,
		keydown_handler_1
	];
}

class ListBoxSelection extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$A, create_fragment$B, safe_not_equal, {
			selectionCount: 1,
			disabled: 2,
			translationIds: 3,
			translateWithId: 7,
			ref: 0
		});
	}

	get translationIds() {
		return this.$$.ctx[3];
	}
}

/* src/ComboBox/ComboBox.svelte generated by Svelte v3.32.1 */

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[51] = list[i];
	child_ctx[53] = i;
	return child_ctx;
}

// (164:2) {#if titleText}
function create_if_block_5(ctx) {
	let label;
	let t;

	return {
		c() {
			label = element("label");
			t = text(/*titleText*/ ctx[9]);
			attr(label, "for", /*id*/ ctx[18]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*titleText*/ 512) set_data(t, /*titleText*/ ctx[9]);

			if (dirty[0] & /*id*/ 262144) {
				attr(label, "for", /*id*/ ctx[18]);
			}

			if (dirty[0] & /*disabled*/ 256) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[8]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (255:6) {#if invalid}
function create_if_block_4$1(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (258:6) {#if !invalid && warn}
function create_if_block_3$1(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--list-box__invalid-icon bx--list-box__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (263:6) {#if inputValue}
function create_if_block_2$2(ctx) {
	let listboxselection;
	let current;

	listboxselection = new ListBoxSelection({
			props: {
				translateWithId: /*translateWithId*/ ctx[17],
				disabled: /*disabled*/ ctx[8],
				open: /*open*/ ctx[1]
			}
		});

	listboxselection.$on("clear", /*clear_handler*/ ctx[41]);
	listboxselection.$on("clear", /*clear_handler_1*/ ctx[42]);

	return {
		c() {
			create_component(listboxselection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxselection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxselection_changes = {};
			if (dirty[0] & /*translateWithId*/ 131072) listboxselection_changes.translateWithId = /*translateWithId*/ ctx[17];
			if (dirty[0] & /*disabled*/ 256) listboxselection_changes.disabled = /*disabled*/ ctx[8];
			if (dirty[0] & /*open*/ 2) listboxselection_changes.open = /*open*/ ctx[1];
			listboxselection.$set(listboxselection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxselection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxselection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxselection, detaching);
		}
	};
}

// (187:4) <ListBoxField       role="button"       aria-expanded="{open}"       on:click="{async () => {         if (disabled) return;         open = true;         await tick();         ref.focus();       }}"       id="{id}"       name="{name}"       disabled="{disabled}"       translateWithId="{translateWithId}"     >
function create_default_slot_3(ctx) {
	let input;
	let input_aria_controls_value;
	let input_aria_owns_value;
	let t0;
	let t1;
	let t2;
	let t3;
	let listboxmenuicon;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		{ tabindex: "0" },
		{ autocomplete: "off" },
		{ "aria-autocomplete": "list" },
		{ "aria-expanded": /*open*/ ctx[1] },
		{
			"aria-activedescendant": /*highlightedId*/ ctx[27]
		},
		{ "aria-labelledby": /*comboId*/ ctx[26] },
		{ "aria-disabled": /*disabled*/ ctx[8] },
		{
			"aria-controls": input_aria_controls_value = /*open*/ ctx[1] ? /*menuId*/ ctx[25] : undefined
		},
		{
			"aria-owns": input_aria_owns_value = /*open*/ ctx[1] ? /*menuId*/ ctx[25] : undefined
		},
		{ disabled: /*disabled*/ ctx[8] },
		{ placeholder: /*placeholder*/ ctx[10] },
		{ id: /*id*/ ctx[18] },
		{ value: /*inputValue*/ ctx[21] },
		/*$$restProps*/ ctx[29]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block0 = /*invalid*/ ctx[13] && create_if_block_4$1();
	let if_block1 = !/*invalid*/ ctx[13] && /*warn*/ ctx[14] && create_if_block_3$1();
	let if_block2 = /*inputValue*/ ctx[21] && create_if_block_2$2(ctx);

	listboxmenuicon = new ListBoxMenuIcon({
			props: {
				translateWithId: /*translateWithId*/ ctx[17],
				open: /*open*/ ctx[1]
			}
		});

	listboxmenuicon.$on("click", /*click_handler_1*/ ctx[43]);

	return {
		c() {
			input = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			create_component(listboxmenuicon.$$.fragment);
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[16]);
			toggle_class(input, "bx--text-input--empty", /*inputValue*/ ctx[21] === "");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			input.value = input_data.value;
			/*input_binding*/ ctx[37](input);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t3, anchor);
			mount_component(listboxmenuicon, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_handler*/ ctx[38]),
					listen(input, "keydown", /*keydown_handler*/ ctx[33]),
					listen(input, "keydown", stop_propagation(/*keydown_handler_1*/ ctx[39])),
					listen(input, "focus", /*focus_handler*/ ctx[34]),
					listen(input, "blur", /*blur_handler*/ ctx[35]),
					listen(input, "blur", /*blur_handler_1*/ ctx[40])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ tabindex: "0" },
				{ autocomplete: "off" },
				{ "aria-autocomplete": "list" },
				(!current || dirty[0] & /*open*/ 2) && { "aria-expanded": /*open*/ ctx[1] },
				(!current || dirty[0] & /*highlightedId*/ 134217728) && {
					"aria-activedescendant": /*highlightedId*/ ctx[27]
				},
				(!current || dirty[0] & /*comboId*/ 67108864) && { "aria-labelledby": /*comboId*/ ctx[26] },
				(!current || dirty[0] & /*disabled*/ 256) && { "aria-disabled": /*disabled*/ ctx[8] },
				(!current || dirty[0] & /*open, menuId*/ 33554434 && input_aria_controls_value !== (input_aria_controls_value = /*open*/ ctx[1] ? /*menuId*/ ctx[25] : undefined)) && {
					"aria-controls": input_aria_controls_value
				},
				(!current || dirty[0] & /*open, menuId*/ 33554434 && input_aria_owns_value !== (input_aria_owns_value = /*open*/ ctx[1] ? /*menuId*/ ctx[25] : undefined)) && { "aria-owns": input_aria_owns_value },
				(!current || dirty[0] & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] },
				(!current || dirty[0] & /*placeholder*/ 1024) && { placeholder: /*placeholder*/ ctx[10] },
				(!current || dirty[0] & /*id*/ 262144) && { id: /*id*/ ctx[18] },
				(!current || dirty[0] & /*inputValue*/ 2097152 && input.value !== /*inputValue*/ ctx[21]) && { value: /*inputValue*/ ctx[21] },
				dirty[0] & /*$$restProps*/ 536870912 && /*$$restProps*/ ctx[29]
			]));

			if ("value" in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[16]);
			toggle_class(input, "bx--text-input--empty", /*inputValue*/ ctx[21] === "");

			if (/*invalid*/ ctx[13]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 8192) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$1();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[13] && /*warn*/ ctx[14]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 24576) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$1();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*inputValue*/ ctx[21]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*inputValue*/ 2097152) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2$2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t3.parentNode, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			const listboxmenuicon_changes = {};
			if (dirty[0] & /*translateWithId*/ 131072) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[17];
			if (dirty[0] & /*open*/ 2) listboxmenuicon_changes.open = /*open*/ ctx[1];
			listboxmenuicon.$set(listboxmenuicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(listboxmenuicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(listboxmenuicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[37](null);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t3);
			destroy_component(listboxmenuicon, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (285:4) {#if open}
function create_if_block_1$4(ctx) {
	let listboxmenu;
	let updating_ref;
	let current;

	function listboxmenu_ref_binding(value) {
		/*listboxmenu_ref_binding*/ ctx[47].call(null, value);
	}

	let listboxmenu_props = {
		"aria-label": /*ariaLabel*/ ctx[24],
		id: /*id*/ ctx[18],
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*listRef*/ ctx[3] !== void 0) {
		listboxmenu_props.ref = /*listRef*/ ctx[3];
	}

	listboxmenu = new ListBoxMenu({ props: listboxmenu_props });
	binding_callbacks.push(() => bind(listboxmenu, "ref", listboxmenu_ref_binding));
	listboxmenu.$on("scroll", /*scroll_handler*/ ctx[48]);

	return {
		c() {
			create_component(listboxmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxmenu_changes = {};
			if (dirty[0] & /*ariaLabel*/ 16777216) listboxmenu_changes["aria-label"] = /*ariaLabel*/ ctx[24];
			if (dirty[0] & /*id*/ 262144) listboxmenu_changes.id = /*id*/ ctx[18];

			if (dirty[0] & /*filteredItems, selectedIndex, selectedId, highlightedIndex, items, open, itemToString*/ 13631539 | dirty[1] & /*$$scope*/ 8388608) {
				listboxmenu_changes.$$scope = { dirty, ctx };
			}

			if (!updating_ref && dirty[0] & /*listRef*/ 8) {
				updating_ref = true;
				listboxmenu_changes.ref = /*listRef*/ ctx[3];
				add_flush_callback(() => updating_ref = false);
			}

			listboxmenu.$set(listboxmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxmenu, detaching);
		}
	};
}

// (293:10) <ListBoxMenuItem             id="{item.id}"             active="{selectedIndex === i || selectedId === item.id}"             highlighted="{highlightedIndex === i || selectedIndex === i}"             on:click="{() => {               selectedIndex = items                 .map(({ id }) => id)                 .indexOf(filteredItems[i].id);               open = false;             }}"             on:mouseenter="{() => {               highlightedIndex = i;             }}"           >
function create_default_slot_2(ctx) {
	let t0_value = /*itemToString*/ ctx[5](/*item*/ ctx[51]) + "";
	let t0;
	let t1;

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*itemToString, filteredItems*/ 8388640 && t0_value !== (t0_value = /*itemToString*/ ctx[5](/*item*/ ctx[51]) + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (292:8) {#each filteredItems as item, i (item.id)}
function create_each_block$3(key_1, ctx) {
	let first;
	let listboxmenuitem;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[45](/*i*/ ctx[53]);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[46](/*i*/ ctx[53]);
	}

	listboxmenuitem = new ListBoxMenuItem({
			props: {
				id: /*item*/ ctx[51].id,
				active: /*selectedIndex*/ ctx[0] === /*i*/ ctx[53] || /*selectedId*/ ctx[20] === /*item*/ ctx[51].id,
				highlighted: /*highlightedIndex*/ ctx[22] === /*i*/ ctx[53] || /*selectedIndex*/ ctx[0] === /*i*/ ctx[53],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	listboxmenuitem.$on("click", click_handler_3);
	listboxmenuitem.$on("mouseenter", mouseenter_handler);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(listboxmenuitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(listboxmenuitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const listboxmenuitem_changes = {};
			if (dirty[0] & /*filteredItems*/ 8388608) listboxmenuitem_changes.id = /*item*/ ctx[51].id;
			if (dirty[0] & /*selectedIndex, filteredItems, selectedId*/ 9437185) listboxmenuitem_changes.active = /*selectedIndex*/ ctx[0] === /*i*/ ctx[53] || /*selectedId*/ ctx[20] === /*item*/ ctx[51].id;
			if (dirty[0] & /*highlightedIndex, filteredItems, selectedIndex*/ 12582913) listboxmenuitem_changes.highlighted = /*highlightedIndex*/ ctx[22] === /*i*/ ctx[53] || /*selectedIndex*/ ctx[0] === /*i*/ ctx[53];

			if (dirty[0] & /*itemToString, filteredItems*/ 8388640 | dirty[1] & /*$$scope*/ 8388608) {
				listboxmenuitem_changes.$$scope = { dirty, ctx };
			}

			listboxmenuitem.$set(listboxmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(listboxmenuitem, detaching);
		}
	};
}

// (286:6) <ListBoxMenu         aria-label="{ariaLabel}"         id="{id}"         on:scroll         bind:ref="{listRef}"       >
function create_default_slot_1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*filteredItems*/ ctx[23];
	const get_key = ctx => /*item*/ ctx[51].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$3(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filteredItems, selectedIndex, selectedId, highlightedIndex, items, open, itemToString*/ 13631539) {
				each_value = /*filteredItems*/ ctx[23];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$3, each_1_anchor, get_each_context$3);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (173:2) <ListBox     class="bx--combo-box {direction === 'top' &&       'bx--list-box--up'} {!invalid && warn && 'bx--combo-box--warning'}"     id="{comboId}"     aria-label="{ariaLabel}"     disabled="{disabled}"     invalid="{invalid}"     invalidText="{invalidText}"     open="{open}"     light="{light}"     size="{size}"     warn="{warn}"     warnText="{warnText}"   >
function create_default_slot$3(ctx) {
	let listboxfield;
	let t;
	let if_block_anchor;
	let current;

	listboxfield = new ListBoxField({
			props: {
				role: "button",
				"aria-expanded": /*open*/ ctx[1],
				id: /*id*/ ctx[18],
				name: /*name*/ ctx[19],
				disabled: /*disabled*/ ctx[8],
				translateWithId: /*translateWithId*/ ctx[17],
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	listboxfield.$on("click", /*click_handler_2*/ ctx[44]);
	let if_block = /*open*/ ctx[1] && create_if_block_1$4(ctx);

	return {
		c() {
			create_component(listboxfield.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(listboxfield, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxfield_changes = {};
			if (dirty[0] & /*open*/ 2) listboxfield_changes["aria-expanded"] = /*open*/ ctx[1];
			if (dirty[0] & /*id*/ 262144) listboxfield_changes.id = /*id*/ ctx[18];
			if (dirty[0] & /*name*/ 524288) listboxfield_changes.name = /*name*/ ctx[19];
			if (dirty[0] & /*disabled*/ 256) listboxfield_changes.disabled = /*disabled*/ ctx[8];
			if (dirty[0] & /*translateWithId*/ 131072) listboxfield_changes.translateWithId = /*translateWithId*/ ctx[17];

			if (dirty[0] & /*translateWithId, open, disabled, selectedIndex, ref, inputValue, invalid, warn, highlightedId, comboId, menuId, placeholder, id, $$restProps, light, highlightedIndex*/ 778528007 | dirty[1] & /*$$scope*/ 8388608) {
				listboxfield_changes.$$scope = { dirty, ctx };
			}

			listboxfield.$set(listboxfield_changes);

			if (/*open*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*open*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(listboxfield.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(listboxfield.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxfield, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (313:2) {#if !invalid && helperText && !warn}
function create_if_block$l(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 2048) set_data(t, /*helperText*/ ctx[11]);

			if (dirty[0] & /*disabled*/ 256) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[8]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$C(ctx) {
	let t0;
	let div;
	let t1;
	let listbox;
	let t2;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*titleText*/ ctx[9] && create_if_block_5(ctx);

	listbox = new ListBox({
			props: {
				class: "bx--combo-box " + (/*direction*/ ctx[6] === "top" && "bx--list-box--up") + " " + (!/*invalid*/ ctx[13] && /*warn*/ ctx[14] && "bx--combo-box--warning"),
				id: /*comboId*/ ctx[26],
				"aria-label": /*ariaLabel*/ ctx[24],
				disabled: /*disabled*/ ctx[8],
				invalid: /*invalid*/ ctx[13],
				invalidText: /*invalidText*/ ctx[12],
				open: /*open*/ ctx[1],
				light: /*light*/ ctx[16],
				size: /*size*/ ctx[7],
				warn: /*warn*/ ctx[14],
				warnText: /*warnText*/ ctx[15],
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			}
		});

	let if_block1 = !/*invalid*/ ctx[13] && /*helperText*/ ctx[11] && !/*warn*/ ctx[14] && create_if_block$l(ctx);

	return {
		c() {
			t0 = space();
			div = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			create_component(listbox.$$.fragment);
			t2 = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--list-box__wrapper", true);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t1);
			mount_component(listbox, div, null);
			append(div, t2);
			if (if_block1) if_block1.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(document.body, "click", /*click_handler*/ ctx[36]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*titleText*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			const listbox_changes = {};
			if (dirty[0] & /*direction, invalid, warn*/ 24640) listbox_changes.class = "bx--combo-box " + (/*direction*/ ctx[6] === "top" && "bx--list-box--up") + " " + (!/*invalid*/ ctx[13] && /*warn*/ ctx[14] && "bx--combo-box--warning");
			if (dirty[0] & /*comboId*/ 67108864) listbox_changes.id = /*comboId*/ ctx[26];
			if (dirty[0] & /*ariaLabel*/ 16777216) listbox_changes["aria-label"] = /*ariaLabel*/ ctx[24];
			if (dirty[0] & /*disabled*/ 256) listbox_changes.disabled = /*disabled*/ ctx[8];
			if (dirty[0] & /*invalid*/ 8192) listbox_changes.invalid = /*invalid*/ ctx[13];
			if (dirty[0] & /*invalidText*/ 4096) listbox_changes.invalidText = /*invalidText*/ ctx[12];
			if (dirty[0] & /*open*/ 2) listbox_changes.open = /*open*/ ctx[1];
			if (dirty[0] & /*light*/ 65536) listbox_changes.light = /*light*/ ctx[16];
			if (dirty[0] & /*size*/ 128) listbox_changes.size = /*size*/ ctx[7];
			if (dirty[0] & /*warn*/ 16384) listbox_changes.warn = /*warn*/ ctx[14];
			if (dirty[0] & /*warnText*/ 32768) listbox_changes.warnText = /*warnText*/ ctx[15];

			if (dirty[0] & /*ariaLabel, id, listRef, filteredItems, selectedIndex, selectedId, highlightedIndex, items, open, itemToString, name, disabled, translateWithId, ref, inputValue, invalid, warn, highlightedId, comboId, menuId, placeholder, $$restProps, light*/ 805266751 | dirty[1] & /*$$scope*/ 8388608) {
				listbox_changes.$$scope = { dirty, ctx };
			}

			listbox.$set(listbox_changes);

			if (!/*invalid*/ ctx[13] && /*helperText*/ ctx[11] && !/*warn*/ ctx[14]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$l(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(listbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			destroy_component(listbox);
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function instance$B($$self, $$props, $$invalidate) {
	let ariaLabel;
	let menuId;
	let comboId;
	let highlightedId;
	let filteredItems;
	let selectedItem;

	const omit_props_names = [
		"items","itemToString","selectedIndex","value","direction","size","disabled","titleText","placeholder","helperText","invalidText","invalid","warn","warnText","light","open","shouldFilterItem","translateWithId","id","name","ref","listRef"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { items = [] } = $$props;
	let { itemToString = item => item.text || item.id } = $$props;
	let { selectedIndex = -1 } = $$props;
	let { value = "" } = $$props;
	let { direction = "bottom" } = $$props;
	let { size = undefined } = $$props;
	let { disabled = false } = $$props;
	let { titleText = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { helperText = "" } = $$props;
	let { invalidText = "" } = $$props;
	let { invalid = false } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { light = false } = $$props;
	let { open = false } = $$props;
	let { shouldFilterItem = () => true } = $$props;
	let { translateWithId = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	let { listRef = null } = $$props;
	const dispatch = createEventDispatcher();
	let selectedId = undefined;
	let inputValue = "";
	let highlightedIndex = -1;

	function change(dir) {
		let index = highlightedIndex + dir;

		if (index < 0) {
			index = items.length - 1;
		} else if (index >= items.length) {
			index = 0;
		}

		$$invalidate(22, highlightedIndex = index);
	}

	afterUpdate(() => {
		if (open) {
			ref.focus();
			$$invalidate(23, filteredItems = items.filter(item => shouldFilterItem(item, value)));
		} else {
			$$invalidate(22, highlightedIndex = -1);
			$$invalidate(21, inputValue = selectedItem ? selectedItem.text : "");

			if (!selectedItem) {
				$$invalidate(20, selectedId = undefined);
				$$invalidate(0, selectedIndex = -1);
			}
		}
	});

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	const click_handler = ({ target }) => {
		if (open && ref && !ref.contains(target)) {
			$$invalidate(1, open = false);
		}
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(2, ref);
		});
	}

	const input_handler = ({ target }) => {
		$$invalidate(21, inputValue = target.value);
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === "Enter") {
			$$invalidate(1, open = !open);

			if (highlightedIndex > -1 && highlightedIndex !== selectedIndex) {
				$$invalidate(0, selectedIndex = highlightedIndex);
				$$invalidate(1, open = false);
			}
		} else if (key === "Tab") {
			$$invalidate(1, open = false);
		} else if (key === "ArrowDown") {
			change(1);
		} else if (key === "ArrowUp") {
			change(-1);
		} else if (key === "Escape") {
			$$invalidate(1, open = false);
		}
	};

	const blur_handler_1 = ({ relatedTarget }) => {
		if (!open || !relatedTarget) return;

		if (relatedTarget && !["INPUT", "SELECT", "TEXTAREA"].includes(relatedTarget.tagName) && relatedTarget.getAttribute("role") !== "button" && relatedTarget.getAttribute("role") !== "searchbox") {
			ref.focus();
		}
	};

	function clear_handler(event) {
		bubble($$self, event);
	}

	const clear_handler_1 = () => {
		$$invalidate(0, selectedIndex = -1);
		$$invalidate(1, open = false);
		ref.focus();
	};

	const click_handler_1 = e => {
		e.stopPropagation();
		$$invalidate(1, open = !open);
	};

	const click_handler_2 = async () => {
		if (disabled) return;
		$$invalidate(1, open = true);
		await tick();
		ref.focus();
	};

	const click_handler_3 = i => {
		$$invalidate(0, selectedIndex = items.map(({ id }) => id).indexOf(filteredItems[i].id));
		$$invalidate(1, open = false);
	};

	const mouseenter_handler = i => {
		$$invalidate(22, highlightedIndex = i);
	};

	function listboxmenu_ref_binding(value) {
		listRef = value;
		$$invalidate(3, listRef);
	}

	function scroll_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(50, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(29, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("items" in $$new_props) $$invalidate(4, items = $$new_props.items);
		if ("itemToString" in $$new_props) $$invalidate(5, itemToString = $$new_props.itemToString);
		if ("selectedIndex" in $$new_props) $$invalidate(0, selectedIndex = $$new_props.selectedIndex);
		if ("value" in $$new_props) $$invalidate(30, value = $$new_props.value);
		if ("direction" in $$new_props) $$invalidate(6, direction = $$new_props.direction);
		if ("size" in $$new_props) $$invalidate(7, size = $$new_props.size);
		if ("disabled" in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
		if ("titleText" in $$new_props) $$invalidate(9, titleText = $$new_props.titleText);
		if ("placeholder" in $$new_props) $$invalidate(10, placeholder = $$new_props.placeholder);
		if ("helperText" in $$new_props) $$invalidate(11, helperText = $$new_props.helperText);
		if ("invalidText" in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ("invalid" in $$new_props) $$invalidate(13, invalid = $$new_props.invalid);
		if ("warn" in $$new_props) $$invalidate(14, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(15, warnText = $$new_props.warnText);
		if ("light" in $$new_props) $$invalidate(16, light = $$new_props.light);
		if ("open" in $$new_props) $$invalidate(1, open = $$new_props.open);
		if ("shouldFilterItem" in $$new_props) $$invalidate(31, shouldFilterItem = $$new_props.shouldFilterItem);
		if ("translateWithId" in $$new_props) $$invalidate(17, translateWithId = $$new_props.translateWithId);
		if ("id" in $$new_props) $$invalidate(18, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(19, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(2, ref = $$new_props.ref);
		if ("listRef" in $$new_props) $$invalidate(3, listRef = $$new_props.listRef);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*items, selectedIndex*/ 17) {
			 $$invalidate(32, selectedItem = items[selectedIndex]);
		}

		if ($$self.$$.dirty[0] & /*selectedIndex, items, selectedId*/ 1048593 | $$self.$$.dirty[1] & /*selectedItem*/ 2) {
			 if (selectedIndex > -1) {
				$$invalidate(20, selectedId = items[selectedIndex].id);
				dispatch("select", { selectedId, selectedIndex, selectedItem });
			}
		}

		 $$invalidate(24, ariaLabel = $$props["aria-label"] || "Choose an item");

		if ($$self.$$.dirty[0] & /*id*/ 262144) {
			 $$invalidate(25, menuId = `menu-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 262144) {
			 $$invalidate(26, comboId = `combo-${id}`);
		}

		if ($$self.$$.dirty[0] & /*items, highlightedIndex*/ 4194320) {
			 $$invalidate(27, highlightedId = items[highlightedIndex]
			? items[highlightedIndex].id
			: undefined);
		}

		if ($$self.$$.dirty[1] & /*selectedItem*/ 2) {
			 $$invalidate(21, inputValue = selectedItem ? selectedItem.text : undefined);
		}

		if ($$self.$$.dirty[0] & /*inputValue*/ 2097152) {
			 $$invalidate(30, value = inputValue);
		}

		if ($$self.$$.dirty[0] & /*items, value*/ 1073741840 | $$self.$$.dirty[1] & /*shouldFilterItem*/ 1) {
			 $$invalidate(23, filteredItems = items.filter(item => shouldFilterItem(item, value)));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		selectedIndex,
		open,
		ref,
		listRef,
		items,
		itemToString,
		direction,
		size,
		disabled,
		titleText,
		placeholder,
		helperText,
		invalidText,
		invalid,
		warn,
		warnText,
		light,
		translateWithId,
		id,
		name,
		selectedId,
		inputValue,
		highlightedIndex,
		filteredItems,
		ariaLabel,
		menuId,
		comboId,
		highlightedId,
		change,
		$$restProps,
		value,
		shouldFilterItem,
		selectedItem,
		keydown_handler,
		focus_handler,
		blur_handler,
		click_handler,
		input_binding,
		input_handler,
		keydown_handler_1,
		blur_handler_1,
		clear_handler,
		clear_handler_1,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		mouseenter_handler,
		listboxmenu_ref_binding,
		scroll_handler
	];
}

class ComboBox extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$B,
			create_fragment$C,
			safe_not_equal,
			{
				items: 4,
				itemToString: 5,
				selectedIndex: 0,
				value: 30,
				direction: 6,
				size: 7,
				disabled: 8,
				titleText: 9,
				placeholder: 10,
				helperText: 11,
				invalidText: 12,
				invalid: 13,
				warn: 14,
				warnText: 15,
				light: 16,
				open: 1,
				shouldFilterItem: 31,
				translateWithId: 17,
				id: 18,
				name: 19,
				ref: 2,
				listRef: 3
			},
			[-1, -1]
		);
	}
}

/* src/ComposedModal/ComposedModal.svelte generated by Svelte v3.32.1 */

function create_fragment$D(ctx) {
	let div1;
	let div0;
	let div0_aria_label_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	let div1_levels = [{ role: "presentation" }, /*$$restProps*/ ctx[13]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "role", "dialog");
			attr(div0, "aria-modal", "true");
			attr(div0, "aria-label", div0_aria_label_value = /*$$props*/ ctx[14]["aria-label"] || /*$label*/ ctx[9] || undefined);
			attr(div0, "class", /*containerClass*/ ctx[5]);
			toggle_class(div0, "bx--modal-container", true);
			toggle_class(div0, "bx--modal-container--xs", /*size*/ ctx[2] === "xs");
			toggle_class(div0, "bx--modal-container--sm", /*size*/ ctx[2] === "sm");
			toggle_class(div0, "bx--modal-container--lg", /*size*/ ctx[2] === "lg");
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--modal", true);
			toggle_class(div1, "is-visible", /*open*/ ctx[0]);
			toggle_class(div1, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[22](div0);
			/*div1_binding*/ ctx[24](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*click_handler_1*/ ctx[23]),
					listen(div1, "click", /*click_handler*/ ctx[18]),
					listen(div1, "click", /*click_handler_2*/ ctx[25]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[19]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[20]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[21]),
					listen(div1, "transitionend", /*transitionend_handler*/ ctx[26])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			if (!current || dirty & /*$$props, $label*/ 16896 && div0_aria_label_value !== (div0_aria_label_value = /*$$props*/ ctx[14]["aria-label"] || /*$label*/ ctx[9] || undefined)) {
				attr(div0, "aria-label", div0_aria_label_value);
			}

			if (!current || dirty & /*containerClass*/ 32) {
				attr(div0, "class", /*containerClass*/ ctx[5]);
			}

			if (dirty & /*containerClass*/ 32) {
				toggle_class(div0, "bx--modal-container", true);
			}

			if (dirty & /*containerClass, size*/ 36) {
				toggle_class(div0, "bx--modal-container--xs", /*size*/ ctx[2] === "xs");
			}

			if (dirty & /*containerClass, size*/ 36) {
				toggle_class(div0, "bx--modal-container--sm", /*size*/ ctx[2] === "sm");
			}

			if (dirty & /*containerClass, size*/ 36) {
				toggle_class(div0, "bx--modal-container--lg", /*size*/ ctx[2] === "lg");
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				{ role: "presentation" },
				dirty & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]
			]));

			toggle_class(div1, "bx--modal", true);
			toggle_class(div1, "is-visible", /*open*/ ctx[0]);
			toggle_class(div1, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div0_binding*/ ctx[22](null);
			/*div1_binding*/ ctx[24](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$C($$self, $$props, $$invalidate) {
	let didOpen;

	const omit_props_names = [
		"size","open","danger","preventCloseOnClickOutside","containerClass","selectorPrimaryFocus","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $label;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { open = false } = $$props;
	let { danger = false } = $$props;
	let { preventCloseOnClickOutside = false } = $$props;
	let { containerClass = "" } = $$props;
	let { selectorPrimaryFocus = "[data-modal-primary-focus]" } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	const label = writable(undefined);
	component_subscribe($$self, label, value => $$invalidate(9, $label = value));
	let buttonRef = null;
	let innerModal = null;
	let didClickInnerModal = false;

	setContext("ComposedModal", {
		closeModal: () => {
			$$invalidate(0, open = false);
		},
		submit: () => {
			dispatch("submit");
		},
		declareRef: ref => {
			buttonRef = ref;
		},
		updateLabel: value => {
			label.set(value);
		}
	});

	function focus(element) {
		if (selectorPrimaryFocus == null) return;
		const node = (element || innerModal).querySelector(selectorPrimaryFocus) || buttonRef;
		if (node != null) node.focus();
	}

	let opened = false;

	onMount(async () => {
		await tick();
		focus();
	});

	onDestroy(() => {
		document.body.classList.remove("bx--body--with-modal-open");
	});

	afterUpdate(() => {
		if (opened) {
			if (!open) {
				opened = false;
				dispatch("close");
				document.body.classList.remove("bx--body--with-modal-open");
			}
		} else if (open) {
			opened = true;
			dispatch("open");
			document.body.classList.add("bx--body--with-modal-open");
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			innerModal = $$value;
			$$invalidate(6, innerModal);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(7, didClickInnerModal = true);
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_2 = () => {
		if (!didClickInnerModal && !preventCloseOnClickOutside) $$invalidate(0, open = false);
		$$invalidate(7, didClickInnerModal = false);
	};

	const transitionend_handler = ({ propertyName, currentTarget }) => {
		if (propertyName === "transform") {
			dispatch("transitionend", { open });
		}

		if (didOpen) {
			focus(currentTarget);
			$$invalidate(8, didOpen = false);
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(14, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(13, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("danger" in $$new_props) $$invalidate(3, danger = $$new_props.danger);
		if ("preventCloseOnClickOutside" in $$new_props) $$invalidate(4, preventCloseOnClickOutside = $$new_props.preventCloseOnClickOutside);
		if ("containerClass" in $$new_props) $$invalidate(5, containerClass = $$new_props.containerClass);
		if ("selectorPrimaryFocus" in $$new_props) $$invalidate(15, selectorPrimaryFocus = $$new_props.selectorPrimaryFocus);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open*/ 1) {
			 $$invalidate(8, didOpen = open);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		ref,
		size,
		danger,
		preventCloseOnClickOutside,
		containerClass,
		innerModal,
		didClickInnerModal,
		didOpen,
		$label,
		dispatch,
		label,
		focus,
		$$restProps,
		$$props,
		selectorPrimaryFocus,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		div0_binding,
		click_handler_1,
		div1_binding,
		click_handler_2,
		transitionend_handler
	];
}

class ComposedModal extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$C, create_fragment$D, safe_not_equal, {
			size: 2,
			open: 0,
			danger: 3,
			preventCloseOnClickOutside: 4,
			containerClass: 5,
			selectorPrimaryFocus: 15,
			ref: 1
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/Close20/Close20.svelte generated by Svelte v3.32.1 */

function create_if_block$m(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$c(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$m(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$m(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$E(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$c(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Close20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Close20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$D($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Close20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$D, create_fragment$E, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/ComposedModal/ModalHeader.svelte generated by Svelte v3.32.1 */

function create_if_block_1$5(ctx) {
	let h2;
	let t;

	return {
		c() {
			h2 = element("h2");
			t = text(/*label*/ ctx[1]);
			attr(h2, "class", /*labelClass*/ ctx[2]);
			toggle_class(h2, "bx--modal-header__label", true);
			toggle_class(h2, "bx--type-delta", true);
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data(t, /*label*/ ctx[1]);

			if (dirty & /*labelClass*/ 4) {
				attr(h2, "class", /*labelClass*/ ctx[2]);
			}

			if (dirty & /*labelClass*/ 4) {
				toggle_class(h2, "bx--modal-header__label", true);
			}

			if (dirty & /*labelClass*/ 4) {
				toggle_class(h2, "bx--type-delta", true);
			}
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (41:2) {#if title}
function create_if_block$n(ctx) {
	let h3;
	let t;

	return {
		c() {
			h3 = element("h3");
			t = text(/*title*/ ctx[0]);
			attr(h3, "class", /*titleClass*/ ctx[3]);
			toggle_class(h3, "bx--modal-header__heading", true);
			toggle_class(h3, "bx--type-beta", true);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data(t, /*title*/ ctx[0]);

			if (dirty & /*titleClass*/ 8) {
				attr(h3, "class", /*titleClass*/ ctx[3]);
			}

			if (dirty & /*titleClass*/ 8) {
				toggle_class(h3, "bx--modal-header__heading", true);
			}

			if (dirty & /*titleClass*/ 8) {
				toggle_class(h3, "bx--type-beta", true);
			}
		},
		d(detaching) {
			if (detaching) detach(h3);
		}
	};
}

function create_fragment$F(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let button;
	let close20;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*label*/ ctx[1] && create_if_block_1$5(ctx);
	let if_block1 = /*title*/ ctx[0] && create_if_block$n(ctx);
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	close20 = new Close20({
			props: {
				class: "bx--modal-close__icon " + /*closeIconClass*/ ctx[5]
			}
		});

	let div_levels = [/*$$restProps*/ ctx[8]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
			t2 = space();
			button = element("button");
			create_component(close20.$$.fragment);
			attr(button, "type", "button");
			attr(button, "title", /*iconDescription*/ ctx[6]);
			attr(button, "aria-label", /*iconDescription*/ ctx[6]);
			attr(button, "class", /*closeClass*/ ctx[4]);
			toggle_class(button, "bx--modal-close", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--modal-header", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(div, t2);
			append(div, button);
			mount_component(close20, button, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[11]),
					listen(button, "click", /*closeModal*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*label*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$5(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*title*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$n(ctx);
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			const close20_changes = {};
			if (dirty & /*closeIconClass*/ 32) close20_changes.class = "bx--modal-close__icon " + /*closeIconClass*/ ctx[5];
			close20.$set(close20_changes);

			if (!current || dirty & /*iconDescription*/ 64) {
				attr(button, "title", /*iconDescription*/ ctx[6]);
			}

			if (!current || dirty & /*iconDescription*/ 64) {
				attr(button, "aria-label", /*iconDescription*/ ctx[6]);
			}

			if (!current || dirty & /*closeClass*/ 16) {
				attr(button, "class", /*closeClass*/ ctx[4]);
			}

			if (dirty & /*closeClass*/ 16) {
				toggle_class(button, "bx--modal-close", true);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]]));
			toggle_class(div, "bx--modal-header", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(close20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(close20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
			destroy_component(close20);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$E($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"title","label","labelClass","titleClass","closeClass","closeIconClass","iconDescription"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = "" } = $$props;
	let { label = "" } = $$props;
	let { labelClass = "" } = $$props;
	let { titleClass = "" } = $$props;
	let { closeClass = "" } = $$props;
	let { closeIconClass = "" } = $$props;
	let { iconDescription = "Close" } = $$props;
	const { closeModal, updateLabel } = getContext("ComposedModal");

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("title" in $$new_props) $$invalidate(0, title = $$new_props.title);
		if ("label" in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ("labelClass" in $$new_props) $$invalidate(2, labelClass = $$new_props.labelClass);
		if ("titleClass" in $$new_props) $$invalidate(3, titleClass = $$new_props.titleClass);
		if ("closeClass" in $$new_props) $$invalidate(4, closeClass = $$new_props.closeClass);
		if ("closeIconClass" in $$new_props) $$invalidate(5, closeIconClass = $$new_props.closeIconClass);
		if ("iconDescription" in $$new_props) $$invalidate(6, iconDescription = $$new_props.iconDescription);
		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*label*/ 2) {
			 updateLabel(label);
		}
	};

	return [
		title,
		label,
		labelClass,
		titleClass,
		closeClass,
		closeIconClass,
		iconDescription,
		closeModal,
		$$restProps,
		$$scope,
		slots,
		click_handler
	];
}

class ModalHeader extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$E, create_fragment$F, safe_not_equal, {
			title: 0,
			label: 1,
			labelClass: 2,
			titleClass: 3,
			closeClass: 4,
			closeIconClass: 5,
			iconDescription: 6
		});
	}
}

/* src/ComposedModal/ModalBody.svelte generated by Svelte v3.32.1 */

function create_if_block$o(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			toggle_class(div, "bx--modal-content--overflow-indicator", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$G(ctx) {
	let div;
	let div_tabindex_value;
	let div_role_value;
	let t;
	let if_block_anchor;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let div_levels = [
		{
			tabindex: div_tabindex_value = /*hasScrollingContent*/ ctx[1] ? "0" : undefined
		},
		{
			role: div_role_value = /*hasScrollingContent*/ ctx[1] ? "region" : undefined
		},
		/*$$restProps*/ ctx[2]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	let if_block = /*hasScrollingContent*/ ctx[1] && create_if_block$o();

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			set_attributes(div, div_data);
			toggle_class(div, "bx--modal-content", true);
			toggle_class(div, "bx--modal-content--with-form", /*hasForm*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*hasScrollingContent*/ 2 && div_tabindex_value !== (div_tabindex_value = /*hasScrollingContent*/ ctx[1] ? "0" : undefined)) && { tabindex: div_tabindex_value },
				(!current || dirty & /*hasScrollingContent*/ 2 && div_role_value !== (div_role_value = /*hasScrollingContent*/ ctx[1] ? "region" : undefined)) && { role: div_role_value },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(div, "bx--modal-content", true);
			toggle_class(div, "bx--modal-content--with-form", /*hasForm*/ ctx[0]);

			if (/*hasScrollingContent*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$o();
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$F($$self, $$props, $$invalidate) {
	const omit_props_names = ["hasForm","hasScrollingContent"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { hasForm = false } = $$props;
	let { hasScrollingContent = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("hasForm" in $$new_props) $$invalidate(0, hasForm = $$new_props.hasForm);
		if ("hasScrollingContent" in $$new_props) $$invalidate(1, hasScrollingContent = $$new_props.hasScrollingContent);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [hasForm, hasScrollingContent, $$restProps, $$scope, slots];
}

class ModalBody extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$F, create_fragment$G, safe_not_equal, { hasForm: 0, hasScrollingContent: 1 });
	}
}

/* src/ComposedModal/ModalFooter.svelte generated by Svelte v3.32.1 */

function create_if_block_1$6(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				kind: "secondary",
				class: /*secondaryClass*/ ctx[4],
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*closeModal*/ ctx[6]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*secondaryClass*/ 16) button_changes.class = /*secondaryClass*/ ctx[4];

			if (dirty & /*$$scope, secondaryButtonText*/ 1032) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (34:4) <Button kind="secondary" class="{secondaryClass}" on:click="{closeModal}">
function create_default_slot_1$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*secondaryButtonText*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*secondaryButtonText*/ 8) set_data(t, /*secondaryButtonText*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (38:2) {#if primaryButtonText}
function create_if_block$p(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				kind: /*danger*/ ctx[5] ? "danger" : "primary",
				disabled: /*primaryButtonDisabled*/ ctx[1],
				class: /*primaryClass*/ ctx[2],
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*submit*/ ctx[7]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*danger*/ 32) button_changes.kind = /*danger*/ ctx[5] ? "danger" : "primary";
			if (dirty & /*primaryButtonDisabled*/ 2) button_changes.disabled = /*primaryButtonDisabled*/ ctx[1];
			if (dirty & /*primaryClass*/ 4) button_changes.class = /*primaryClass*/ ctx[2];

			if (dirty & /*$$scope, primaryButtonText*/ 1025) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (39:4) <Button       kind="{danger ? 'danger' : 'primary'}"       disabled="{primaryButtonDisabled}"       class="{primaryClass}"       on:click="{submit}"     >
function create_default_slot$4(ctx) {
	let t;

	return {
		c() {
			t = text(/*primaryButtonText*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*primaryButtonText*/ 1) set_data(t, /*primaryButtonText*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$H(ctx) {
	let div;
	let t0;
	let t1;
	let current;
	let if_block0 = /*secondaryButtonText*/ ctx[3] && create_if_block_1$6(ctx);
	let if_block1 = /*primaryButtonText*/ ctx[0] && create_if_block$p(ctx);
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	let div_levels = [/*$$restProps*/ ctx[8]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--modal-footer", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*secondaryButtonText*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*secondaryButtonText*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$6(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*primaryButtonText*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*primaryButtonText*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$p(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]]));
			toggle_class(div, "bx--modal-footer", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$G($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"primaryButtonText","primaryButtonDisabled","primaryClass","secondaryButtonText","secondaryClass","danger"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { primaryButtonText = "" } = $$props;
	let { primaryButtonDisabled = false } = $$props;
	let { primaryClass = undefined } = $$props;
	let { secondaryButtonText = "" } = $$props;
	let { secondaryClass = undefined } = $$props;
	let { danger = false } = $$props;
	const { closeModal, submit } = getContext("ComposedModal");

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("primaryButtonText" in $$new_props) $$invalidate(0, primaryButtonText = $$new_props.primaryButtonText);
		if ("primaryButtonDisabled" in $$new_props) $$invalidate(1, primaryButtonDisabled = $$new_props.primaryButtonDisabled);
		if ("primaryClass" in $$new_props) $$invalidate(2, primaryClass = $$new_props.primaryClass);
		if ("secondaryButtonText" in $$new_props) $$invalidate(3, secondaryButtonText = $$new_props.secondaryButtonText);
		if ("secondaryClass" in $$new_props) $$invalidate(4, secondaryClass = $$new_props.secondaryClass);
		if ("danger" in $$new_props) $$invalidate(5, danger = $$new_props.danger);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	return [
		primaryButtonText,
		primaryButtonDisabled,
		primaryClass,
		secondaryButtonText,
		secondaryClass,
		danger,
		closeModal,
		submit,
		$$restProps,
		slots,
		$$scope
	];
}

class ModalFooter extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$G, create_fragment$H, safe_not_equal, {
			primaryButtonText: 0,
			primaryButtonDisabled: 1,
			primaryClass: 2,
			secondaryButtonText: 3,
			secondaryClass: 4,
			danger: 5
		});
	}
}

/* src/CodeSnippet/CodeSnippetSkeleton.svelte generated by Svelte v3.32.1 */

function create_if_block_1$7(ctx) {
	let span0;
	let t0;
	let span1;
	let t1;
	let span2;

	return {
		c() {
			span0 = element("span");
			t0 = space();
			span1 = element("span");
			t1 = space();
			span2 = element("span");
		},
		m(target, anchor) {
			insert(target, span0, anchor);
			insert(target, t0, anchor);
			insert(target, span1, anchor);
			insert(target, t1, anchor);
			insert(target, span2, anchor);
		},
		d(detaching) {
			if (detaching) detach(span0);
			if (detaching) detach(t0);
			if (detaching) detach(span1);
			if (detaching) detach(t1);
			if (detaching) detach(span2);
		}
	};
}

// (21:4) {#if type === "single"}
function create_if_block$q(ctx) {
	let span;

	return {
		c() {
			span = element("span");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$I(ctx) {
	let div1;
	let div0;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[0] === "single") return create_if_block$q;
		if (/*type*/ ctx[0] === "multi") return create_if_block_1$7;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (if_block) if_block.c();
			toggle_class(div0, "bx--snippet-container", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--snippet", true);
			toggle_class(div1, "bx--snippet--single", /*type*/ ctx[0] === "single");
			toggle_class(div1, "bx--snippet--multi", /*type*/ ctx[0] === "multi");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if (if_block) if_block.m(div0, null);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--snippet", true);
			toggle_class(div1, "bx--snippet--single", /*type*/ ctx[0] === "single");
			toggle_class(div1, "bx--snippet--multi", /*type*/ ctx[0] === "multi");
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$H($$self, $$props, $$invalidate) {
	const omit_props_names = ["type"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { type = "single" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("type" in $$new_props) $$invalidate(0, type = $$new_props.type);
	};

	return [
		type,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class CodeSnippetSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$H, create_fragment$I, safe_not_equal, { type: 0 });
	}
}

/* src/CodeSnippet/CodeSnippet.svelte generated by Svelte v3.32.1 */

function create_else_block_1(ctx) {
	let div1;
	let div0;
	let code_1;
	let pre;
	let div0_role_value;
	let div0_tabindex_value;
	let div0_aria_label_value;
	let t0;
	let t1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[35], null);
	const default_slot_or_fallback = default_slot || fallback_block_2$1(ctx);
	let if_block0 = !/*hideCopyButton*/ ctx[5] && create_if_block_4$2(ctx);
	let if_block1 = /*showMoreLess*/ ctx[2] && create_if_block_3$2(ctx);
	let div1_levels = [/*$$restProps*/ ctx[16]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			code_1 = element("code");
			pre = element("pre");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			attr(div0, "role", div0_role_value = /*type*/ ctx[3] === "single" ? "textbox" : undefined);

			attr(div0, "tabindex", div0_tabindex_value = /*type*/ ctx[3] === "single" && !/*disabled*/ ctx[6]
			? "0"
			: undefined);

			attr(div0, "aria-label", div0_aria_label_value = /*$$restProps*/ ctx[16]["aria-label"] || /*copyLabel*/ ctx[11] || "code-snippet");
			toggle_class(div0, "bx--snippet-container", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--snippet", true);
			toggle_class(div1, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(div1, "bx--snippet--light", /*light*/ ctx[8]);
			toggle_class(div1, "bx--snippet--no-copy", /*hideCopyButton*/ ctx[5]);
			toggle_class(div1, "bx--snippet--wraptext", /*wrapText*/ ctx[7]);
			toggle_class(div1, "bx--snippet--single", /*type*/ ctx[3] === "single");
			toggle_class(div1, "bx--snippet--inline", /*type*/ ctx[3] === "inline");
			toggle_class(div1, "bx--snippet--multi", /*type*/ ctx[3] === "multi");
			toggle_class(div1, "bx--snippet--disabled", /*type*/ ctx[3] !== "inline" && /*disabled*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, code_1);
			append(code_1, pre);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(pre, null);
			}

			/*pre_binding*/ ctx[31](pre);
			append(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "mouseover", /*mouseover_handler_2*/ ctx[20]),
					listen(div1, "mouseenter", /*mouseenter_handler_2*/ ctx[21]),
					listen(div1, "mouseleave", /*mouseleave_handler_2*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[1] & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[35], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty[0] & /*code*/ 16) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*type*/ 8 && div0_role_value !== (div0_role_value = /*type*/ ctx[3] === "single" ? "textbox" : undefined)) {
				attr(div0, "role", div0_role_value);
			}

			if (!current || dirty[0] & /*type, disabled*/ 72 && div0_tabindex_value !== (div0_tabindex_value = /*type*/ ctx[3] === "single" && !/*disabled*/ ctx[6]
			? "0"
			: undefined)) {
				attr(div0, "tabindex", div0_tabindex_value);
			}

			if (!current || dirty[0] & /*$$restProps, copyLabel*/ 67584 && div0_aria_label_value !== (div0_aria_label_value = /*$$restProps*/ ctx[16]["aria-label"] || /*copyLabel*/ ctx[11] || "code-snippet")) {
				attr(div0, "aria-label", div0_aria_label_value);
			}

			if (!/*hideCopyButton*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*hideCopyButton*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*showMoreLess*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*showMoreLess*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty[0] & /*$$restProps*/ 65536 && /*$$restProps*/ ctx[16]]));
			toggle_class(div1, "bx--snippet", true);
			toggle_class(div1, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(div1, "bx--snippet--light", /*light*/ ctx[8]);
			toggle_class(div1, "bx--snippet--no-copy", /*hideCopyButton*/ ctx[5]);
			toggle_class(div1, "bx--snippet--wraptext", /*wrapText*/ ctx[7]);
			toggle_class(div1, "bx--snippet--single", /*type*/ ctx[3] === "single");
			toggle_class(div1, "bx--snippet--inline", /*type*/ ctx[3] === "inline");
			toggle_class(div1, "bx--snippet--multi", /*type*/ ctx[3] === "multi");
			toggle_class(div1, "bx--snippet--disabled", /*type*/ ctx[3] !== "inline" && /*disabled*/ ctx[6]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*pre_binding*/ ctx[31](null);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (106:28) 
function create_if_block_1$8(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_2$3, create_else_block$a];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*hideCopyButton*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (97:0) {#if skeleton}
function create_if_block$r(ctx) {
	let codesnippetskeleton;
	let current;
	const codesnippetskeleton_spread_levels = [{ type: /*type*/ ctx[3] }, /*$$restProps*/ ctx[16]];
	let codesnippetskeleton_props = {};

	for (let i = 0; i < codesnippetskeleton_spread_levels.length; i += 1) {
		codesnippetskeleton_props = assign(codesnippetskeleton_props, codesnippetskeleton_spread_levels[i]);
	}

	codesnippetskeleton = new CodeSnippetSkeleton({ props: codesnippetskeleton_props });
	codesnippetskeleton.$on("click", /*click_handler*/ ctx[23]);
	codesnippetskeleton.$on("mouseover", /*mouseover_handler*/ ctx[24]);
	codesnippetskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[25]);
	codesnippetskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[26]);

	return {
		c() {
			create_component(codesnippetskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(codesnippetskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const codesnippetskeleton_changes = (dirty[0] & /*type, $$restProps*/ 65544)
			? get_spread_update(codesnippetskeleton_spread_levels, [
					dirty[0] & /*type*/ 8 && { type: /*type*/ ctx[3] },
					dirty[0] & /*$$restProps*/ 65536 && get_spread_object(/*$$restProps*/ ctx[16])
				])
			: {};

			codesnippetskeleton.$set(codesnippetskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(codesnippetskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(codesnippetskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(codesnippetskeleton, detaching);
		}
	};
}

// (174:18) {code}
function fallback_block_2$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*code*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*code*/ 16) set_data(t, /*code*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (178:4) {#if !hideCopyButton}
function create_if_block_4$2(ctx) {
	let copybutton;
	let current;

	copybutton = new CopyButton({
			props: {
				disabled: /*disabled*/ ctx[6],
				feedback: /*feedback*/ ctx[12],
				feedbackTimeout: /*feedbackTimeout*/ ctx[13],
				iconDescription: /*copyButtonDescription*/ ctx[10]
			}
		});

	copybutton.$on("click", /*click_handler_2*/ ctx[32]);
	copybutton.$on("animationend", /*animationend_handler*/ ctx[33]);

	return {
		c() {
			create_component(copybutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(copybutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const copybutton_changes = {};
			if (dirty[0] & /*disabled*/ 64) copybutton_changes.disabled = /*disabled*/ ctx[6];
			if (dirty[0] & /*feedback*/ 4096) copybutton_changes.feedback = /*feedback*/ ctx[12];
			if (dirty[0] & /*feedbackTimeout*/ 8192) copybutton_changes.feedbackTimeout = /*feedbackTimeout*/ ctx[13];
			if (dirty[0] & /*copyButtonDescription*/ 1024) copybutton_changes.iconDescription = /*copyButtonDescription*/ ctx[10];
			copybutton.$set(copybutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(copybutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(copybutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(copybutton, detaching);
		}
	};
}

// (188:4) {#if showMoreLess}
function create_if_block_3$2(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				kind: "ghost",
				size: "field",
				class: "bx--snippet-btn--expand",
				disabled: /*disabled*/ ctx[6],
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler_3*/ ctx[34]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty[0] & /*disabled*/ 64) button_changes.disabled = /*disabled*/ ctx[6];

			if (dirty[0] & /*expandText*/ 32768 | dirty[1] & /*$$scope*/ 16) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (189:6) <Button         kind="ghost"         size="field"         class="bx--snippet-btn--expand"         disabled="{disabled}"         on:click="{() => {           expanded = !expanded;         }}"       >
function create_default_slot_1$2(ctx) {
	let span;
	let t0;
	let t1;
	let chevrondown16;
	let current;

	chevrondown16 = new ChevronDown16({
			props: {
				class: "bx--icon-chevron--down bx--snippet__icon",
				"aria-label": /*expandText*/ ctx[15]
			}
		});

	return {
		c() {
			span = element("span");
			t0 = text(/*expandText*/ ctx[15]);
			t1 = space();
			create_component(chevrondown16.$$.fragment);
			toggle_class(span, "bx--snippet-btn--text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			insert(target, t1, anchor);
			mount_component(chevrondown16, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*expandText*/ 32768) set_data(t0, /*expandText*/ ctx[15]);
			const chevrondown16_changes = {};
			if (dirty[0] & /*expandText*/ 32768) chevrondown16_changes["aria-label"] = /*expandText*/ ctx[15];
			chevrondown16.$set(chevrondown16_changes);
		},
		i(local) {
			if (current) return;
			transition_in(chevrondown16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevrondown16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t1);
			destroy_component(chevrondown16, detaching);
		}
	};
}

// (123:2) {:else}
function create_else_block$a(ctx) {
	let copy;
	let current;

	const copy_spread_levels = [
		{ "aria-label": /*copyLabel*/ ctx[11] },
		{ "aria-describedby": /*id*/ ctx[14] },
		{ feedback: /*feedback*/ ctx[12] },
		{
			feedbackTimeout: /*feedbackTimeout*/ ctx[13]
		},
		{
			class: "bx--snippet " + (/*type*/ ctx[3] && `bx--snippet--${/*type*/ ctx[3]}`) + "\n          " + (/*type*/ ctx[3] === "inline" && "bx--btn--copy") + "\n          " + (/*expanded*/ ctx[0] && "bx--snippet--expand") + "\n          " + (/*light*/ ctx[8] && "bx--snippet--light") + "\n          " + (/*hideCopyButton*/ ctx[5] && "bx--snippet--no-copy") + "\n          " + (/*wrapText*/ ctx[7] && "bx--snippet--wraptext")
		},
		/*$$restProps*/ ctx[16]
	];

	let copy_props = {
		$$slots: { default: [create_default_slot$5] },
		$$scope: { ctx }
	};

	for (let i = 0; i < copy_spread_levels.length; i += 1) {
		copy_props = assign(copy_props, copy_spread_levels[i]);
	}

	copy = new Copy({ props: copy_props });
	copy.$on("click", /*click_handler_1*/ ctx[27]);
	copy.$on("mouseover", /*mouseover_handler_1*/ ctx[28]);
	copy.$on("mouseenter", /*mouseenter_handler_1*/ ctx[29]);
	copy.$on("mouseleave", /*mouseleave_handler_1*/ ctx[30]);

	return {
		c() {
			create_component(copy.$$.fragment);
		},
		m(target, anchor) {
			mount_component(copy, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const copy_changes = (dirty[0] & /*copyLabel, id, feedback, feedbackTimeout, type, expanded, light, hideCopyButton, wrapText, $$restProps*/ 96681)
			? get_spread_update(copy_spread_levels, [
					dirty[0] & /*copyLabel*/ 2048 && { "aria-label": /*copyLabel*/ ctx[11] },
					dirty[0] & /*id*/ 16384 && { "aria-describedby": /*id*/ ctx[14] },
					dirty[0] & /*feedback*/ 4096 && { feedback: /*feedback*/ ctx[12] },
					dirty[0] & /*feedbackTimeout*/ 8192 && {
						feedbackTimeout: /*feedbackTimeout*/ ctx[13]
					},
					dirty[0] & /*type, expanded, light, hideCopyButton, wrapText*/ 425 && {
						class: "bx--snippet " + (/*type*/ ctx[3] && `bx--snippet--${/*type*/ ctx[3]}`) + "\n          " + (/*type*/ ctx[3] === "inline" && "bx--btn--copy") + "\n          " + (/*expanded*/ ctx[0] && "bx--snippet--expand") + "\n          " + (/*light*/ ctx[8] && "bx--snippet--light") + "\n          " + (/*hideCopyButton*/ ctx[5] && "bx--snippet--no-copy") + "\n          " + (/*wrapText*/ ctx[7] && "bx--snippet--wraptext")
					},
					dirty[0] & /*$$restProps*/ 65536 && get_spread_object(/*$$restProps*/ ctx[16])
				])
			: {};

			if (dirty[0] & /*id, code*/ 16400 | dirty[1] & /*$$scope*/ 16) {
				copy_changes.$$scope = { dirty, ctx };
			}

			copy.$set(copy_changes);
		},
		i(local) {
			if (current) return;
			transition_in(copy.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(copy.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(copy, detaching);
		}
	};
}

// (107:2) {#if hideCopyButton}
function create_if_block_2$3(ctx) {
	let span;
	let code_1;
	let current;
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[35], null);
	const default_slot_or_fallback = default_slot || fallback_block$d(ctx);
	let span_levels = [/*$$restProps*/ ctx[16]];
	let span_data = {};

	for (let i = 0; i < span_levels.length; i += 1) {
		span_data = assign(span_data, span_levels[i]);
	}

	return {
		c() {
			span = element("span");
			code_1 = element("code");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(code_1, "id", /*id*/ ctx[14]);
			set_attributes(span, span_data);
			toggle_class(span, "bx--snippet", true);
			toggle_class(span, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(span, "bx--snippet--light", /*light*/ ctx[8]);
			toggle_class(span, "bx--snippet--no-copy", /*hideCopyButton*/ ctx[5]);
			toggle_class(span, "bx--snippet--wraptext", /*wrapText*/ ctx[7]);
			toggle_class(span, "bx--snippet--single", /*type*/ ctx[3] === "single");
			toggle_class(span, "bx--snippet--inline", /*type*/ ctx[3] === "inline");
			toggle_class(span, "bx--snippet--multi", /*type*/ ctx[3] === "multi");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, code_1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(code_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[1] & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[35], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty[0] & /*code*/ 16) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 16384) {
				attr(code_1, "id", /*id*/ ctx[14]);
			}

			set_attributes(span, span_data = get_spread_update(span_levels, [dirty[0] & /*$$restProps*/ 65536 && /*$$restProps*/ ctx[16]]));
			toggle_class(span, "bx--snippet", true);
			toggle_class(span, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(span, "bx--snippet--light", /*light*/ ctx[8]);
			toggle_class(span, "bx--snippet--no-copy", /*hideCopyButton*/ ctx[5]);
			toggle_class(span, "bx--snippet--wraptext", /*wrapText*/ ctx[7]);
			toggle_class(span, "bx--snippet--single", /*type*/ ctx[3] === "single");
			toggle_class(span, "bx--snippet--inline", /*type*/ ctx[3] === "inline");
			toggle_class(span, "bx--snippet--multi", /*type*/ ctx[3] === "multi");
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

// (146:14) {code}
function fallback_block_1$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*code*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*code*/ 16) set_data(t, /*code*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (124:4) <Copy       aria-label="{copyLabel}"       aria-describedby="{id}"       feedback="{feedback}"       feedbackTimeout="{feedbackTimeout}"       class="bx--snippet {type && `bx--snippet--${type}`}           {type ===         'inline' && 'bx--btn--copy'}           {expanded &&         'bx--snippet--expand'}           {light &&         'bx--snippet--light'}           {hideCopyButton &&         'bx--snippet--no-copy'}           {wrapText && 'bx--snippet--wraptext'}"       {...$$restProps}       on:click       on:mouseover       on:mouseenter       on:mouseleave     >
function create_default_slot$5(ctx) {
	let code_1;
	let current;
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[35], null);
	const default_slot_or_fallback = default_slot || fallback_block_1$1(ctx);

	return {
		c() {
			code_1 = element("code");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(code_1, "id", /*id*/ ctx[14]);
		},
		m(target, anchor) {
			insert(target, code_1, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(code_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[1] & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[35], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty[0] & /*code*/ 16) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 16384) {
				attr(code_1, "id", /*id*/ ctx[14]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(code_1);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

// (120:14) {code}
function fallback_block$d(ctx) {
	let t;

	return {
		c() {
			t = text(/*code*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*code*/ 16) set_data(t, /*code*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$J(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$r, create_if_block_1$8, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[9]) return 0;
		if (/*type*/ ctx[3] === "inline") return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$I($$self, $$props, $$invalidate) {
	let expandText;

	const omit_props_names = [
		"type","code","expanded","hideCopyButton","disabled","wrapText","light","skeleton","copyButtonDescription","copyLabel","feedback","feedbackTimeout","showLessText","showMoreText","showMoreLess","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { type = "single" } = $$props;
	let { code = undefined } = $$props;
	let { expanded = false } = $$props;
	let { hideCopyButton = false } = $$props;
	let { disabled = false } = $$props;
	let { wrapText = false } = $$props;
	let { light = false } = $$props;
	let { skeleton = false } = $$props;
	let { copyButtonDescription = undefined } = $$props;
	let { copyLabel = undefined } = $$props;
	let { feedback = "Copied!" } = $$props;
	let { feedbackTimeout = 2000 } = $$props;
	let { showLessText = "Show less" } = $$props;
	let { showMoreText = "Show more" } = $$props;
	let { showMoreLess = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	function setShowMoreLess() {
		const { height } = ref.getBoundingClientRect();
		if (height > 0) $$invalidate(2, showMoreLess = ref.getBoundingClientRect().height > 255);
	}

	function mouseover_handler_2(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	function pre_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function click_handler_2(event) {
		bubble($$self, event);
	}

	function animationend_handler(event) {
		bubble($$self, event);
	}

	const click_handler_3 = () => {
		$$invalidate(0, expanded = !expanded);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("type" in $$new_props) $$invalidate(3, type = $$new_props.type);
		if ("code" in $$new_props) $$invalidate(4, code = $$new_props.code);
		if ("expanded" in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ("hideCopyButton" in $$new_props) $$invalidate(5, hideCopyButton = $$new_props.hideCopyButton);
		if ("disabled" in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("wrapText" in $$new_props) $$invalidate(7, wrapText = $$new_props.wrapText);
		if ("light" in $$new_props) $$invalidate(8, light = $$new_props.light);
		if ("skeleton" in $$new_props) $$invalidate(9, skeleton = $$new_props.skeleton);
		if ("copyButtonDescription" in $$new_props) $$invalidate(10, copyButtonDescription = $$new_props.copyButtonDescription);
		if ("copyLabel" in $$new_props) $$invalidate(11, copyLabel = $$new_props.copyLabel);
		if ("feedback" in $$new_props) $$invalidate(12, feedback = $$new_props.feedback);
		if ("feedbackTimeout" in $$new_props) $$invalidate(13, feedbackTimeout = $$new_props.feedbackTimeout);
		if ("showLessText" in $$new_props) $$invalidate(17, showLessText = $$new_props.showLessText);
		if ("showMoreText" in $$new_props) $$invalidate(18, showMoreText = $$new_props.showMoreText);
		if ("showMoreLess" in $$new_props) $$invalidate(2, showMoreLess = $$new_props.showMoreLess);
		if ("id" in $$new_props) $$invalidate(14, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(35, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*expanded, showLessText, showMoreText*/ 393217) {
			 $$invalidate(15, expandText = expanded ? showLessText : showMoreText);
		}

		if ($$self.$$.dirty[0] & /*type, ref, code*/ 26) {
			 if (type === "multi" && ref) {
				if (code === undefined) setShowMoreLess();
				if (code) tick().then(setShowMoreLess);
			}
		}
	};

	return [
		expanded,
		ref,
		showMoreLess,
		type,
		code,
		hideCopyButton,
		disabled,
		wrapText,
		light,
		skeleton,
		copyButtonDescription,
		copyLabel,
		feedback,
		feedbackTimeout,
		id,
		expandText,
		$$restProps,
		showLessText,
		showMoreText,
		slots,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		pre_binding,
		click_handler_2,
		animationend_handler,
		click_handler_3,
		$$scope
	];
}

class CodeSnippet extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$I,
			create_fragment$J,
			safe_not_equal,
			{
				type: 3,
				code: 4,
				expanded: 0,
				hideCopyButton: 5,
				disabled: 6,
				wrapText: 7,
				light: 8,
				skeleton: 9,
				copyButtonDescription: 10,
				copyLabel: 11,
				feedback: 12,
				feedbackTimeout: 13,
				showLessText: 17,
				showMoreText: 18,
				showMoreLess: 2,
				id: 14,
				ref: 1
			},
			[-1, -1]
		);
	}
}

/* src/RadioButton/RadioButton.svelte generated by Svelte v3.32.1 */

function create_if_block$s(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*labelText*/ ctx[5]);
			toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 32) set_data(t, /*labelText*/ ctx[5]);

			if (dirty & /*hideLabel*/ 64) {
				toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[6]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$K(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let span;
	let t1;
	let mounted;
	let dispose;
	let if_block = /*labelText*/ ctx[5] && create_if_block$s(ctx);
	let div_levels = [/*$$restProps*/ ctx[11]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			span = element("span");
			t1 = space();
			if (if_block) if_block.c();
			attr(input, "type", "radio");
			attr(input, "id", /*id*/ ctx[7]);
			attr(input, "name", /*name*/ ctx[8]);
			input.checked = /*checked*/ ctx[0];
			input.disabled = /*disabled*/ ctx[3];
			input.value = /*value*/ ctx[2];
			toggle_class(input, "bx--radio-button", true);
			toggle_class(span, "bx--radio-button__appearance", true);
			attr(label, "for", /*id*/ ctx[7]);
			toggle_class(label, "bx--radio-button__label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--radio-button-wrapper", true);
			toggle_class(div, "bx--radio-button-wrapper--label-left", /*labelPosition*/ ctx[4] === "left");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			/*input_binding*/ ctx[14](input);
			append(div, t0);
			append(div, label);
			append(label, span);
			append(label, t1);
			if (if_block) if_block.m(label, null);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[13]),
					listen(input, "change", /*change_handler_1*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*id*/ 128) {
				attr(input, "id", /*id*/ ctx[7]);
			}

			if (dirty & /*name*/ 256) {
				attr(input, "name", /*name*/ ctx[8]);
			}

			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (dirty & /*disabled*/ 8) {
				input.disabled = /*disabled*/ ctx[3];
			}

			if (dirty & /*value*/ 4) {
				input.value = /*value*/ ctx[2];
			}

			if (/*labelText*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$s(ctx);
					if_block.c();
					if_block.m(label, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*id*/ 128) {
				attr(label, "for", /*id*/ ctx[7]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]]));
			toggle_class(div, "bx--radio-button-wrapper", true);
			toggle_class(div, "bx--radio-button-wrapper--label-left", /*labelPosition*/ ctx[4] === "left");
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*input_binding*/ ctx[14](null);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$J($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"value","checked","disabled","labelPosition","labelText","hideLabel","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { value = "" } = $$props;
	let { checked = false } = $$props;
	let { disabled = false } = $$props;
	let { labelPosition = "right" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("RadioButtonGroup");

	const selectedValue = ctx
	? ctx.selectedValue
	: writable(checked ? value : undefined);

	component_subscribe($$self, selectedValue, value => $$invalidate(12, $selectedValue = value));

	if (ctx) {
		ctx.add({ id, checked, disabled, value });
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler_1 = () => {
		if (ctx) {
			ctx.update(value);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("value" in $$new_props) $$invalidate(2, value = $$new_props.value);
		if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("labelPosition" in $$new_props) $$invalidate(4, labelPosition = $$new_props.labelPosition);
		if ("labelText" in $$new_props) $$invalidate(5, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(6, hideLabel = $$new_props.hideLabel);
		if ("id" in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(8, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue, value*/ 4100) {
			 $$invalidate(0, checked = $selectedValue === value);
		}
	};

	return [
		checked,
		ref,
		value,
		disabled,
		labelPosition,
		labelText,
		hideLabel,
		id,
		name,
		ctx,
		selectedValue,
		$$restProps,
		$selectedValue,
		change_handler,
		input_binding,
		change_handler_1
	];
}

class RadioButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$J, create_fragment$K, safe_not_equal, {
			value: 2,
			checked: 0,
			disabled: 3,
			labelPosition: 4,
			labelText: 5,
			hideLabel: 6,
			id: 7,
			name: 8,
			ref: 1
		});
	}
}

/* src/RadioButton/RadioButtonSkeleton.svelte generated by Svelte v3.32.1 */

function create_fragment$L(ctx) {
	let div1;
	let div0;
	let t;
	let span;
	let mounted;
	let dispose;
	let div1_levels = [/*$$restProps*/ ctx[0]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t = space();
			span = element("span");
			toggle_class(div0, "bx--radio-button", true);
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(span, "bx--radio-button__label", true);
			toggle_class(span, "bx--skeleton", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--radio-button-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div1, t);
			append(div1, span);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[1]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div1, "bx--radio-button-wrapper", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$K($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class RadioButtonSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$K, create_fragment$L, safe_not_equal, {});
	}
}

/* src/DataTable/Table.svelte generated by Svelte v3.32.1 */

function create_else_block$b(ctx) {
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let table_levels = [/*$$restProps*/ ctx[6]];
	let table_data = {};

	for (let i = 0; i < table_levels.length; i += 1) {
		table_data = assign(table_data, table_levels[i]);
	}

	return {
		c() {
			table = element("table");
			if (default_slot) default_slot.c();
			set_attributes(table, table_data);
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === "compact");
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === "short");
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === "tall");
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, table, anchor);

			if (default_slot) {
				default_slot.m(table, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			set_attributes(table, table_data = get_spread_update(table_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === "compact");
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === "short");
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === "tall");
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(table);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (24:0) {#if stickyHeader}
function create_if_block$t(ctx) {
	let section;
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let section_levels = [/*$$restProps*/ ctx[6]];
	let section_data = {};

	for (let i = 0; i < section_levels.length; i += 1) {
		section_data = assign(section_data, section_levels[i]);
	}

	return {
		c() {
			section = element("section");
			table = element("table");
			if (default_slot) default_slot.c();
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === "compact");
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === "short");
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === "tall");
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
			set_attributes(section, section_data);
			toggle_class(section, "bx--data-table_inner-container", true);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, table);

			if (default_slot) {
				default_slot.m(table, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === "compact");
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === "short");
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === "tall");
			}

			if (dirty & /*sortable*/ 16) {
				toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			}

			if (dirty & /*zebra*/ 2) {
				toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			}

			if (dirty & /*useStaticWidth*/ 4) {
				toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			}

			if (dirty & /*shouldShowBorder*/ 8) {
				toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			}

			if (dirty & /*stickyHeader*/ 32) {
				toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
			}

			set_attributes(section, section_data = get_spread_update(section_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(section, "bx--data-table_inner-container", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$M(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$t, create_else_block$b];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*stickyHeader*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$L($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","zebra","useStaticWidth","shouldShowBorder","sortable","stickyHeader"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { zebra = false } = $$props;
	let { useStaticWidth = false } = $$props;
	let { shouldShowBorder = false } = $$props;
	let { sortable = false } = $$props;
	let { stickyHeader = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ("zebra" in $$new_props) $$invalidate(1, zebra = $$new_props.zebra);
		if ("useStaticWidth" in $$new_props) $$invalidate(2, useStaticWidth = $$new_props.useStaticWidth);
		if ("shouldShowBorder" in $$new_props) $$invalidate(3, shouldShowBorder = $$new_props.shouldShowBorder);
		if ("sortable" in $$new_props) $$invalidate(4, sortable = $$new_props.sortable);
		if ("stickyHeader" in $$new_props) $$invalidate(5, stickyHeader = $$new_props.stickyHeader);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		size,
		zebra,
		useStaticWidth,
		shouldShowBorder,
		sortable,
		stickyHeader,
		$$restProps,
		$$scope,
		slots
	];
}

class Table extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$L, create_fragment$M, safe_not_equal, {
			size: 0,
			zebra: 1,
			useStaticWidth: 2,
			shouldShowBorder: 3,
			sortable: 4,
			stickyHeader: 5
		});
	}
}

/* src/DataTable/TableBody.svelte generated by Svelte v3.32.1 */

function create_fragment$N(ctx) {
	let tbody;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let tbody_levels = [{ "aria-live": "polite" }, /*$$restProps*/ ctx[0]];
	let tbody_data = {};

	for (let i = 0; i < tbody_levels.length; i += 1) {
		tbody_data = assign(tbody_data, tbody_levels[i]);
	}

	return {
		c() {
			tbody = element("tbody");
			if (default_slot) default_slot.c();
			set_attributes(tbody, tbody_data);
		},
		m(target, anchor) {
			insert(target, tbody, anchor);

			if (default_slot) {
				default_slot.m(tbody, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(tbody, tbody_data = get_spread_update(tbody_levels, [
				{ "aria-live": "polite" },
				dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tbody);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$M($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [$$restProps, $$scope, slots];
}

class TableBody extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$M, create_fragment$N, safe_not_equal, {});
	}
}

/* src/DataTable/TableCell.svelte generated by Svelte v3.32.1 */

function create_fragment$O(ctx) {
	let td;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let td_levels = [/*$$restProps*/ ctx[0]];
	let td_data = {};

	for (let i = 0; i < td_levels.length; i += 1) {
		td_data = assign(td_data, td_levels[i]);
	}

	return {
		c() {
			td = element("td");
			if (default_slot) default_slot.c();
			set_attributes(td, td_data);
		},
		m(target, anchor) {
			insert(target, td, anchor);

			if (default_slot) {
				default_slot.m(td, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(td, "click", /*click_handler*/ ctx[3]),
					listen(td, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(td, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(td, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(td, td_data = get_spread_update(td_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$N($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableCell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$N, create_fragment$O, safe_not_equal, {});
	}
}

/* src/DataTable/TableContainer.svelte generated by Svelte v3.32.1 */

function create_if_block$u(ctx) {
	let div;
	let h4;
	let t0;
	let t1;
	let p;
	let t2;

	return {
		c() {
			div = element("div");
			h4 = element("h4");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p = element("p");
			t2 = text(/*description*/ ctx[1]);
			toggle_class(h4, "bx--data-table-header__title", true);
			toggle_class(p, "bx--data-table-header__description", true);
			toggle_class(div, "bx--data-table-header", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h4);
			append(h4, t0);
			append(div, t1);
			append(div, p);
			append(p, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*description*/ 2) set_data(t2, /*description*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$P(ctx) {
	let div;
	let t;
	let current;
	let if_block = /*title*/ ctx[0] && create_if_block$u(ctx);
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let div_levels = [/*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--data-table-container", true);
			toggle_class(div, "bx--data-table--max-width", /*stickyHeader*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$u(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--data-table-container", true);
			toggle_class(div, "bx--data-table--max-width", /*stickyHeader*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$O($$self, $$props, $$invalidate) {
	const omit_props_names = ["title","description","stickyHeader"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = "" } = $$props;
	let { description = "" } = $$props;
	let { stickyHeader = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("title" in $$new_props) $$invalidate(0, title = $$new_props.title);
		if ("description" in $$new_props) $$invalidate(1, description = $$new_props.description);
		if ("stickyHeader" in $$new_props) $$invalidate(2, stickyHeader = $$new_props.stickyHeader);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [title, description, stickyHeader, $$restProps, $$scope, slots];
}

class TableContainer extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$O, create_fragment$P, safe_not_equal, {
			title: 0,
			description: 1,
			stickyHeader: 2
		});
	}
}

/* src/DataTable/TableHead.svelte generated by Svelte v3.32.1 */

function create_fragment$Q(ctx) {
	let thead;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let thead_levels = [/*$$restProps*/ ctx[0]];
	let thead_data = {};

	for (let i = 0; i < thead_levels.length; i += 1) {
		thead_data = assign(thead_data, thead_levels[i]);
	}

	return {
		c() {
			thead = element("thead");
			if (default_slot) default_slot.c();
			set_attributes(thead, thead_data);
		},
		m(target, anchor) {
			insert(target, thead, anchor);

			if (default_slot) {
				default_slot.m(thead, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(thead, "click", /*click_handler*/ ctx[3]),
					listen(thead, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(thead, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(thead, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(thead, thead_data = get_spread_update(thead_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(thead);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$P($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableHead extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$P, create_fragment$Q, safe_not_equal, {});
	}
}

/* node_modules/carbon-icons-svelte/lib/ArrowUp20/ArrowUp20.svelte generated by Svelte v3.32.1 */

function create_if_block$v(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$e(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$v(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$v(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$R(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$e(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ArrowUp20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M16 4L6 14 7.41 15.41 15 7.83 15 28 17 28 17 7.83 24.59 15.41 26 14 16 4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ArrowUp20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$Q($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ArrowUp20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$Q, create_fragment$R, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/ArrowsVertical20/ArrowsVertical20.svelte generated by Svelte v3.32.1 */

function create_if_block$w(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$f(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$w(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$w(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$S(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$f(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ArrowsVertical20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M27.6 20.6L24 24.2 24 4 22 4 22 24.2 18.4 20.6 17 22 23 28 29 22zM9 4L3 10 4.4 11.4 8 7.8 8 28 10 28 10 7.8 13.6 11.4 15 10z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ArrowsVertical20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$R($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ArrowsVertical20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$R, create_fragment$S, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/DataTable/TableHeader.svelte generated by Svelte v3.32.1 */

function create_else_block$c(ctx) {
	let th;
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	let th_levels = [{ scope: /*scope*/ ctx[0] }, { id: /*id*/ ctx[1] }, /*$$restProps*/ ctx[8]];
	let th_data = {};

	for (let i = 0; i < th_levels.length; i += 1) {
		th_data = assign(th_data, th_levels[i]);
	}

	return {
		c() {
			th = element("th");
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--table-header-label", true);
			set_attributes(th, th_data);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(th, "click", /*click_handler_1*/ ctx[16]),
					listen(th, "mouseover", /*mouseover_handler_1*/ ctx[17]),
					listen(th, "mouseenter", /*mouseenter_handler_1*/ ctx[18]),
					listen(th, "mouseleave", /*mouseleave_handler_1*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			set_attributes(th, th_data = get_spread_update(th_levels, [
				(!current || dirty & /*scope*/ 1) && { scope: /*scope*/ ctx[0] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (27:0) {#if $tableSortable}
function create_if_block$x(ctx) {
	let th;
	let button;
	let div;
	let t0;
	let arrowup20;
	let t1;
	let arrowsvertical20;
	let th_aria_sort_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	arrowup20 = new ArrowUp20({
			props: {
				"aria-label": /*ariaLabel*/ ctx[4],
				class: "bx--table-sort__icon"
			}
		});

	arrowsvertical20 = new ArrowsVertical20({
			props: {
				"aria-label": /*ariaLabel*/ ctx[4],
				class: "bx--table-sort__icon-unsorted"
			}
		});

	let th_levels = [
		{
			"aria-sort": th_aria_sort_value = /*active*/ ctx[3]
			? /*$sortHeader*/ ctx[2].sortDirection
			: "none"
		},
		{ scope: /*scope*/ ctx[0] },
		{ id: /*id*/ ctx[1] },
		/*$$restProps*/ ctx[8]
	];

	let th_data = {};

	for (let i = 0; i < th_levels.length; i += 1) {
		th_data = assign(th_data, th_levels[i]);
	}

	return {
		c() {
			th = element("th");
			button = element("button");
			div = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(arrowup20.$$.fragment);
			t1 = space();
			create_component(arrowsvertical20.$$.fragment);
			toggle_class(div, "bx--table-header-label", true);
			toggle_class(button, "bx--table-sort", true);
			toggle_class(button, "bx--table-sort--active", /*active*/ ctx[3]);
			toggle_class(button, "bx--table-sort--ascending", /*active*/ ctx[3] && /*$sortHeader*/ ctx[2].sortDirection === "descending");
			set_attributes(th, th_data);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, button);
			append(button, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(button, t0);
			mount_component(arrowup20, button, null);
			append(button, t1);
			mount_component(arrowsvertical20, button, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[15]),
					listen(th, "mouseover", /*mouseover_handler*/ ctx[12]),
					listen(th, "mouseenter", /*mouseenter_handler*/ ctx[13]),
					listen(th, "mouseleave", /*mouseleave_handler*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			const arrowup20_changes = {};
			if (dirty & /*ariaLabel*/ 16) arrowup20_changes["aria-label"] = /*ariaLabel*/ ctx[4];
			arrowup20.$set(arrowup20_changes);
			const arrowsvertical20_changes = {};
			if (dirty & /*ariaLabel*/ 16) arrowsvertical20_changes["aria-label"] = /*ariaLabel*/ ctx[4];
			arrowsvertical20.$set(arrowsvertical20_changes);

			if (dirty & /*active*/ 8) {
				toggle_class(button, "bx--table-sort--active", /*active*/ ctx[3]);
			}

			if (dirty & /*active, $sortHeader*/ 12) {
				toggle_class(button, "bx--table-sort--ascending", /*active*/ ctx[3] && /*$sortHeader*/ ctx[2].sortDirection === "descending");
			}

			set_attributes(th, th_data = get_spread_update(th_levels, [
				(!current || dirty & /*active, $sortHeader*/ 12 && th_aria_sort_value !== (th_aria_sort_value = /*active*/ ctx[3]
				? /*$sortHeader*/ ctx[2].sortDirection
				: "none")) && { "aria-sort": th_aria_sort_value },
				(!current || dirty & /*scope*/ 1) && { scope: /*scope*/ ctx[0] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(arrowup20.$$.fragment, local);
			transition_in(arrowsvertical20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(arrowup20.$$.fragment, local);
			transition_out(arrowsvertical20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (default_slot) default_slot.d(detaching);
			destroy_component(arrowup20);
			destroy_component(arrowsvertical20);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$T(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$x, create_else_block$c];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$tableSortable*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$S($$self, $$props, $$invalidate) {
	let active;
	let ariaLabel;
	const omit_props_names = ["scope","translateWithId","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $sortHeader;
	let $tableSortable;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { scope = "col" } = $$props;
	let { translateWithId = () => "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const { sortHeader, tableSortable, add } = getContext("DataTable");
	component_subscribe($$self, sortHeader, value => $$invalidate(2, $sortHeader = value));
	component_subscribe($$self, tableSortable, value => $$invalidate(5, $tableSortable = value));
	add(id);

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("scope" in $$new_props) $$invalidate(0, scope = $$new_props.scope);
		if ("translateWithId" in $$new_props) $$invalidate(9, translateWithId = $$new_props.translateWithId);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sortHeader, id*/ 6) {
			 $$invalidate(3, active = $sortHeader.id === id);
		}

		if ($$self.$$.dirty & /*translateWithId*/ 512) {
			// TODO: translate with id
			 $$invalidate(4, ariaLabel = translateWithId());
		}
	};

	return [
		scope,
		id,
		$sortHeader,
		active,
		ariaLabel,
		$tableSortable,
		sortHeader,
		tableSortable,
		$$restProps,
		translateWithId,
		$$scope,
		slots,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class TableHeader extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$S, create_fragment$T, safe_not_equal, { scope: 0, translateWithId: 9, id: 1 });
	}
}

/* src/DataTable/TableRow.svelte generated by Svelte v3.32.1 */

function create_fragment$U(ctx) {
	let tr;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let tr_levels = [/*$$restProps*/ ctx[0]];
	let tr_data = {};

	for (let i = 0; i < tr_levels.length; i += 1) {
		tr_data = assign(tr_data, tr_levels[i]);
	}

	return {
		c() {
			tr = element("tr");
			if (default_slot) default_slot.c();
			set_attributes(tr, tr_data);
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			if (default_slot) {
				default_slot.m(tr, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(tr, "click", /*click_handler*/ ctx[3]),
					listen(tr, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(tr, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(tr, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(tr, tr_data = get_spread_update(tr_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$T($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableRow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$T, create_fragment$U, safe_not_equal, {});
	}
}

/* src/DataTable/DataTable.svelte generated by Svelte v3.32.1 */

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[52] = list[i];
	child_ctx[54] = i;
	return child_ctx;
}

const get_expanded_row_slot_changes = dirty => ({
	row: dirty[0] & /*sorting, sortedRows, rows*/ 8454145
});

const get_expanded_row_slot_context = ctx => ({ row: /*row*/ ctx[52] });

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[55] = list[i];
	child_ctx[57] = i;
	return child_ctx;
}

const get_cell_slot_changes_1 = dirty => ({
	row: dirty[0] & /*sorting, sortedRows, rows*/ 8454145,
	cell: dirty[0] & /*sorting, sortedRows, rows*/ 8454145
});

const get_cell_slot_context_1 = ctx => ({
	row: /*row*/ ctx[52],
	cell: /*cell*/ ctx[55]
});

const get_cell_slot_changes = dirty => ({
	row: dirty[0] & /*sorting, sortedRows, rows*/ 8454145,
	cell: dirty[0] & /*sorting, sortedRows, rows*/ 8454145
});

const get_cell_slot_context = ctx => ({
	row: /*row*/ ctx[52],
	cell: /*cell*/ ctx[55]
});

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[58] = list[i];
	child_ctx[54] = i;
	return child_ctx;
}

const get_cell_header_slot_changes = dirty => ({ header: dirty[0] & /*headers*/ 32 });
const get_cell_header_slot_context = ctx => ({ header: /*header*/ ctx[58] });

// (199:8) {#if expandable}
function create_if_block_8(ctx) {
	let th;
	let th_data_previous_value_value;
	let current;
	let if_block = /*batchExpansion*/ ctx[11] && create_if_block_9(ctx);

	return {
		c() {
			th = element("th");
			if (if_block) if_block.c();
			attr(th, "scope", "col");
			attr(th, "data-previous-value", th_data_previous_value_value = /*expanded*/ ctx[17] ? "collapsed" : undefined);
			toggle_class(th, "bx--table-expand", true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			if (if_block) if_block.m(th, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*batchExpansion*/ ctx[11]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*batchExpansion*/ 2048) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_9(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(th, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*expanded*/ 131072 && th_data_previous_value_value !== (th_data_previous_value_value = /*expanded*/ ctx[17] ? "collapsed" : undefined)) {
				attr(th, "data-previous-value", th_data_previous_value_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (if_block) if_block.d();
		}
	};
}

// (205:12) {#if batchExpansion}
function create_if_block_9(ctx) {
	let button;
	let chevronright16;
	let current;
	let mounted;
	let dispose;

	chevronright16 = new ChevronRight16({
			props: { class: "bx--table-expand__svg" }
		});

	return {
		c() {
			button = element("button");
			create_component(chevronright16.$$.fragment);
			attr(button, "type", "button");
			toggle_class(button, "bx--table-expand__button", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(chevronright16, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[35]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(chevronright16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(chevronright16);
			mounted = false;
			dispose();
		}
	};
}

// (221:8) {#if selectable && !batchSelection}
function create_if_block_7(ctx) {
	let th;

	return {
		c() {
			th = element("th");
			attr(th, "scope", "col");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (224:8) {#if batchSelection && !radio}
function create_if_block_6(ctx) {
	let th;
	let inlinecheckbox;
	let updating_ref;
	let current;

	function inlinecheckbox_ref_binding(value) {
		/*inlinecheckbox_ref_binding*/ ctx[36].call(null, value);
	}

	let inlinecheckbox_props = {
		"aria-label": "Select all rows",
		checked: /*selectAll*/ ctx[19],
		indeterminate: /*indeterminate*/ ctx[22]
	};

	if (/*refSelectAll*/ ctx[20] !== void 0) {
		inlinecheckbox_props.ref = /*refSelectAll*/ ctx[20];
	}

	inlinecheckbox = new InlineCheckbox({ props: inlinecheckbox_props });
	binding_callbacks.push(() => bind(inlinecheckbox, "ref", inlinecheckbox_ref_binding));
	inlinecheckbox.$on("change", /*change_handler*/ ctx[37]);

	return {
		c() {
			th = element("th");
			create_component(inlinecheckbox.$$.fragment);
			attr(th, "scope", "col");
			toggle_class(th, "bx--table-column-checkbox", true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			mount_component(inlinecheckbox, th, null);
			current = true;
		},
		p(ctx, dirty) {
			const inlinecheckbox_changes = {};
			if (dirty[0] & /*selectAll*/ 524288) inlinecheckbox_changes.checked = /*selectAll*/ ctx[19];
			if (dirty[0] & /*indeterminate*/ 4194304) inlinecheckbox_changes.indeterminate = /*indeterminate*/ ctx[22];

			if (!updating_ref && dirty[0] & /*refSelectAll*/ 1048576) {
				updating_ref = true;
				inlinecheckbox_changes.ref = /*refSelectAll*/ ctx[20];
				add_flush_callback(() => updating_ref = false);
			}

			inlinecheckbox.$set(inlinecheckbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inlinecheckbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinecheckbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			destroy_component(inlinecheckbox);
		}
	};
}

// (251:10) {:else}
function create_else_block_2(ctx) {
	let tableheader;
	let current;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[38](/*header*/ ctx[58]);
	}

	tableheader = new TableHeader({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	tableheader.$on("click", click_handler_1);

	return {
		c() {
			create_component(tableheader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tableheader, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tableheader_changes = {};

			if (dirty[0] & /*headers*/ 32 | dirty[1] & /*$$scope*/ 131072) {
				tableheader_changes.$$scope = { dirty, ctx };
			}

			tableheader.$set(tableheader_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tableheader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tableheader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tableheader, detaching);
		}
	};
}

// (249:10) {#if header.empty}
function create_if_block_5$1(ctx) {
	let th;

	return {
		c() {
			th = element("th");
			attr(th, "scope", "col");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (269:57) {header.value}
function fallback_block_2$2(ctx) {
	let t_value = /*header*/ ctx[58].value + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*headers*/ 32 && t_value !== (t_value = /*header*/ ctx[58].value + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (252:12) <TableHeader               on:click="{() => {                 dispatch('click', { header });                 let active = header.key === $sortHeader.key;                 let currentSortDirection = active                   ? $sortHeader.sortDirection                   : 'none';                 let sortDirection = sortDirectionMap[currentSortDirection];                 dispatch('click:header', { header, sortDirection });                 sortHeader.set({                   id: sortDirection === 'none' ? null : $thKeys[header.key],                   key: header.key,                   sort: header.sort,                   sortDirection,                 });               }}"             >
function create_default_slot_9(ctx) {
	let t;
	let current;
	const cell_header_slot_template = /*#slots*/ ctx[34]["cell-header"];
	const cell_header_slot = create_slot(cell_header_slot_template, ctx, /*$$scope*/ ctx[48], get_cell_header_slot_context);
	const cell_header_slot_or_fallback = cell_header_slot || fallback_block_2$2(ctx);

	return {
		c() {
			if (cell_header_slot_or_fallback) cell_header_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (cell_header_slot_or_fallback) {
				cell_header_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_header_slot) {
				if (cell_header_slot.p && dirty[0] & /*headers*/ 32 | dirty[1] & /*$$scope*/ 131072) {
					update_slot(cell_header_slot, cell_header_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_cell_header_slot_changes, get_cell_header_slot_context);
				}
			} else {
				if (cell_header_slot_or_fallback && cell_header_slot_or_fallback.p && dirty[0] & /*headers*/ 32) {
					cell_header_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_header_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_header_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cell_header_slot_or_fallback) cell_header_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (248:8) {#each headers as header, i (header.key)}
function create_each_block_2(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_5$1, create_else_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*header*/ ctx[58].empty) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (198:6) <TableRow>
function create_default_slot_8(ctx) {
	let t0;
	let t1;
	let t2;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let if_block0 = /*expandable*/ ctx[3] && create_if_block_8(ctx);
	let if_block1 = /*selectable*/ ctx[4] && !/*batchSelection*/ ctx[13] && create_if_block_7();
	let if_block2 = /*batchSelection*/ ctx[13] && !/*radio*/ ctx[12] && create_if_block_6(ctx);
	let each_value_2 = /*headers*/ ctx[5];
	const get_key = ctx => /*header*/ ctx[58].key;

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
	}

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*expandable*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*expandable*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_8(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selectable*/ ctx[4] && !/*batchSelection*/ ctx[13]) {
				if (if_block1) ; else {
					if_block1 = create_if_block_7();
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*batchSelection*/ ctx[13] && !/*radio*/ ctx[12]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*batchSelection, radio*/ 12288) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_6(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*headers, dispatch, $sortHeader, sortDirectionMap, sortHeader, $thKeys*/ 251691040 | dirty[1] & /*$$scope*/ 131072) {
				each_value_2 = /*headers*/ ctx[5];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_2, each_1_anchor, get_each_context_2);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block2);

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (197:4) <TableHead>
function create_default_slot_7(ctx) {
	let tablerow;
	let current;

	tablerow = new TableRow({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablerow.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablerow, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablerow_changes = {};

			if (dirty[0] & /*headers, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, selectedRowIds, rows, batchSelection, radio, selectable, expanded, expandedRowIds, batchExpansion, expandable*/ 22722623 | dirty[1] & /*$$scope*/ 131072) {
				tablerow_changes.$$scope = { dirty, ctx };
			}

			tablerow.$set(tablerow_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablerow.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablerow.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablerow, detaching);
		}
	};
}

// (297:10) {#if expandable}
function create_if_block_4$3(ctx) {
	let tablecell;
	let current;

	tablecell = new TableCell({
			props: {
				class: "bx--table-expand",
				headers: "expand",
				"data-previous-value": /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
				? "collapsed"
				: undefined,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablecell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecell, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecell_changes = {};

			if (dirty[0] & /*expandedRows, sorting, sortedRows, rows*/ 10551297) tablecell_changes["data-previous-value"] = /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
			? "collapsed"
			: undefined;

			if (dirty[0] & /*expandedRows, sorting, sortedRows, rows, expandedRowIds*/ 10551299 | dirty[1] & /*$$scope*/ 131072) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecell, detaching);
		}
	};
}

// (298:12) <TableCell               class="bx--table-expand"               headers="expand"               data-previous-value="{expandedRows[row.id]                 ? 'collapsed'                 : undefined}"             >
function create_default_slot_6(ctx) {
	let button;
	let chevronright16;
	let button_aria_label_value;
	let current;
	let mounted;
	let dispose;

	chevronright16 = new ChevronRight16({
			props: { class: "bx--table-expand__svg" }
		});

	function click_handler_2() {
		return /*click_handler_2*/ ctx[39](/*row*/ ctx[52]);
	}

	return {
		c() {
			button = element("button");
			create_component(chevronright16.$$.fragment);
			attr(button, "type", "button");

			attr(button, "aria-label", button_aria_label_value = /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
			? "Collapse current row"
			: "Expand current row");

			toggle_class(button, "bx--table-expand__button", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(chevronright16, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", click_handler_2);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty[0] & /*expandedRows, sorting, sortedRows, rows*/ 10551297 && button_aria_label_value !== (button_aria_label_value = /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
			? "Collapse current row"
			: "Expand current row")) {
				attr(button, "aria-label", button_aria_label_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(chevronright16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(chevronright16);
			mounted = false;
			dispose();
		}
	};
}

// (328:10) {#if selectable}
function create_if_block_2$4(ctx) {
	let td;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_3$3, create_else_block_1$1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*radio*/ ctx[12]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			td = element("td");
			if_block.c();
			toggle_class(td, "bx--table-column-checkbox", true);
			toggle_class(td, "bx--table-column-radio", /*radio*/ ctx[12]);
		},
		m(target, anchor) {
			insert(target, td, anchor);
			if_blocks[current_block_type_index].m(td, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(td, null);
			}

			if (dirty[0] & /*radio*/ 4096) {
				toggle_class(td, "bx--table-column-radio", /*radio*/ ctx[12]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (341:14) {:else}
function create_else_block_1$1(ctx) {
	let inlinecheckbox;
	let current;

	function change_handler_2() {
		return /*change_handler_2*/ ctx[41](/*row*/ ctx[52]);
	}

	inlinecheckbox = new InlineCheckbox({
			props: {
				name: "select-row-" + /*row*/ ctx[52].id,
				checked: /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id)
			}
		});

	inlinecheckbox.$on("change", change_handler_2);

	return {
		c() {
			create_component(inlinecheckbox.$$.fragment);
		},
		m(target, anchor) {
			mount_component(inlinecheckbox, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const inlinecheckbox_changes = {};
			if (dirty[0] & /*sorting, sortedRows, rows*/ 8454145) inlinecheckbox_changes.name = "select-row-" + /*row*/ ctx[52].id;
			if (dirty[0] & /*selectedRowIds, sorting, sortedRows, rows*/ 8454149) inlinecheckbox_changes.checked = /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id);
			inlinecheckbox.$set(inlinecheckbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inlinecheckbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinecheckbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(inlinecheckbox, detaching);
		}
	};
}

// (333:14) {#if radio}
function create_if_block_3$3(ctx) {
	let radiobutton;
	let current;

	function change_handler_1() {
		return /*change_handler_1*/ ctx[40](/*row*/ ctx[52]);
	}

	radiobutton = new RadioButton({
			props: {
				name: "select-row-" + /*row*/ ctx[52].id,
				checked: /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id)
			}
		});

	radiobutton.$on("change", change_handler_1);

	return {
		c() {
			create_component(radiobutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(radiobutton, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const radiobutton_changes = {};
			if (dirty[0] & /*sorting, sortedRows, rows*/ 8454145) radiobutton_changes.name = "select-row-" + /*row*/ ctx[52].id;
			if (dirty[0] & /*selectedRowIds, sorting, sortedRows, rows*/ 8454149) radiobutton_changes.checked = /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id);
			radiobutton.$set(radiobutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(radiobutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(radiobutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(radiobutton, detaching);
		}
	};
}

// (367:12) {:else}
function create_else_block$d(ctx) {
	let tablecell;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[42](/*row*/ ctx[52], /*cell*/ ctx[55]);
	}

	tablecell = new TableCell({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	tablecell.$on("click", click_handler_3);

	return {
		c() {
			create_component(tablecell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecell, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablecell_changes = {};

			if (dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177 | dirty[1] & /*$$scope*/ 131072) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecell, detaching);
		}
	};
}

// (359:12) {#if headers[j].empty}
function create_if_block_1$9(ctx) {
	let td;
	let t;
	let current;
	const cell_slot_template = /*#slots*/ ctx[34].cell;
	const cell_slot = create_slot(cell_slot_template, ctx, /*$$scope*/ ctx[48], get_cell_slot_context);
	const cell_slot_or_fallback = cell_slot || fallback_block$g(ctx);

	return {
		c() {
			td = element("td");
			if (cell_slot_or_fallback) cell_slot_or_fallback.c();
			t = space();
			toggle_class(td, "bx--table-column-menu", /*headers*/ ctx[5][/*j*/ ctx[57]].columnMenu);
		},
		m(target, anchor) {
			insert(target, td, anchor);

			if (cell_slot_or_fallback) {
				cell_slot_or_fallback.m(td, null);
			}

			append(td, t);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_slot) {
				if (cell_slot.p && dirty[0] & /*sorting, sortedRows, rows*/ 8454145 | dirty[1] & /*$$scope*/ 131072) {
					update_slot(cell_slot, cell_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_cell_slot_changes, get_cell_slot_context);
				}
			} else {
				if (cell_slot_or_fallback && cell_slot_or_fallback.p && dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177) {
					cell_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177) {
				toggle_class(td, "bx--table-column-menu", /*headers*/ ctx[5][/*j*/ ctx[57]].columnMenu);
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if (cell_slot_or_fallback) cell_slot_or_fallback.d(detaching);
		}
	};
}

// (374:60)                    
function fallback_block_1$2(ctx) {
	let t_value = (/*headers*/ ctx[5][/*j*/ ctx[57]].display
	? /*headers*/ ctx[5][/*j*/ ctx[57]].display(/*cell*/ ctx[55].value)
	: /*cell*/ ctx[55].value) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177 && t_value !== (t_value = (/*headers*/ ctx[5][/*j*/ ctx[57]].display
			? /*headers*/ ctx[5][/*j*/ ctx[57]].display(/*cell*/ ctx[55].value)
			: /*cell*/ ctx[55].value) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (368:14) <TableCell                 on:click="{() => {                   dispatch('click', { row, cell });                   dispatch('click:cell', cell);                 }}"               >
function create_default_slot_5(ctx) {
	let t;
	let current;
	const cell_slot_template = /*#slots*/ ctx[34].cell;
	const cell_slot = create_slot(cell_slot_template, ctx, /*$$scope*/ ctx[48], get_cell_slot_context_1);
	const cell_slot_or_fallback = cell_slot || fallback_block_1$2(ctx);

	return {
		c() {
			if (cell_slot_or_fallback) cell_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (cell_slot_or_fallback) {
				cell_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_slot) {
				if (cell_slot.p && dirty[0] & /*sorting, sortedRows, rows*/ 8454145 | dirty[1] & /*$$scope*/ 131072) {
					update_slot(cell_slot, cell_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_cell_slot_changes_1, get_cell_slot_context_1);
				}
			} else {
				if (cell_slot_or_fallback && cell_slot_or_fallback.p && dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177) {
					cell_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cell_slot_or_fallback) cell_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (361:60)                    
function fallback_block$g(ctx) {
	let t_value = (/*headers*/ ctx[5][/*j*/ ctx[57]].display
	? /*headers*/ ctx[5][/*j*/ ctx[57]].display(/*cell*/ ctx[55].value)
	: /*cell*/ ctx[55].value) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*headers, sorting, sortedRows, rows*/ 8454177 && t_value !== (t_value = (/*headers*/ ctx[5][/*j*/ ctx[57]].display
			? /*headers*/ ctx[5][/*j*/ ctx[57]].display(/*cell*/ ctx[55].value)
			: /*cell*/ ctx[55].value) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (358:10) {#each row.cells as cell, j (cell.key)}
function create_each_block_1(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$9, create_else_block$d];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*headers*/ ctx[5][/*j*/ ctx[57]].empty) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (277:8) <TableRow           id="row-{row.id}"           class="{selectedRowIds.includes(row.id)             ? 'bx--data-table--selected'             : ''} {expandedRows[row.id] ? 'bx--expandable-row' : ''} {expandable             ? 'bx--parent-row'             : ''} {expandable && parentRowId === row.id             ? 'bx--expandable-row--hover'             : ''}"           on:click="{() => {             dispatch('click', { row });             dispatch('click:row', row);           }}"           on:mouseenter="{() => {             dispatch('mouseenter:row', row);           }}"           on:mouseleave="{() => {             dispatch('mouseleave:row', row);           }}"         >
function create_default_slot_4(ctx) {
	let t0;
	let t1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let if_block0 = /*expandable*/ ctx[3] && create_if_block_4$3(ctx);
	let if_block1 = /*selectable*/ ctx[4] && create_if_block_2$4(ctx);
	let each_value_1 = /*row*/ ctx[52].cells;
	const get_key = ctx => /*cell*/ ctx[55].key;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*expandable*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*expandable*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selectable*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*selectable*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*headers, sorting, sortedRows, rows, dispatch*/ 75563041 | dirty[1] & /*$$scope*/ 131072) {
				each_value_1 = /*row*/ ctx[52].cells;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_1, each_1_anchor, get_each_context_1);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (384:8) {#if expandable && expandedRows[row.id]}
function create_if_block$y(ctx) {
	let tr;
	let tablecell;
	let t;
	let current;
	let mounted;
	let dispose;

	tablecell = new TableCell({
			props: {
				colspan: /*headers*/ ctx[5].length + 1,
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			}
		});

	function mouseenter_handler_1() {
		return /*mouseenter_handler_1*/ ctx[46](/*row*/ ctx[52]);
	}

	return {
		c() {
			tr = element("tr");
			create_component(tablecell.$$.fragment);
			t = space();
			attr(tr, "data-child-row", "");
			toggle_class(tr, "bx--expandable-row", true);
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			mount_component(tablecell, tr, null);
			append(tr, t);
			current = true;

			if (!mounted) {
				dispose = [
					listen(tr, "mouseenter", mouseenter_handler_1),
					listen(tr, "mouseleave", /*mouseleave_handler_1*/ ctx[47])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablecell_changes = {};
			if (dirty[0] & /*headers*/ 32) tablecell_changes.colspan = /*headers*/ ctx[5].length + 1;

			if (dirty[0] & /*sorting, sortedRows, rows*/ 8454145 | dirty[1] & /*$$scope*/ 131072) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_component(tablecell);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (395:12) <TableCell colspan="{headers.length + 1}">
function create_default_slot_3$1(ctx) {
	let div;
	let current;
	const expanded_row_slot_template = /*#slots*/ ctx[34]["expanded-row"];
	const expanded_row_slot = create_slot(expanded_row_slot_template, ctx, /*$$scope*/ ctx[48], get_expanded_row_slot_context);

	return {
		c() {
			div = element("div");
			if (expanded_row_slot) expanded_row_slot.c();
			toggle_class(div, "bx--child-row-inner-container", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (expanded_row_slot) {
				expanded_row_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (expanded_row_slot) {
				if (expanded_row_slot.p && dirty[0] & /*sorting, sortedRows, rows*/ 8454145 | dirty[1] & /*$$scope*/ 131072) {
					update_slot(expanded_row_slot, expanded_row_slot_template, ctx, /*$$scope*/ ctx[48], dirty, get_expanded_row_slot_changes, get_expanded_row_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(expanded_row_slot, local);
			current = true;
		},
		o(local) {
			transition_out(expanded_row_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (expanded_row_slot) expanded_row_slot.d(detaching);
		}
	};
}

// (276:6) {#each sorting ? sortedRows : rows as row, i (row.id)}
function create_each_block$4(key_1, ctx) {
	let first;
	let tablerow;
	let t;
	let if_block_anchor;
	let current;

	function click_handler_4() {
		return /*click_handler_4*/ ctx[43](/*row*/ ctx[52]);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[44](/*row*/ ctx[52]);
	}

	function mouseleave_handler() {
		return /*mouseleave_handler*/ ctx[45](/*row*/ ctx[52]);
	}

	tablerow = new TableRow({
			props: {
				id: "row-" + /*row*/ ctx[52].id,
				class: "" + ((/*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id)
				? "bx--data-table--selected"
				: "") + " " + (/*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
				? "bx--expandable-row"
				: "") + " " + (/*expandable*/ ctx[3] ? "bx--parent-row" : "") + " " + (/*expandable*/ ctx[3] && /*parentRowId*/ ctx[18] === /*row*/ ctx[52].id
				? "bx--expandable-row--hover"
				: "")),
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	tablerow.$on("click", click_handler_4);
	tablerow.$on("mouseenter", mouseenter_handler);
	tablerow.$on("mouseleave", mouseleave_handler);
	let if_block = /*expandable*/ ctx[3] && /*expandedRows*/ ctx[21][/*row*/ ctx[52].id] && create_if_block$y(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(tablerow.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(tablerow, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablerow_changes = {};
			if (dirty[0] & /*sorting, sortedRows, rows*/ 8454145) tablerow_changes.id = "row-" + /*row*/ ctx[52].id;

			if (dirty[0] & /*selectedRowIds, sorting, sortedRows, rows, expandedRows, expandable, parentRowId*/ 10813453) tablerow_changes.class = "" + ((/*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[52].id)
			? "bx--data-table--selected"
			: "") + " " + (/*expandedRows*/ ctx[21][/*row*/ ctx[52].id]
			? "bx--expandable-row"
			: "") + " " + (/*expandable*/ ctx[3] ? "bx--parent-row" : "") + " " + (/*expandable*/ ctx[3] && /*parentRowId*/ ctx[18] === /*row*/ ctx[52].id
			? "bx--expandable-row--hover"
			: ""));

			if (dirty[0] & /*sorting, sortedRows, rows, headers, radio, selectedRowIds, selectable, expandedRows, expandedRowIds, expandable*/ 10555455 | dirty[1] & /*$$scope*/ 131072) {
				tablerow_changes.$$scope = { dirty, ctx };
			}

			tablerow.$set(tablerow_changes);

			if (/*expandable*/ ctx[3] && /*expandedRows*/ ctx[21][/*row*/ ctx[52].id]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*expandable, expandedRows, sorting, sortedRows, rows*/ 10551305) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$y(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(tablerow.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(tablerow.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(tablerow, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (275:4) <TableBody>
function create_default_slot_2$1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;

	let each_value = /*sorting*/ ctx[16]
	? /*sortedRows*/ ctx[23]
	: /*rows*/ ctx[0];

	const get_key = ctx => /*row*/ ctx[52].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$4(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$4(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*parentRowId, sorting, sortedRows, rows, headers, expandable, expandedRows, selectedRowIds, dispatch, radio, selectable, expandedRowIds*/ 77926463 | dirty[1] & /*$$scope*/ 131072) {
				each_value = /*sorting*/ ctx[16]
				? /*sortedRows*/ ctx[23]
				: /*rows*/ ctx[0];

				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$4, each_1_anchor, get_each_context$4);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (191:2) <Table     zebra="{zebra}"     size="{size}"     stickyHeader="{stickyHeader}"     sortable="{sortable}"   >
function create_default_slot_1$3(ctx) {
	let tablehead;
	let t;
	let tablebody;
	let current;

	tablehead = new TableHead({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	tablebody = new TableBody({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablehead.$$.fragment);
			t = space();
			create_component(tablebody.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablehead, target, anchor);
			insert(target, t, anchor);
			mount_component(tablebody, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablehead_changes = {};

			if (dirty[0] & /*headers, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, selectedRowIds, rows, batchSelection, radio, selectable, expanded, expandedRowIds, batchExpansion, expandable*/ 22722623 | dirty[1] & /*$$scope*/ 131072) {
				tablehead_changes.$$scope = { dirty, ctx };
			}

			tablehead.$set(tablehead_changes);
			const tablebody_changes = {};

			if (dirty[0] & /*sorting, sortedRows, rows, parentRowId, headers, expandable, expandedRows, selectedRowIds, radio, selectable, expandedRowIds*/ 10817599 | dirty[1] & /*$$scope*/ 131072) {
				tablebody_changes.$$scope = { dirty, ctx };
			}

			tablebody.$set(tablebody_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablehead.$$.fragment, local);
			transition_in(tablebody.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablehead.$$.fragment, local);
			transition_out(tablebody.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablehead, detaching);
			if (detaching) detach(t);
			destroy_component(tablebody, detaching);
		}
	};
}

// (189:0) <TableContainer title="{title}" description="{description}" {...$$restProps}>
function create_default_slot$6(ctx) {
	let t;
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[34].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[48], null);

	table = new Table({
			props: {
				zebra: /*zebra*/ ctx[9],
				size: /*size*/ ctx[6],
				stickyHeader: /*stickyHeader*/ ctx[14],
				sortable: /*sortable*/ ctx[10],
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			if (default_slot) default_slot.c();
			t = space();
			create_component(table.$$.fragment);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			insert(target, t, anchor);
			mount_component(table, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[1] & /*$$scope*/ 131072) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[48], dirty, null, null);
				}
			}

			const table_changes = {};
			if (dirty[0] & /*zebra*/ 512) table_changes.zebra = /*zebra*/ ctx[9];
			if (dirty[0] & /*size*/ 64) table_changes.size = /*size*/ ctx[6];
			if (dirty[0] & /*stickyHeader*/ 16384) table_changes.stickyHeader = /*stickyHeader*/ ctx[14];
			if (dirty[0] & /*sortable*/ 1024) table_changes.sortable = /*sortable*/ ctx[10];

			if (dirty[0] & /*sorting, sortedRows, rows, parentRowId, headers, expandable, expandedRows, selectedRowIds, radio, selectable, expandedRowIds, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, batchSelection, expanded, batchExpansion*/ 33536063 | dirty[1] & /*$$scope*/ 131072) {
				table_changes.$$scope = { dirty, ctx };
			}

			table.$set(table_changes);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t);
			destroy_component(table, detaching);
		}
	};
}

function create_fragment$V(ctx) {
	let tablecontainer;
	let current;

	const tablecontainer_spread_levels = [
		{ title: /*title*/ ctx[7] },
		{ description: /*description*/ ctx[8] },
		/*$$restProps*/ ctx[30]
	];

	let tablecontainer_props = {
		$$slots: { default: [create_default_slot$6] },
		$$scope: { ctx }
	};

	for (let i = 0; i < tablecontainer_spread_levels.length; i += 1) {
		tablecontainer_props = assign(tablecontainer_props, tablecontainer_spread_levels[i]);
	}

	tablecontainer = new TableContainer({ props: tablecontainer_props });

	return {
		c() {
			create_component(tablecontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecontainer, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecontainer_changes = (dirty[0] & /*title, description, $$restProps*/ 1073742208)
			? get_spread_update(tablecontainer_spread_levels, [
					dirty[0] & /*title*/ 128 && { title: /*title*/ ctx[7] },
					dirty[0] & /*description*/ 256 && { description: /*description*/ ctx[8] },
					dirty[0] & /*$$restProps*/ 1073741824 && get_spread_object(/*$$restProps*/ ctx[30])
				])
			: {};

			if (dirty[0] & /*zebra, size, stickyHeader, sortable, sorting, sortedRows, rows, parentRowId, headers, expandable, expandedRows, selectedRowIds, radio, selectable, expandedRowIds, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, batchSelection, expanded, batchExpansion*/ 33554047 | dirty[1] & /*$$scope*/ 131072) {
				tablecontainer_changes.$$scope = { dirty, ctx };
			}

			tablecontainer.$set(tablecontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecontainer, detaching);
		}
	};
}

function instance$U($$self, $$props, $$invalidate) {
	let expandedRows;
	let indeterminate;
	let headerKeys;
	let sortedRows;
	let ascending;
	let sortKey;
	let sorting;

	const omit_props_names = [
		"headers","rows","size","title","description","zebra","sortable","expandable","batchExpansion","expandedRowIds","radio","selectable","batchSelection","selectedRowIds","stickyHeader"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $headerItems;
	let $sortHeader;
	let $thKeys;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { headers = [] } = $$props;
	let { rows = [] } = $$props;
	let { size = undefined } = $$props;
	let { title = "" } = $$props;
	let { description = "" } = $$props;
	let { zebra = false } = $$props;
	let { sortable = false } = $$props;
	let { expandable = false } = $$props;
	let { batchExpansion = false } = $$props;
	let { expandedRowIds = [] } = $$props;
	let { radio = false } = $$props;
	let { selectable = false } = $$props;
	let { batchSelection = false } = $$props;
	let { selectedRowIds = [] } = $$props;
	let { stickyHeader = false } = $$props;

	const sortDirectionMap = {
		none: "ascending",
		ascending: "descending",
		descending: "none"
	};

	const dispatch = createEventDispatcher();
	const batchSelectedIds = writable(false);
	const tableSortable = writable(sortable);

	const sortHeader = writable({
		id: null,
		key: null,
		sort: undefined,
		sortDirection: "none"
	});

	component_subscribe($$self, sortHeader, value => $$invalidate(15, $sortHeader = value));
	const headerItems = writable([]);
	component_subscribe($$self, headerItems, value => $$invalidate(49, $headerItems = value));
	const thKeys = derived(headerItems, () => headers.map(({ key }, i) => ({ key, id: $headerItems[i] })).reduce((a, c) => ({ ...a, [c.key]: c.id }), {}));
	component_subscribe($$self, thKeys, value => $$invalidate(24, $thKeys = value));

	setContext("DataTable", {
		sortHeader,
		tableSortable,
		batchSelectedIds,
		resetSelectedRowIds: () => {
			$$invalidate(19, selectAll = false);
			$$invalidate(2, selectedRowIds = []);
			if (refSelectAll) $$invalidate(20, refSelectAll.checked = false, refSelectAll);
		},
		add: id => {
			headerItems.update(_ => [..._, id]);
		}
	});

	let expanded = false;
	let parentRowId = null;
	let selectAll = false;
	let refSelectAll = null;

	const click_handler = () => {
		$$invalidate(17, expanded = !expanded);
		$$invalidate(1, expandedRowIds = expanded ? rows.map(row => row.id) : []);
		dispatch("click:header--expand", { expanded });
	};

	function inlinecheckbox_ref_binding(value) {
		refSelectAll = value;
		$$invalidate(20, refSelectAll);
	}

	const change_handler = e => {
		if (indeterminate) {
			e.target.checked = false;
			$$invalidate(19, selectAll = false);
			$$invalidate(2, selectedRowIds = []);
			return;
		}

		if (e.target.checked) {
			$$invalidate(2, selectedRowIds = rows.map(row => row.id));
		} else {
			$$invalidate(2, selectedRowIds = []);
		}
	};

	const click_handler_1 = header => {
		dispatch("click", { header });
		let active = header.key === $sortHeader.key;
		let currentSortDirection = active ? $sortHeader.sortDirection : "none";
		let sortDirection = sortDirectionMap[currentSortDirection];
		dispatch("click:header", { header, sortDirection });

		sortHeader.set({
			id: sortDirection === "none" ? null : $thKeys[header.key],
			key: header.key,
			sort: header.sort,
			sortDirection
		});
	};

	const click_handler_2 = row => {
		const rowExpanded = !!expandedRows[row.id];

		$$invalidate(1, expandedRowIds = rowExpanded
		? expandedRowIds.filter(id => id !== row.id)
		: [...expandedRowIds, row.id]);

		dispatch("click:row--expand", { row, expanded: !rowExpanded });
	};

	const change_handler_1 = row => {
		$$invalidate(2, selectedRowIds = [row.id]);
	};

	const change_handler_2 = row => {
		if (selectedRowIds.includes(row.id)) {
			$$invalidate(2, selectedRowIds = selectedRowIds.filter(id => id !== row.id));
		} else {
			$$invalidate(2, selectedRowIds = [...selectedRowIds, row.id]);
		}
	};

	const click_handler_3 = (row, cell) => {
		dispatch("click", { row, cell });
		dispatch("click:cell", cell);
	};

	const click_handler_4 = row => {
		dispatch("click", { row });
		dispatch("click:row", row);
	};

	const mouseenter_handler = row => {
		dispatch("mouseenter:row", row);
	};

	const mouseleave_handler = row => {
		dispatch("mouseleave:row", row);
	};

	const mouseenter_handler_1 = row => {
		$$invalidate(18, parentRowId = row.id);
	};

	const mouseleave_handler_1 = () => {
		$$invalidate(18, parentRowId = null);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(30, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("headers" in $$new_props) $$invalidate(5, headers = $$new_props.headers);
		if ("rows" in $$new_props) $$invalidate(0, rows = $$new_props.rows);
		if ("size" in $$new_props) $$invalidate(6, size = $$new_props.size);
		if ("title" in $$new_props) $$invalidate(7, title = $$new_props.title);
		if ("description" in $$new_props) $$invalidate(8, description = $$new_props.description);
		if ("zebra" in $$new_props) $$invalidate(9, zebra = $$new_props.zebra);
		if ("sortable" in $$new_props) $$invalidate(10, sortable = $$new_props.sortable);
		if ("expandable" in $$new_props) $$invalidate(3, expandable = $$new_props.expandable);
		if ("batchExpansion" in $$new_props) $$invalidate(11, batchExpansion = $$new_props.batchExpansion);
		if ("expandedRowIds" in $$new_props) $$invalidate(1, expandedRowIds = $$new_props.expandedRowIds);
		if ("radio" in $$new_props) $$invalidate(12, radio = $$new_props.radio);
		if ("selectable" in $$new_props) $$invalidate(4, selectable = $$new_props.selectable);
		if ("batchSelection" in $$new_props) $$invalidate(13, batchSelection = $$new_props.batchSelection);
		if ("selectedRowIds" in $$new_props) $$invalidate(2, selectedRowIds = $$new_props.selectedRowIds);
		if ("stickyHeader" in $$new_props) $$invalidate(14, stickyHeader = $$new_props.stickyHeader);
		if ("$$scope" in $$new_props) $$invalidate(48, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*expandedRowIds*/ 2) {
			 $$invalidate(21, expandedRows = expandedRowIds.reduce((a, id) => ({ ...a, [id]: true }), {}));
		}

		if ($$self.$$.dirty[0] & /*selectedRowIds*/ 4) {
			 batchSelectedIds.set(selectedRowIds);
		}

		if ($$self.$$.dirty[0] & /*headers*/ 32) {
			 $$invalidate(31, headerKeys = headers.map(({ key }) => key));
		}

		if ($$self.$$.dirty[0] & /*rows*/ 1 | $$self.$$.dirty[1] & /*headerKeys*/ 1) {
			 $$invalidate(0, rows = rows.map(row => ({
				...row,
				cells: headerKeys.map(key => ({ key, value: row[key] }))
			})));
		}

		if ($$self.$$.dirty[0] & /*selectedRowIds, rows*/ 5) {
			 $$invalidate(22, indeterminate = selectedRowIds.length > 0 && selectedRowIds.length < rows.length);
		}

		if ($$self.$$.dirty[0] & /*batchExpansion*/ 2048) {
			 if (batchExpansion) $$invalidate(3, expandable = true);
		}

		if ($$self.$$.dirty[0] & /*radio, batchSelection*/ 12288) {
			 if (radio || batchSelection) $$invalidate(4, selectable = true);
		}

		if ($$self.$$.dirty[0] & /*sortable*/ 1024) {
			 tableSortable.set(sortable);
		}

		if ($$self.$$.dirty[0] & /*rows*/ 1) {
			 $$invalidate(23, sortedRows = rows);
		}

		if ($$self.$$.dirty[0] & /*$sortHeader*/ 32768) {
			 $$invalidate(32, ascending = $sortHeader.sortDirection === "ascending");
		}

		if ($$self.$$.dirty[0] & /*$sortHeader*/ 32768) {
			 $$invalidate(33, sortKey = $sortHeader.key);
		}

		if ($$self.$$.dirty[0] & /*sortable*/ 1024 | $$self.$$.dirty[1] & /*sortKey*/ 4) {
			 $$invalidate(16, sorting = sortable && sortKey != null);
		}

		if ($$self.$$.dirty[0] & /*sorting, $sortHeader, rows*/ 98305 | $$self.$$.dirty[1] & /*ascending, sortKey*/ 6) {
			 if (sorting) {
				if ($sortHeader.sortDirection === "none") {
					$$invalidate(23, sortedRows = rows);
				} else {
					$$invalidate(23, sortedRows = [...rows].sort((a, b) => {
						const itemA = ascending ? a[sortKey] : b[sortKey];
						const itemB = ascending ? b[sortKey] : a[sortKey];
						if ($sortHeader.sort) return $sortHeader.sort(itemA, itemB);
						if (typeof itemA === "number" && typeof itemB === "number") return itemA - itemB;
						return itemA.toString().localeCompare(itemB.toString(), "en", { numeric: true });
					}));
				}
			}
		}
	};

	return [
		rows,
		expandedRowIds,
		selectedRowIds,
		expandable,
		selectable,
		headers,
		size,
		title,
		description,
		zebra,
		sortable,
		batchExpansion,
		radio,
		batchSelection,
		stickyHeader,
		$sortHeader,
		sorting,
		expanded,
		parentRowId,
		selectAll,
		refSelectAll,
		expandedRows,
		indeterminate,
		sortedRows,
		$thKeys,
		sortDirectionMap,
		dispatch,
		sortHeader,
		headerItems,
		thKeys,
		$$restProps,
		headerKeys,
		ascending,
		sortKey,
		slots,
		click_handler,
		inlinecheckbox_ref_binding,
		change_handler,
		click_handler_1,
		click_handler_2,
		change_handler_1,
		change_handler_2,
		click_handler_3,
		click_handler_4,
		mouseenter_handler,
		mouseleave_handler,
		mouseenter_handler_1,
		mouseleave_handler_1,
		$$scope
	];
}

class DataTable extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$U,
			create_fragment$V,
			safe_not_equal,
			{
				headers: 5,
				rows: 0,
				size: 6,
				title: 7,
				description: 8,
				zebra: 9,
				sortable: 10,
				expandable: 3,
				batchExpansion: 11,
				expandedRowIds: 1,
				radio: 12,
				selectable: 4,
				batchSelection: 13,
				selectedRowIds: 2,
				stickyHeader: 14
			},
			[-1, -1]
		);
	}
}

/* src/DataTable/DataTableSkeleton.svelte generated by Svelte v3.32.1 */

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_2$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

// (49:2) {#if showHeader}
function create_if_block_1$a(ctx) {
	let div2;
	let div0;
	let t;
	let div1;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t = space();
			div1 = element("div");
			toggle_class(div0, "bx--data-table-header__title", true);
			toggle_class(div1, "bx--data-table-header__description", true);
			toggle_class(div2, "bx--data-table-header", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t);
			append(div2, div1);
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (55:2) {#if showToolbar}
function create_if_block$z(ctx) {
	let section;
	let div;
	let span;

	return {
		c() {
			section = element("section");
			div = element("div");
			span = element("span");
			toggle_class(span, "bx--skeleton", true);
			toggle_class(span, "bx--btn", true);
			toggle_class(span, "bx--btn--sm", true);
			toggle_class(div, "bx--toolbar-content", true);
			attr(section, "aria-label", "data table toolbar");
			toggle_class(section, "bx--table-toolbar", true);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div);
			append(div, span);
		},
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

// (79:8) {#each cols as col (col)}
function create_each_block_3(key_1, ctx) {
	let th;
	let t_value = (/*values*/ ctx[5][/*col*/ ctx[17]] || "") + "";
	let t;

	return {
		key: key_1,
		first: null,
		c() {
			th = element("th");
			t = text(t_value);
			this.first = th;
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, t);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*values, cols*/ 96 && t_value !== (t_value = (/*values*/ ctx[5][/*col*/ ctx[17]] || "") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (86:8) {#each cols as col (col)}
function create_each_block_2$1(key_1, ctx) {
	let td;

	return {
		key: key_1,
		first: null,
		c() {
			td = element("td");
			td.innerHTML = `<span></span>`;
			this.first = td;
		},
		m(target, anchor) {
			insert(target, td, anchor);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(td);
		}
	};
}

// (92:10) {#each cols as col (col)}
function create_each_block_1$1(key_1, ctx) {
	let td;

	return {
		key: key_1,
		first: null,
		c() {
			td = element("td");
			this.first = td;
		},
		m(target, anchor) {
			insert(target, td, anchor);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(td);
		}
	};
}

// (90:6) {#each Array.from({ length: rows - 1 }, (_, i) => i) as row (row)}
function create_each_block$5(key_1, ctx) {
	let tr;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t;
	let each_value_1 = /*cols*/ ctx[6];
	const get_key = ctx => /*col*/ ctx[17];

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1$1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$1(key));
	}

	return {
		key: key_1,
		first: null,
		c() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			this.first = tr;
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append(tr, t);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*cols*/ 64) {
				each_value_1 = /*cols*/ ctx[6];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 0, ctx, each_value_1, each_1_lookup, tr, destroy_block, create_each_block_1$1, t, get_each_context_1$1);
			}
		},
		d(detaching) {
			if (detaching) detach(tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function create_fragment$W(ctx) {
	let div;
	let t0;
	let t1;
	let table;
	let thead;
	let tr0;
	let each_blocks_2 = [];
	let each0_lookup = new Map();
	let t2;
	let tbody;
	let tr1;
	let each_blocks_1 = [];
	let each1_lookup = new Map();
	let t3;
	let each_blocks = [];
	let each2_lookup = new Map();
	let mounted;
	let dispose;
	let if_block0 = /*showHeader*/ ctx[3] && create_if_block_1$a();
	let if_block1 = /*showToolbar*/ ctx[4] && create_if_block$z();
	let each_value_3 = /*cols*/ ctx[6];
	const get_key = ctx => /*col*/ ctx[17];

	for (let i = 0; i < each_value_3.length; i += 1) {
		let child_ctx = get_each_context_3(ctx, each_value_3, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_2[i] = create_each_block_3(key, child_ctx));
	}

	let each_value_2 = /*cols*/ ctx[6];
	const get_key_1 = ctx => /*col*/ ctx[17];

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2$1(ctx, each_value_2, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks_1[i] = create_each_block_2$1(key));
	}

	let each_value = Array.from({ length: /*rows*/ ctx[0] - 1 }, func$2);
	const get_key_2 = ctx => /*row*/ ctx[14];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$5(ctx, each_value, i);
		let key = get_key_2(child_ctx);
		each2_lookup.set(key, each_blocks[i] = create_each_block$5(key, child_ctx));
	}

	let div_levels = [/*$$restProps*/ ctx[7]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			table = element("table");
			thead = element("thead");
			tr0 = element("tr");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t2 = space();
			tbody = element("tbody");
			tr1 = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(table, "bx--skeleton", true);
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[1] === "compact");
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[1] === "short");
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[1] === "tall");
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[2]);
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--data-table-container", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			append(div, table);
			append(table, thead);
			append(thead, tr0);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(tr0, null);
			}

			append(table, t2);
			append(table, tbody);
			append(tbody, tr1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr1, null);
			}

			append(tbody, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			if (!mounted) {
				dispose = [
					listen(table, "click", /*click_handler*/ ctx[10]),
					listen(table, "mouseover", /*mouseover_handler*/ ctx[11]),
					listen(table, "mouseenter", /*mouseenter_handler*/ ctx[12]),
					listen(table, "mouseleave", /*mouseleave_handler*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*showHeader*/ ctx[3]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_1$a();
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*showToolbar*/ ctx[4]) {
				if (if_block1) ; else {
					if_block1 = create_if_block$z();
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*values, cols*/ 96) {
				each_value_3 = /*cols*/ ctx[6];
				each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key, 1, ctx, each_value_3, each0_lookup, tr0, destroy_block, create_each_block_3, null, get_each_context_3);
			}

			if (dirty & /*cols*/ 64) {
				each_value_2 = /*cols*/ ctx[6];
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key_1, 0, ctx, each_value_2, each1_lookup, tr1, destroy_block, create_each_block_2$1, null, get_each_context_2$1);
			}

			if (dirty & /*cols, rows*/ 65) {
				each_value = Array.from({ length: /*rows*/ ctx[0] - 1 }, func$2);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_2, 1, ctx, each_value, each2_lookup, tbody, destroy_block, create_each_block$5, null, get_each_context$5);
			}

			if (dirty & /*size*/ 2) {
				toggle_class(table, "bx--data-table--compact", /*size*/ ctx[1] === "compact");
			}

			if (dirty & /*size*/ 2) {
				toggle_class(table, "bx--data-table--short", /*size*/ ctx[1] === "short");
			}

			if (dirty & /*size*/ 2) {
				toggle_class(table, "bx--data-table--tall", /*size*/ ctx[1] === "tall");
			}

			if (dirty & /*zebra*/ 4) {
				toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[2]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--data-table-container", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].d();
			}

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$2 = (_, i) => i;

function instance$V($$self, $$props, $$invalidate) {
	let values;
	let cols;
	const omit_props_names = ["columns","rows","size","zebra","showHeader","headers","showToolbar"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { columns = 5 } = $$props;
	let { rows = 5 } = $$props;
	let { size = undefined } = $$props;
	let { zebra = false } = $$props;
	let { showHeader = true } = $$props;
	let { headers = [] } = $$props;
	let { showToolbar = true } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("columns" in $$new_props) $$invalidate(8, columns = $$new_props.columns);
		if ("rows" in $$new_props) $$invalidate(0, rows = $$new_props.rows);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("zebra" in $$new_props) $$invalidate(2, zebra = $$new_props.zebra);
		if ("showHeader" in $$new_props) $$invalidate(3, showHeader = $$new_props.showHeader);
		if ("headers" in $$new_props) $$invalidate(9, headers = $$new_props.headers);
		if ("showToolbar" in $$new_props) $$invalidate(4, showToolbar = $$new_props.showToolbar);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*headers*/ 512) {
			 $$invalidate(5, values = headers.map(header => header.value !== undefined ? header.value : header));
		}

		if ($$self.$$.dirty & /*headers, columns*/ 768) {
			 $$invalidate(6, cols = Array.from(
				{
					length: headers.length > 0 ? headers.length : columns
				},
				(_, i) => i
			));
		}
	};

	return [
		rows,
		size,
		zebra,
		showHeader,
		showToolbar,
		values,
		cols,
		$$restProps,
		columns,
		headers,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class DataTableSkeleton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$V, create_fragment$W, safe_not_equal, {
			columns: 8,
			rows: 0,
			size: 1,
			zebra: 2,
			showHeader: 3,
			headers: 9,
			showToolbar: 4
		});
	}
}

/* src/DataTable/Toolbar.svelte generated by Svelte v3.32.1 */

function create_fragment$X(ctx) {
	let section;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let section_levels = [{ "aria-label": "data table toolbar" }, /*$$restProps*/ ctx[2]];
	let section_data = {};

	for (let i = 0; i < section_levels.length; i += 1) {
		section_data = assign(section_data, section_levels[i]);
	}

	return {
		c() {
			section = element("section");
			if (default_slot) default_slot.c();
			set_attributes(section, section_data);
			toggle_class(section, "bx--table-toolbar", true);
			toggle_class(section, "bx--table-toolbar--small", /*size*/ ctx[0] === "sm");
			toggle_class(section, "bx--table-toolbar--normal", /*size*/ ctx[0] === "default");
		},
		m(target, anchor) {
			insert(target, section, anchor);

			if (default_slot) {
				default_slot.m(section, null);
			}

			/*section_binding*/ ctx[5](section);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(section, section_data = get_spread_update(section_levels, [
				{ "aria-label": "data table toolbar" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(section, "bx--table-toolbar", true);
			toggle_class(section, "bx--table-toolbar--small", /*size*/ ctx[0] === "sm");
			toggle_class(section, "bx--table-toolbar--normal", /*size*/ ctx[0] === "default");
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (default_slot) default_slot.d(detaching);
			/*section_binding*/ ctx[5](null);
		}
	};
}

function instance$W($$self, $$props, $$invalidate) {
	const omit_props_names = ["size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = "default" } = $$props;
	let ref = null;
	const overflowVisible = writable(false);

	setContext("Toolbar", {
		overflowVisible,
		setOverflowVisible: visible => {
			overflowVisible.set(visible);
			if (ref) $$invalidate(1, ref.style.overflow = visible ? "visible" : "inherit", ref);
		}
	});

	function section_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [size, ref, $$restProps, $$scope, slots, section_binding];
}

class Toolbar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$W, create_fragment$X, safe_not_equal, { size: 0 });
	}
}

/* src/DataTable/ToolbarContent.svelte generated by Svelte v3.32.1 */

function create_fragment$Y(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--toolbar-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$X($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class ToolbarContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$X, create_fragment$Y, safe_not_equal, {});
	}
}

/* node_modules/carbon-icons-svelte/lib/Search16/Search16.svelte generated by Svelte v3.32.1 */

function create_if_block$A(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$h(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$A(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$A(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$Z(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$h(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Search16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M15,14.3L10.7,10c1.9-2.3,1.6-5.8-0.7-7.7S4.2,0.7,2.3,3S0.7,8.8,3,10.7c2,1.7,5,1.7,7,0l4.3,4.3L15,14.3z M2,6.5\tC2,4,4,2,6.5,2S11,4,11,6.5S9,11,6.5,11S2,9,2,6.5z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Search16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$Y($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Search16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$Y, create_fragment$Z, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/Search/SearchSkeleton.svelte generated by Svelte v3.32.1 */

function create_fragment$_(ctx) {
	let div1;
	let span;
	let t;
	let div0;
	let mounted;
	let dispose;
	let div1_levels = [/*$$restProps*/ ctx[2]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t = space();
			div0 = element("div");
			toggle_class(span, "bx--label", true);
			toggle_class(div0, "bx--search-input", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--search--sm", /*size*/ ctx[1] === "sm" || /*small*/ ctx[0]);
			toggle_class(div1, "bx--search--lg", /*size*/ ctx[1] === "lg");
			toggle_class(div1, "bx--search--xl", /*size*/ ctx[1] === "xl");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[3]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--search--sm", /*size*/ ctx[1] === "sm" || /*small*/ ctx[0]);
			toggle_class(div1, "bx--search--lg", /*size*/ ctx[1] === "lg");
			toggle_class(div1, "bx--search--xl", /*size*/ ctx[1] === "xl");
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$Z($$self, $$props, $$invalidate) {
	const omit_props_names = ["small","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { small = false } = $$props;
	let { size = "xl" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("small" in $$new_props) $$invalidate(0, small = $$new_props.small);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
	};

	return [
		small,
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class SearchSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$Z, create_fragment$_, safe_not_equal, { small: 0, size: 1 });
	}
}

/* src/Search/Search.svelte generated by Svelte v3.32.1 */

function create_else_block$e(ctx) {
	let div;
	let search16;
	let t0;
	let label;
	let t1;
	let label_id_value;
	let t2;
	let input;
	let input_autofocus_value;
	let t3;
	let button;
	let switch_instance;
	let div_aria_labelledby_value;
	let current;
	let mounted;
	let dispose;
	search16 = new Search16({ props: { class: "bx--search-magnifier" } });

	let input_levels = [
		{ role: "searchbox" },
		{
			autofocus: input_autofocus_value = /*autofocus*/ ctx[10] === true ? true : undefined
		},
		{ autocomplete: /*autocomplete*/ ctx[9] },
		{ disabled: /*disabled*/ ctx[6] },
		{ id: /*id*/ ctx[13] },
		{ placeholder: /*placeholder*/ ctx[8] },
		{ type: /*type*/ ctx[7] },
		{ value: /*value*/ ctx[0] },
		/*$$restProps*/ ctx[15]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	var switch_value = /*size*/ ctx[3] === "xl" ? Close20 : Close16;

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			div = element("div");
			create_component(search16.$$.fragment);
			t0 = space();
			label = element("label");
			t1 = text(/*labelText*/ ctx[12]);
			t2 = space();
			input = element("input");
			t3 = space();
			button = element("button");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			attr(label, "id", label_id_value = "" + (/*id*/ ctx[13] + "-search"));
			attr(label, "for", /*id*/ ctx[13]);
			toggle_class(label, "bx--label", true);
			set_attributes(input, input_data);
			toggle_class(input, "bx--search-input", true);
			attr(button, "type", "button");
			attr(button, "aria-label", /*closeButtonLabelText*/ ctx[11]);
			button.disabled = /*disabled*/ ctx[6];
			toggle_class(button, "bx--search-close", true);
			toggle_class(button, "bx--search-close--hidden", /*value*/ ctx[0] === "");
			attr(div, "role", "search");
			attr(div, "aria-labelledby", div_aria_labelledby_value = "" + (/*id*/ ctx[13] + "-search"));
			toggle_class(div, "bx--search", true);
			toggle_class(div, "bx--search--light", /*light*/ ctx[5]);
			toggle_class(div, "bx--search--disabled", /*disabled*/ ctx[6]);
			toggle_class(div, "bx--search--sm", /*size*/ ctx[3] === "sm" || /*small*/ ctx[2]);
			toggle_class(div, "bx--search--lg", /*size*/ ctx[3] === "lg");
			toggle_class(div, "bx--search--xl", /*size*/ ctx[3] === "xl");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(search16, div, null);
			append(div, t0);
			append(div, label);
			append(label, t1);
			append(div, t2);
			append(div, input);
			input.value = input_data.value;
			/*input_binding*/ ctx[26](input);
			append(div, t3);
			append(div, button);

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[17]),
					listen(input, "input", /*input_handler*/ ctx[18]),
					listen(input, "input", /*input_handler_1*/ ctx[27]),
					listen(input, "focus", /*focus_handler*/ ctx[19]),
					listen(input, "blur", /*blur_handler*/ ctx[20]),
					listen(input, "keydown", /*keydown_handler*/ ctx[21]),
					listen(input, "keydown", /*keydown_handler_1*/ ctx[28]),
					listen(button, "click", /*click_handler_1*/ ctx[16]),
					listen(button, "click", /*click_handler_2*/ ctx[29])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*labelText*/ 4096) set_data(t1, /*labelText*/ ctx[12]);

			if (!current || dirty & /*id*/ 8192 && label_id_value !== (label_id_value = "" + (/*id*/ ctx[13] + "-search"))) {
				attr(label, "id", label_id_value);
			}

			if (!current || dirty & /*id*/ 8192) {
				attr(label, "for", /*id*/ ctx[13]);
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ role: "searchbox" },
				(!current || dirty & /*autofocus*/ 1024 && input_autofocus_value !== (input_autofocus_value = /*autofocus*/ ctx[10] === true ? true : undefined)) && { autofocus: input_autofocus_value },
				(!current || dirty & /*autocomplete*/ 512) && { autocomplete: /*autocomplete*/ ctx[9] },
				(!current || dirty & /*disabled*/ 64) && { disabled: /*disabled*/ ctx[6] },
				(!current || dirty & /*id*/ 8192) && { id: /*id*/ ctx[13] },
				(!current || dirty & /*placeholder*/ 256) && { placeholder: /*placeholder*/ ctx[8] },
				(!current || dirty & /*type*/ 128) && { type: /*type*/ ctx[7] },
				(!current || dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) && { value: /*value*/ ctx[0] },
				dirty & /*$$restProps*/ 32768 && /*$$restProps*/ ctx[15]
			]));

			if ("value" in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--search-input", true);

			if (switch_value !== (switch_value = /*size*/ ctx[3] === "xl" ? Close20 : Close16)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			}

			if (!current || dirty & /*closeButtonLabelText*/ 2048) {
				attr(button, "aria-label", /*closeButtonLabelText*/ ctx[11]);
			}

			if (!current || dirty & /*disabled*/ 64) {
				button.disabled = /*disabled*/ ctx[6];
			}

			if (dirty & /*value*/ 1) {
				toggle_class(button, "bx--search-close--hidden", /*value*/ ctx[0] === "");
			}

			if (!current || dirty & /*id*/ 8192 && div_aria_labelledby_value !== (div_aria_labelledby_value = "" + (/*id*/ ctx[13] + "-search"))) {
				attr(div, "aria-labelledby", div_aria_labelledby_value);
			}

			if (dirty & /*light*/ 32) {
				toggle_class(div, "bx--search--light", /*light*/ ctx[5]);
			}

			if (dirty & /*disabled*/ 64) {
				toggle_class(div, "bx--search--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty & /*size, small*/ 12) {
				toggle_class(div, "bx--search--sm", /*size*/ ctx[3] === "sm" || /*small*/ ctx[2]);
			}

			if (dirty & /*size*/ 8) {
				toggle_class(div, "bx--search--lg", /*size*/ ctx[3] === "lg");
			}

			if (dirty & /*size*/ 8) {
				toggle_class(div, "bx--search--xl", /*size*/ ctx[3] === "xl");
			}
		},
		i(local) {
			if (current) return;
			transition_in(search16.$$.fragment, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(search16.$$.fragment, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(search16);
			/*input_binding*/ ctx[26](null);
			if (switch_instance) destroy_component(switch_instance);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (81:0) {#if skeleton}
function create_if_block$B(ctx) {
	let searchskeleton;
	let current;

	const searchskeleton_spread_levels = [
		{ small: /*small*/ ctx[2] },
		{ size: /*size*/ ctx[3] },
		/*$$restProps*/ ctx[15]
	];

	let searchskeleton_props = {};

	for (let i = 0; i < searchskeleton_spread_levels.length; i += 1) {
		searchskeleton_props = assign(searchskeleton_props, searchskeleton_spread_levels[i]);
	}

	searchskeleton = new SearchSkeleton({ props: searchskeleton_props });
	searchskeleton.$on("click", /*click_handler*/ ctx[22]);
	searchskeleton.$on("mouseover", /*mouseover_handler*/ ctx[23]);
	searchskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[24]);
	searchskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[25]);

	return {
		c() {
			create_component(searchskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(searchskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const searchskeleton_changes = (dirty & /*small, size, $$restProps*/ 32780)
			? get_spread_update(searchskeleton_spread_levels, [
					dirty & /*small*/ 4 && { small: /*small*/ ctx[2] },
					dirty & /*size*/ 8 && { size: /*size*/ ctx[3] },
					dirty & /*$$restProps*/ 32768 && get_spread_object(/*$$restProps*/ ctx[15])
				])
			: {};

			searchskeleton.$set(searchskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(searchskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(searchskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(searchskeleton, detaching);
		}
	};
}

function create_fragment$$(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$B, create_else_block$e];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[4]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$_($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"small","size","skeleton","light","disabled","value","type","placeholder","autocomplete","autofocus","closeButtonLabelText","labelText","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { small = false } = $$props;
	let { size = "xl" } = $$props;
	let { skeleton = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { value = "" } = $$props;
	let { type = "text" } = $$props;
	let { placeholder = "Search..." } = $$props;
	let { autocomplete = "off" } = $$props;
	let { autofocus = false } = $$props;
	let { closeButtonLabelText = "Clear search input" } = $$props;
	let { labelText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(0, value = target.value);
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === "Escape") {
			$$invalidate(0, value = "");
			dispatch("clear");
		}
	};

	const click_handler_2 = () => {
		$$invalidate(0, value = "");
		ref.focus();
		dispatch("clear");
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(15, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("small" in $$new_props) $$invalidate(2, small = $$new_props.small);
		if ("size" in $$new_props) $$invalidate(3, size = $$new_props.size);
		if ("skeleton" in $$new_props) $$invalidate(4, skeleton = $$new_props.skeleton);
		if ("light" in $$new_props) $$invalidate(5, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("type" in $$new_props) $$invalidate(7, type = $$new_props.type);
		if ("placeholder" in $$new_props) $$invalidate(8, placeholder = $$new_props.placeholder);
		if ("autocomplete" in $$new_props) $$invalidate(9, autocomplete = $$new_props.autocomplete);
		if ("autofocus" in $$new_props) $$invalidate(10, autofocus = $$new_props.autofocus);
		if ("closeButtonLabelText" in $$new_props) $$invalidate(11, closeButtonLabelText = $$new_props.closeButtonLabelText);
		if ("labelText" in $$new_props) $$invalidate(12, labelText = $$new_props.labelText);
		if ("id" in $$new_props) $$invalidate(13, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	return [
		value,
		ref,
		small,
		size,
		skeleton,
		light,
		disabled,
		type,
		placeholder,
		autocomplete,
		autofocus,
		closeButtonLabelText,
		labelText,
		id,
		dispatch,
		$$restProps,
		click_handler_1,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		keydown_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		input_binding,
		input_handler_1,
		keydown_handler_1,
		click_handler_2
	];
}

class Search extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$_, create_fragment$$, safe_not_equal, {
			small: 2,
			size: 3,
			skeleton: 4,
			light: 5,
			disabled: 6,
			value: 0,
			type: 7,
			placeholder: 8,
			autocomplete: 9,
			autofocus: 10,
			closeButtonLabelText: 11,
			labelText: 12,
			id: 13,
			ref: 1
		});
	}
}

/* src/DataTable/ToolbarSearch.svelte generated by Svelte v3.32.1 */

function create_fragment$10(ctx) {
	let div;
	let search;
	let updating_ref;
	let updating_value;
	let div_tabindex_value;
	let current;
	let mounted;
	let dispose;

	const search_spread_levels = [
		{ size: "sm" },
		{
			tabindex: /*expanded*/ ctx[1] ? /*tabindex*/ ctx[5] : "-1"
		},
		{ disabled: /*disabled*/ ctx[4] },
		/*$$restProps*/ ctx[7]
	];

	function search_ref_binding(value) {
		/*search_ref_binding*/ ctx[8].call(null, value);
	}

	function search_value_binding(value) {
		/*search_value_binding*/ ctx[9].call(null, value);
	}

	let search_props = {};

	for (let i = 0; i < search_spread_levels.length; i += 1) {
		search_props = assign(search_props, search_spread_levels[i]);
	}

	if (/*ref*/ ctx[2] !== void 0) {
		search_props.ref = /*ref*/ ctx[2];
	}

	if (/*value*/ ctx[0] !== void 0) {
		search_props.value = /*value*/ ctx[0];
	}

	search = new Search({ props: search_props });
	binding_callbacks.push(() => bind(search, "ref", search_ref_binding));
	binding_callbacks.push(() => bind(search, "value", search_value_binding));
	search.$on("clear", /*clear_handler*/ ctx[10]);
	search.$on("change", /*change_handler*/ ctx[11]);
	search.$on("input", /*input_handler*/ ctx[12]);
	search.$on("focus", /*focus_handler*/ ctx[13]);
	search.$on("blur", /*blur_handler*/ ctx[14]);
	search.$on("blur", /*blur_handler_1*/ ctx[15]);

	return {
		c() {
			div = element("div");
			create_component(search.$$.fragment);

			attr(div, "tabindex", div_tabindex_value = /*expanded*/ ctx[1] || /*disabled*/ ctx[4]
			? "-1"
			: /*tabindex*/ ctx[5]);

			toggle_class(div, "bx--toolbar-action", true);
			toggle_class(div, "bx--toolbar-search-container-active", /*expanded*/ ctx[1]);
			toggle_class(div, "bx--toolbar-search-container-expandable", !/*persistent*/ ctx[3]);
			toggle_class(div, "bx--toolbar-search-container-persistent", /*persistent*/ ctx[3]);
			toggle_class(div, "bx--toolbar-search-container-disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(search, div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*expandSearch*/ ctx[6]),
					listen(div, "focus", /*expandSearch*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const search_changes = (dirty & /*expanded, tabindex, disabled, $$restProps*/ 178)
			? get_spread_update(search_spread_levels, [
					search_spread_levels[0],
					dirty & /*expanded, tabindex*/ 34 && {
						tabindex: /*expanded*/ ctx[1] ? /*tabindex*/ ctx[5] : "-1"
					},
					dirty & /*disabled*/ 16 && { disabled: /*disabled*/ ctx[4] },
					dirty & /*$$restProps*/ 128 && get_spread_object(/*$$restProps*/ ctx[7])
				])
			: {};

			if (!updating_ref && dirty & /*ref*/ 4) {
				updating_ref = true;
				search_changes.ref = /*ref*/ ctx[2];
				add_flush_callback(() => updating_ref = false);
			}

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				search_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			search.$set(search_changes);

			if (!current || dirty & /*expanded, disabled, tabindex*/ 50 && div_tabindex_value !== (div_tabindex_value = /*expanded*/ ctx[1] || /*disabled*/ ctx[4]
			? "-1"
			: /*tabindex*/ ctx[5])) {
				attr(div, "tabindex", div_tabindex_value);
			}

			if (dirty & /*expanded*/ 2) {
				toggle_class(div, "bx--toolbar-search-container-active", /*expanded*/ ctx[1]);
			}

			if (dirty & /*persistent*/ 8) {
				toggle_class(div, "bx--toolbar-search-container-expandable", !/*persistent*/ ctx[3]);
			}

			if (dirty & /*persistent*/ 8) {
				toggle_class(div, "bx--toolbar-search-container-persistent", /*persistent*/ ctx[3]);
			}

			if (dirty & /*disabled*/ 16) {
				toggle_class(div, "bx--toolbar-search-container-disabled", /*disabled*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(search.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(search.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(search);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$$($$self, $$props, $$invalidate) {
	const omit_props_names = ["value","expanded","persistent","disabled","tabindex","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { value = "" } = $$props;
	let { expanded = false } = $$props;
	let { persistent = false } = $$props;
	let { disabled = false } = $$props;
	let { tabindex = "0" } = $$props;
	let { ref = null } = $$props;

	async function expandSearch() {
		if (disabled || persistent || expanded) return;
		$$invalidate(1, expanded = true);
		await tick();
		ref.focus();
	}

	function search_ref_binding(value) {
		ref = value;
		$$invalidate(2, ref);
	}

	function search_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	function clear_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	const blur_handler_1 = () => {
		$$invalidate(1, expanded = !persistent && !!value.length);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("expanded" in $$new_props) $$invalidate(1, expanded = $$new_props.expanded);
		if ("persistent" in $$new_props) $$invalidate(3, persistent = $$new_props.persistent);
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("ref" in $$new_props) $$invalidate(2, ref = $$new_props.ref);
	};

	return [
		value,
		expanded,
		ref,
		persistent,
		disabled,
		tabindex,
		expandSearch,
		$$restProps,
		search_ref_binding,
		search_value_binding,
		clear_handler,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		blur_handler_1
	];
}

class ToolbarSearch extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$$, create_fragment$10, safe_not_equal, {
			value: 0,
			expanded: 1,
			persistent: 3,
			disabled: 4,
			tabindex: 5,
			ref: 2
		});
	}
}

/* src/DataTable/ToolbarBatchActions.svelte generated by Svelte v3.32.1 */

function create_if_block$C(ctx) {
	let div2;
	let div0;
	let p;
	let span;
	let t0_value = /*formatTotalSelected*/ ctx[0](/*batchSelectedIds*/ ctx[1].length) + "";
	let t0;
	let t1;
	let div1;
	let t2;
	let button;
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	button = new Button({
			props: {
				class: "bx--batch-summary__cancel",
				tabindex: /*showActions*/ ctx[3] ? "0" : "-1",
				$$slots: { default: [create_default_slot$7] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*ctx*/ ctx[4].resetSelectedRowIds);
	let div2_levels = [/*$$restProps*/ ctx[5]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			p = element("p");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t2 = space();
			create_component(button.$$.fragment);
			toggle_class(p, "bx--batch-summary__para", true);
			toggle_class(div0, "bx--batch-summary", true);
			toggle_class(div1, "bx--action-list", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--batch-actions", true);
			toggle_class(div2, "bx--batch-actions--active", /*showActions*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, p);
			append(p, span);
			append(span, t0);
			append(div2, t1);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div1, t2);
			mount_component(button, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*formatTotalSelected, batchSelectedIds*/ 3) && t0_value !== (t0_value = /*formatTotalSelected*/ ctx[0](/*batchSelectedIds*/ ctx[1].length) + "")) set_data(t0, t0_value);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			const button_changes = {};
			if (dirty & /*showActions*/ 8) button_changes.tabindex = /*showActions*/ ctx[3] ? "0" : "-1";

			if (dirty & /*$$scope*/ 128) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]]));
			toggle_class(div2, "bx--batch-actions", true);
			toggle_class(div2, "bx--batch-actions--active", /*showActions*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (default_slot) default_slot.d(detaching);
			destroy_component(button);
		}
	};
}

// (49:6) <Button         class="bx--batch-summary__cancel"         tabindex="{showActions ? '0' : '-1'}"         on:click="{ctx.resetSelectedRowIds}"       >
function create_default_slot$7(ctx) {
	let t;

	return {
		c() {
			t = text("Cancel");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$11(ctx) {
	let if_block_anchor;
	let current;
	let if_block = !/*overflowVisible*/ ctx[2] && create_if_block$C(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*overflowVisible*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*overflowVisible*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$C(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$10($$self, $$props, $$invalidate) {
	let showActions;
	const omit_props_names = ["formatTotalSelected"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { formatTotalSelected = totalSelected => `${totalSelected} item${totalSelected === 1 ? "" : "s"} selected` } = $$props;
	let batchSelectedIds = [];
	const ctx = getContext("DataTable");

	const unsubscribe = ctx.batchSelectedIds.subscribe(value => {
		$$invalidate(1, batchSelectedIds = value);
	});

	let overflowVisible = false;
	const ctxToolbar = getContext("Toolbar");

	const unsubscribeOverflow = ctxToolbar.overflowVisible.subscribe(value => {
		$$invalidate(2, overflowVisible = value);
	});

	onMount(() => {
		return () => {
			unsubscribe();
			unsubscribeOverflow();
		};
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("formatTotalSelected" in $$new_props) $$invalidate(0, formatTotalSelected = $$new_props.formatTotalSelected);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*batchSelectedIds*/ 2) {
			 $$invalidate(3, showActions = batchSelectedIds.length > 0);
		}
	};

	return [
		formatTotalSelected,
		batchSelectedIds,
		overflowVisible,
		showActions,
		ctx,
		$$restProps,
		slots,
		$$scope
	];
}

class ToolbarBatchActions extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$10, create_fragment$11, safe_not_equal, { formatTotalSelected: 0 });
	}
}

/* node_modules/carbon-icons-svelte/lib/Settings16/Settings16.svelte generated by Svelte v3.32.1 */

function create_if_block$D(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$i(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$D(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$D(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$12(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$i(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Settings16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M13.5,8.4c0-0.1,0-0.3,0-0.4c0-0.1,0-0.3,0-0.4l1-0.8c0.4-0.3,0.4-0.9,0.2-1.3l-1.2-2C13.3,3.2,13,3,12.6,3\tc-0.1,0-0.2,0-0.3,0.1l-1.2,0.4c-0.2-0.1-0.4-0.3-0.7-0.4l-0.3-1.3C10.1,1.3,9.7,1,9.2,1H6.8c-0.5,0-0.9,0.3-1,0.8L5.6,3.1\tC5.3,3.2,5.1,3.3,4.9,3.4L3.7,3C3.6,3,3.5,3,3.4,3C3,3,2.7,3.2,2.5,3.5l-1.2,2C1.1,5.9,1.2,6.4,1.6,6.8l0.9,0.9c0,0.1,0,0.3,0,0.4\tc0,0.1,0,0.3,0,0.4L1.6,9.2c-0.4,0.3-0.5,0.9-0.2,1.3l1.2,2C2.7,12.8,3,13,3.4,13c0.1,0,0.2,0,0.3-0.1l1.2-0.4\tc0.2,0.1,0.4,0.3,0.7,0.4l0.3,1.3c0.1,0.5,0.5,0.8,1,0.8h2.4c0.5,0,0.9-0.3,1-0.8l0.3-1.3c0.2-0.1,0.4-0.2,0.7-0.4l1.2,0.4\tc0.1,0,0.2,0.1,0.3,0.1c0.4,0,0.7-0.2,0.9-0.5l1.1-2c0.2-0.4,0.2-0.9-0.2-1.3L13.5,8.4z M12.6,12l-1.7-0.6c-0.4,0.3-0.9,0.6-1.4,0.8\tL9.2,14H6.8l-0.4-1.8c-0.5-0.2-0.9-0.5-1.4-0.8L3.4,12l-1.2-2l1.4-1.2c-0.1-0.5-0.1-1.1,0-1.6L2.2,6l1.2-2l1.7,0.6\tC5.5,4.2,6,4,6.5,3.8L6.8,2h2.4l0.4,1.8c0.5,0.2,0.9,0.5,1.4,0.8L12.6,4l1.2,2l-1.4,1.2c0.1,0.5,0.1,1.1,0,1.6l1.4,1.2L12.6,12z");
			attr(path1, "d", "M8,11c-1.7,0-3-1.3-3-3s1.3-3,3-3s3,1.3,3,3C11,9.6,9.7,11,8,11C8,11,8,11,8,11z M8,6C6.9,6,6,6.8,6,7.9C6,7.9,6,8,6,8\tc0,1.1,0.8,2,1.9,2c0,0,0.1,0,0.1,0c1.1,0,2-0.8,2-1.9c0,0,0-0.1,0-0.1C10,6.9,9.2,6,8,6C8.1,6,8,6,8,6z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Settings16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$11($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Settings16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$11, create_fragment$12, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/OverflowMenuVertical16/OverflowMenuVertical16.svelte generated by Svelte v3.32.1 */

function create_if_block$E(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$j(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$E(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$E(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$13(ctx) {
	let svg;
	let circle0;
	let circle1;
	let circle2;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$j(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "OverflowMenuVertical16"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			circle2 = svg_element("circle");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(circle0, "cx", "16");
			attr(circle0, "cy", "8");
			attr(circle0, "r", "2");
			attr(circle1, "cx", "16");
			attr(circle1, "cy", "16");
			attr(circle1, "r", "2");
			attr(circle2, "cx", "16");
			attr(circle2, "cy", "24");
			attr(circle2, "r", "2");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, circle0);
			append(svg, circle1);
			append(svg, circle2);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "OverflowMenuVertical16"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$12($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class OverflowMenuVertical16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$12, create_fragment$13, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

const formatStyle = (style) => ["<style>", style, "</style>"].join("");

/* src/OverflowMenu/OverflowMenu.svelte generated by Svelte v3.32.1 */
const get_menu_slot_changes = dirty => ({});
const get_menu_slot_context = ctx => ({});

// (200:20)      
function fallback_block$k(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[8];

	function switch_props(ctx) {
		return {
			props: {
				"aria-label": /*iconDescription*/ ctx[10],
				title: /*iconDescription*/ ctx[10],
				class: "bx--overflow-menu__icon " + /*iconClass*/ ctx[9]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 1024) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[10];
			if (dirty[0] & /*iconDescription*/ 1024) switch_instance_changes.title = /*iconDescription*/ ctx[10];
			if (dirty[0] & /*iconClass*/ 512) switch_instance_changes.class = "bx--overflow-menu__icon " + /*iconClass*/ ctx[9];

			if (switch_value !== (switch_value = /*icon*/ ctx[8])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (208:2) {#if open}
function create_if_block$F(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[23].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			attr(ul, "role", "menu");
			attr(ul, "tabindex", "-1");
			attr(ul, "aria-label", /*ariaLabel*/ ctx[12]);
			attr(ul, "data-floating-menu-direction", /*direction*/ ctx[4]);
			toggle_class(ul, "bx--overflow-menu-options", true);
			toggle_class(ul, "bx--overflow-menu--flip", /*flipped*/ ctx[6]);
			toggle_class(ul, "bx--overflow-menu-options--open", /*open*/ ctx[0]);
			toggle_class(ul, "bx--overflow-menu-options--light", /*light*/ ctx[5]);
			toggle_class(ul, "bx--overflow-menu-options--sm", /*size*/ ctx[3] === "sm");
			toggle_class(ul, "bx--overflow-menu-options--xl", /*size*/ ctx[3] === "xl");
			toggle_class(ul, "menuOptionsClass", /*menuOptionsClass*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			/*ul_binding*/ ctx[30](ul);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 4194304) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[22], dirty, null, null);
				}
			}

			if (!current || dirty[0] & /*ariaLabel*/ 4096) {
				attr(ul, "aria-label", /*ariaLabel*/ ctx[12]);
			}

			if (!current || dirty[0] & /*direction*/ 16) {
				attr(ul, "data-floating-menu-direction", /*direction*/ ctx[4]);
			}

			if (dirty[0] & /*flipped*/ 64) {
				toggle_class(ul, "bx--overflow-menu--flip", /*flipped*/ ctx[6]);
			}

			if (dirty[0] & /*open*/ 1) {
				toggle_class(ul, "bx--overflow-menu-options--open", /*open*/ ctx[0]);
			}

			if (dirty[0] & /*light*/ 32) {
				toggle_class(ul, "bx--overflow-menu-options--light", /*light*/ ctx[5]);
			}

			if (dirty[0] & /*size*/ 8) {
				toggle_class(ul, "bx--overflow-menu-options--sm", /*size*/ ctx[3] === "sm");
			}

			if (dirty[0] & /*size*/ 8) {
				toggle_class(ul, "bx--overflow-menu-options--xl", /*size*/ ctx[3] === "xl");
			}

			if (dirty[0] & /*menuOptionsClass*/ 128) {
				toggle_class(ul, "menuOptionsClass", /*menuOptionsClass*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			/*ul_binding*/ ctx[30](null);
		}
	};
}

function create_fragment$14(ctx) {
	let html_tag;
	let html_anchor;
	let t0;
	let t1;
	let button;
	let t2;
	let current;
	let mounted;
	let dispose;
	const menu_slot_template = /*#slots*/ ctx[23].menu;
	const menu_slot = create_slot(menu_slot_template, ctx, /*$$scope*/ ctx[22], get_menu_slot_context);
	const menu_slot_or_fallback = menu_slot || fallback_block$k(ctx);
	let if_block = /*open*/ ctx[0] && create_if_block$F(ctx);

	let button_levels = [
		{ "aria-haspopup": "" },
		{ "aria-expanded": /*open*/ ctx[0] },
		{ "aria-label": /*ariaLabel*/ ctx[12] },
		{ id: /*id*/ ctx[11] },
		/*$$restProps*/ ctx[17]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			html_anchor = empty();
			t0 = space();
			t1 = space();
			button = element("button");
			if (menu_slot_or_fallback) menu_slot_or_fallback.c();
			t2 = space();
			if (if_block) if_block.c();
			html_tag = new HtmlTag(html_anchor);
			set_attributes(button, button_data);
			toggle_class(button, "bx--overflow-menu", true);
			toggle_class(button, "bx--overflow-menu--open", /*open*/ ctx[0]);
			toggle_class(button, "bx--overflow-menu--light", /*light*/ ctx[5]);
			toggle_class(button, "bx--overflow-menu--sm", /*size*/ ctx[3] === "sm");
			toggle_class(button, "bx--overflow-menu--xl", /*size*/ ctx[3] === "xl");
		},
		m(target, anchor) {
			html_tag.m(/*styles*/ ctx[13], document.head);
			append(document.head, html_anchor);
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, button, anchor);

			if (menu_slot_or_fallback) {
				menu_slot_or_fallback.m(button, null);
			}

			append(button, t2);
			if (if_block) if_block.m(button, null);
			/*button_binding*/ ctx[31](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(document.body, "click", /*click_handler_1*/ ctx[29]),
					listen(button, "click", /*click_handler*/ ctx[24]),
					listen(button, "click", /*click_handler_2*/ ctx[32]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[25]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[26]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[27]),
					listen(button, "keydown", /*keydown_handler*/ ctx[28]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[33]),
					listen(button, "focusout", /*focusout_handler*/ ctx[34])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*styles*/ 8192) html_tag.p(/*styles*/ ctx[13]);

			if (menu_slot) {
				if (menu_slot.p && dirty[0] & /*$$scope*/ 4194304) {
					update_slot(menu_slot, menu_slot_template, ctx, /*$$scope*/ ctx[22], dirty, get_menu_slot_changes, get_menu_slot_context);
				}
			} else {
				if (menu_slot_or_fallback && menu_slot_or_fallback.p && dirty[0] & /*icon, iconDescription, iconClass*/ 1792) {
					menu_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (/*open*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*open*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$F(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ "aria-haspopup": "" },
				(!current || dirty[0] & /*open*/ 1) && { "aria-expanded": /*open*/ ctx[0] },
				(!current || dirty[0] & /*ariaLabel*/ 4096) && { "aria-label": /*ariaLabel*/ ctx[12] },
				(!current || dirty[0] & /*id*/ 2048) && { id: /*id*/ ctx[11] },
				dirty[0] & /*$$restProps*/ 131072 && /*$$restProps*/ ctx[17]
			]));

			toggle_class(button, "bx--overflow-menu", true);
			toggle_class(button, "bx--overflow-menu--open", /*open*/ ctx[0]);
			toggle_class(button, "bx--overflow-menu--light", /*light*/ ctx[5]);
			toggle_class(button, "bx--overflow-menu--sm", /*size*/ ctx[3] === "sm");
			toggle_class(button, "bx--overflow-menu--xl", /*size*/ ctx[3] === "xl");
		},
		i(local) {
			if (current) return;
			transition_in(menu_slot_or_fallback, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(menu_slot_or_fallback, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			detach(html_anchor);
			if (detaching) html_tag.d();
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(button);
			if (menu_slot_or_fallback) menu_slot_or_fallback.d(detaching);
			if (if_block) if_block.d();
			/*button_binding*/ ctx[31](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$13($$self, $$props, $$invalidate) {
	let ariaLabel;
	let dynamicPseudoWidth;
	let styles;

	const omit_props_names = [
		"size","direction","open","light","flipped","menuOptionsClass","icon","iconClass","iconDescription","id","buttonRef","menuRef"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $currentIndex;
	let $items;
	let $currentId;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { direction = "bottom" } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { flipped = false } = $$props;
	let { menuOptionsClass = undefined } = $$props;
	let { icon = OverflowMenuVertical16 } = $$props;
	let { iconClass = undefined } = $$props;
	let { iconDescription = "Open and close list of options" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { buttonRef = null } = $$props;
	let { menuRef = null } = $$props;
	const dispatch = createEventDispatcher();
	const items = writable([]);
	component_subscribe($$self, items, value => $$invalidate(20, $items = value));
	const currentId = writable(undefined);
	component_subscribe($$self, currentId, value => $$invalidate(36, $currentId = value));
	const focusedId = writable(undefined);
	const currentIndex = writable(-1);
	component_subscribe($$self, currentIndex, value => $$invalidate(19, $currentIndex = value));
	let buttonWidth = undefined;
	let onMountAfterUpdate = true;

	setContext("OverflowMenu", {
		focusedId,
		add: ({ id, text, primaryFocus }) => {
			items.update(_ => {
				if (primaryFocus) {
					currentIndex.set(_.length);
				}

				return [..._, { id, text, primaryFocus, index: _.length }];
			});
		},
		update: id => {
			currentId.set(id);
		},
		change: direction => {
			// TODO: skip disabled
			let index = $currentIndex + direction;

			if (index < 0) {
				index = $items.length - 1;
			} else if (index >= $items.length) {
				index = 0;
			}

			currentIndex.set(index);
		}
	});

	afterUpdate(() => {
		if ($currentId) {
			const { index, text } = $items.filter(_ => _.id === $currentId)[0];
			dispatch("close", { index, text });
			$$invalidate(0, open = false);
		}

		if (open) {
			const { width, height } = buttonRef.getBoundingClientRect();
			$$invalidate(18, buttonWidth = width);

			if (!onMountAfterUpdate && $currentIndex < 0) {
				menuRef.focus();
			}

			if (flipped) {
				$$invalidate(2, menuRef.style.left = "auto", menuRef);
				$$invalidate(2, menuRef.style.right = 0, menuRef);
			}

			if (direction === "top") {
				$$invalidate(2, menuRef.style.top = "auto", menuRef);
				$$invalidate(2, menuRef.style.bottom = height + "px", menuRef);
			} else if (direction === "bottom") {
				$$invalidate(2, menuRef.style.top = height + "px", menuRef);
			}
		}

		if (!open) {
			items.set([]);
			currentId.set(undefined);
			currentIndex.set(0);
		}

		onMountAfterUpdate = false;
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	const click_handler_1 = ({ target }) => {
		if (buttonRef && buttonRef.contains(target)) return;

		if (menuRef && !menuRef.contains(target)) {
			$$invalidate(0, open = false);
		}
	};

	function ul_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			menuRef = $$value;
			$$invalidate(2, menuRef);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			buttonRef = $$value;
			$$invalidate(1, buttonRef);
		});
	}

	const click_handler_2 = ({ target }) => {
		if (!(menuRef && menuRef.contains(target))) {
			$$invalidate(0, open = !open);
		}
	};

	const keydown_handler_1 = e => {
		if (open) {
			if (["ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp"].includes(e.key)) {
				e.preventDefault();
			} else if (e.key === "Escape") {
				e.stopPropagation();
				$$invalidate(0, open = false);
				buttonRef.focus();
			}
		}
	};

	const focusout_handler = e => {
		if (open) {
			if (!buttonRef.contains(e.relatedTarget)) {
				$$invalidate(0, open = false);
			}
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(39, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(17, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(3, size = $$new_props.size);
		if ("direction" in $$new_props) $$invalidate(4, direction = $$new_props.direction);
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("light" in $$new_props) $$invalidate(5, light = $$new_props.light);
		if ("flipped" in $$new_props) $$invalidate(6, flipped = $$new_props.flipped);
		if ("menuOptionsClass" in $$new_props) $$invalidate(7, menuOptionsClass = $$new_props.menuOptionsClass);
		if ("icon" in $$new_props) $$invalidate(8, icon = $$new_props.icon);
		if ("iconClass" in $$new_props) $$invalidate(9, iconClass = $$new_props.iconClass);
		if ("iconDescription" in $$new_props) $$invalidate(10, iconDescription = $$new_props.iconDescription);
		if ("id" in $$new_props) $$invalidate(11, id = $$new_props.id);
		if ("buttonRef" in $$new_props) $$invalidate(1, buttonRef = $$new_props.buttonRef);
		if ("menuRef" in $$new_props) $$invalidate(2, menuRef = $$new_props.menuRef);
		if ("$$scope" in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(12, ariaLabel = $$props["aria-label"] || "menu");

		if ($$self.$$.dirty[0] & /*$items, $currentIndex*/ 1572864) {
			 if ($items[$currentIndex]) {
				focusedId.set($items[$currentIndex].id);
			}
		}

		if ($$self.$$.dirty[0] & /*id, buttonWidth*/ 264192) {
			 $$invalidate(21, dynamicPseudoWidth = `#${id} .bx--overflow-menu-options.bx--overflow-menu-options:after {
      width: ${buttonWidth ? buttonWidth + "px" : "2rem"};
    }`);
		}

		if ($$self.$$.dirty[0] & /*dynamicPseudoWidth*/ 2097152) {
			 $$invalidate(13, styles = formatStyle(dynamicPseudoWidth));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		buttonRef,
		menuRef,
		size,
		direction,
		light,
		flipped,
		menuOptionsClass,
		icon,
		iconClass,
		iconDescription,
		id,
		ariaLabel,
		styles,
		items,
		currentId,
		currentIndex,
		$$restProps,
		buttonWidth,
		$currentIndex,
		$items,
		dynamicPseudoWidth,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler_1,
		ul_binding,
		button_binding,
		click_handler_2,
		keydown_handler_1,
		focusout_handler
	];
}

class OverflowMenu extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$13,
			create_fragment$14,
			safe_not_equal,
			{
				size: 3,
				direction: 4,
				open: 0,
				light: 5,
				flipped: 6,
				menuOptionsClass: 7,
				icon: 8,
				iconClass: 9,
				iconDescription: 10,
				id: 11,
				buttonRef: 1,
				menuRef: 2
			},
			[-1, -1]
		);
	}
}

/* src/OverflowMenu/OverflowMenuItem.svelte generated by Svelte v3.32.1 */

function create_else_block$f(ctx) {
	let button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	const default_slot_or_fallback = default_slot || fallback_block_1$3(ctx);
	let button_levels = [/*buttonProps*/ ctx[7]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(button, button_data);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			/*button_binding*/ ctx[24](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_1*/ ctx[19]),
					listen(button, "click", /*click_handler_3*/ ctx[25]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[20]),
					listen(button, "keydown", /*keydown_handler_3*/ ctx[26])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32768) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*text*/ 2) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty & /*buttonProps*/ 128 && /*buttonProps*/ ctx[7]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[24](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (63:2) {#if href}
function create_if_block$G(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	const default_slot_or_fallback = default_slot || fallback_block$l(ctx);
	let a_levels = [/*buttonProps*/ ctx[7]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[21](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[17]),
					listen(a, "click", /*click_handler_2*/ ctx[22]),
					listen(a, "keydown", /*keydown_handler*/ ctx[18]),
					listen(a, "keydown", /*keydown_handler_2*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32768) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*text*/ 2) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty & /*buttonProps*/ 128 && /*buttonProps*/ ctx[7]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (104:12)          
function fallback_block_1$3(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*text*/ ctx[1]);
			toggle_class(div, "bx--overflow-menu-options__option-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 2) set_data(t, /*text*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (81:12)          
function fallback_block$l(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*text*/ ctx[1]);
			toggle_class(div, "bx--overflow-menu-options__option-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 2) set_data(t, /*text*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$15(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block$G, create_else_block$f];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let li_levels = [{ role: "menuitem" }, { id: /*id*/ ctx[6] }, /*$$restProps*/ ctx[11]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if_block.c();
			set_attributes(li, li_data);
			toggle_class(li, "bx--overflow-menu-options__option", true);
			toggle_class(li, "bx--overflow-menu--divider", /*hasDivider*/ ctx[4]);
			toggle_class(li, "bx--overflow-menu-options__option--danger", /*danger*/ ctx[5]);
			toggle_class(li, "bx--overflow-menu-options__option--disabled", /*disabled*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(li, null);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				{ role: "menuitem" },
				(!current || dirty & /*id*/ 64) && { id: /*id*/ ctx[6] },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
			]));

			toggle_class(li, "bx--overflow-menu-options__option", true);
			toggle_class(li, "bx--overflow-menu--divider", /*hasDivider*/ ctx[4]);
			toggle_class(li, "bx--overflow-menu-options__option--danger", /*danger*/ ctx[5]);
			toggle_class(li, "bx--overflow-menu-options__option--disabled", /*disabled*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance$14($$self, $$props, $$invalidate) {
	let buttonProps;

	const omit_props_names = [
		"text","href","primaryFocus","disabled","hasDivider","danger","requireTitle","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $focusedId;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { text = "Provide text" } = $$props;
	let { href = "" } = $$props;
	let { primaryFocus = false } = $$props;
	let { disabled = false } = $$props;
	let { hasDivider = false } = $$props;
	let { danger = false } = $$props;
	let { requireTitle = true } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const { focusedId, add, update, change } = getContext("OverflowMenu");
	component_subscribe($$self, focusedId, value => $$invalidate(14, $focusedId = value));
	add({ id, text, primaryFocus });

	afterUpdate(() => {
		if (primaryFocus) {
			ref.focus();
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function keydown_handler_1(event) {
		bubble($$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_2 = () => {
		update(id);
	};

	const keydown_handler_2 = ({ key }) => {
		if (key === "ArrowDown") {
			change(1);
		} else if (key === "ArrowUp") {
			change(-1);
		}
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_3 = () => {
		update(id);
	};

	const keydown_handler_3 = ({ key }) => {
		if (key === "ArrowDown") {
			change(1);
		} else if (key === "ArrowUp") {
			change(-1);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("text" in $$new_props) $$invalidate(1, text = $$new_props.text);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("primaryFocus" in $$new_props) $$invalidate(12, primaryFocus = $$new_props.primaryFocus);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("hasDivider" in $$new_props) $$invalidate(4, hasDivider = $$new_props.hasDivider);
		if ("danger" in $$new_props) $$invalidate(5, danger = $$new_props.danger);
		if ("requireTitle" in $$new_props) $$invalidate(13, requireTitle = $$new_props.requireTitle);
		if ("id" in $$new_props) $$invalidate(6, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$focusedId, id*/ 16448) {
			 $$invalidate(12, primaryFocus = $focusedId === id);
		}

		if ($$self.$$.dirty & /*requireTitle, text, href, disabled*/ 8206) {
			 $$invalidate(7, buttonProps = {
				tabindex: "-1",
				title: requireTitle ? text : undefined,
				class: "bx--overflow-menu-options__btn",
				disabled: href ? undefined : disabled,
				href: href ? href : undefined
			});
		}
	};

	return [
		ref,
		text,
		href,
		disabled,
		hasDivider,
		danger,
		id,
		buttonProps,
		focusedId,
		update,
		change,
		$$restProps,
		primaryFocus,
		requireTitle,
		$focusedId,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		click_handler_1,
		keydown_handler_1,
		a_binding,
		click_handler_2,
		keydown_handler_2,
		button_binding,
		click_handler_3,
		keydown_handler_3
	];
}

class OverflowMenuItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$14, create_fragment$15, safe_not_equal, {
			text: 1,
			href: 2,
			primaryFocus: 12,
			disabled: 3,
			hasDivider: 4,
			danger: 5,
			requireTitle: 13,
			id: 6,
			ref: 0
		});
	}
}

/* src/DataTable/ToolbarMenu.svelte generated by Svelte v3.32.1 */

function create_default_slot$8(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$16(ctx) {
	let overflowmenu;
	let updating_menuRef;
	let current;

	const overflowmenu_spread_levels = [
		{ icon: Settings16 },
		/*$$restProps*/ ctx[1],
		{
			class: "bx--toolbar-action bx--overflow-menu " + /*$$restProps*/ ctx[1].class
		},
		{ flipped: true }
	];

	function overflowmenu_menuRef_binding(value) {
		/*overflowmenu_menuRef_binding*/ ctx[3].call(null, value);
	}

	let overflowmenu_props = {
		$$slots: { default: [create_default_slot$8] },
		$$scope: { ctx }
	};

	for (let i = 0; i < overflowmenu_spread_levels.length; i += 1) {
		overflowmenu_props = assign(overflowmenu_props, overflowmenu_spread_levels[i]);
	}

	if (/*menuRef*/ ctx[0] !== void 0) {
		overflowmenu_props.menuRef = /*menuRef*/ ctx[0];
	}

	overflowmenu = new OverflowMenu({ props: overflowmenu_props });
	binding_callbacks.push(() => bind(overflowmenu, "menuRef", overflowmenu_menuRef_binding));

	return {
		c() {
			create_component(overflowmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(overflowmenu, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const overflowmenu_changes = (dirty & /*Settings16, $$restProps*/ 2)
			? get_spread_update(overflowmenu_spread_levels, [
					dirty & /*Settings16*/ 0 && { icon: Settings16 },
					dirty & /*$$restProps*/ 2 && get_spread_object(/*$$restProps*/ ctx[1]),
					dirty & /*$$restProps*/ 2 && {
						class: "bx--toolbar-action bx--overflow-menu " + /*$$restProps*/ ctx[1].class
					},
					overflowmenu_spread_levels[3]
				])
			: {};

			if (dirty & /*$$scope*/ 16) {
				overflowmenu_changes.$$scope = { dirty, ctx };
			}

			if (!updating_menuRef && dirty & /*menuRef*/ 1) {
				updating_menuRef = true;
				overflowmenu_changes.menuRef = /*menuRef*/ ctx[0];
				add_flush_callback(() => updating_menuRef = false);
			}

			overflowmenu.$set(overflowmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(overflowmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overflowmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(overflowmenu, detaching);
		}
	};
}

function instance$15($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const ctx = getContext("Toolbar");
	let menuRef = null;

	function overflowmenu_menuRef_binding(value) {
		menuRef = value;
		$$invalidate(0, menuRef);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*menuRef*/ 1) {
			 if (menuRef) $$invalidate(0, menuRef.style.top = "100%", menuRef);
		}

		if ($$self.$$.dirty & /*menuRef*/ 1) {
			 ctx.setOverflowVisible(menuRef != null);
		}
	};

	return [menuRef, $$restProps, slots, overflowmenu_menuRef_binding, $$scope];
}

class ToolbarMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$15, create_fragment$16, safe_not_equal, {});
	}
}

/* src/DataTable/ToolbarMenuItem.svelte generated by Svelte v3.32.1 */

function create_default_slot$9(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$17(ctx) {
	let overflowmenuitem;
	let current;
	const overflowmenuitem_spread_levels = [/*$$restProps*/ ctx[0]];

	let overflowmenuitem_props = {
		$$slots: { default: [create_default_slot$9] },
		$$scope: { ctx }
	};

	for (let i = 0; i < overflowmenuitem_spread_levels.length; i += 1) {
		overflowmenuitem_props = assign(overflowmenuitem_props, overflowmenuitem_spread_levels[i]);
	}

	overflowmenuitem = new OverflowMenuItem({ props: overflowmenuitem_props });
	overflowmenuitem.$on("click", /*click_handler*/ ctx[2]);
	overflowmenuitem.$on("keydown", /*keydown_handler*/ ctx[3]);

	return {
		c() {
			create_component(overflowmenuitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(overflowmenuitem, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const overflowmenuitem_changes = (dirty & /*$$restProps*/ 1)
			? get_spread_update(overflowmenuitem_spread_levels, [get_spread_object(/*$$restProps*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 16) {
				overflowmenuitem_changes.$$scope = { dirty, ctx };
			}

			overflowmenuitem.$set(overflowmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(overflowmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overflowmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(overflowmenuitem, detaching);
		}
	};
}

function instance$16($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [$$restProps, slots, click_handler, keydown_handler, $$scope];
}

class ToolbarMenuItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$16, create_fragment$17, safe_not_equal, {});
	}
}

function rangePlugin(config = {}) {
    return function (fp) {
        let dateFormat = "", secondInput, _secondInputFocused, _prevDates;
        const createSecondInput = () => {
            if (config.input) {
                secondInput =
                    config.input instanceof Element
                        ? config.input
                        : window.document.querySelector(config.input);
                if (!secondInput) {
                    fp.config.errorHandler(new Error("Invalid input element specified"));
                    return;
                }
                if (fp.config.wrap) {
                    secondInput = secondInput.querySelector("[data-input]");
                }
            }
            else {
                secondInput = fp._input.cloneNode();
                secondInput.removeAttribute("id");
                secondInput._flatpickr = undefined;
            }
            if (secondInput.value) {
                const parsedDate = fp.parseDate(secondInput.value);
                if (parsedDate)
                    fp.selectedDates.push(parsedDate);
            }
            secondInput.setAttribute("data-fp-omit", "");
            if (fp.config.clickOpens) {
                fp._bind(secondInput, ["focus", "click"], () => {
                    if (fp.selectedDates[1]) {
                        fp.latestSelectedDateObj = fp.selectedDates[1];
                        fp._setHoursFromDate(fp.selectedDates[1]);
                        fp.jumpToDate(fp.selectedDates[1]);
                    }
                    _secondInputFocused = true;
                    fp.isOpen = false;
                    fp.open(undefined, config.position === "left" ? fp._input : secondInput);
                });
                fp._bind(fp._input, ["focus", "click"], (e) => {
                    e.preventDefault();
                    fp.isOpen = false;
                    fp.open();
                });
            }
            if (fp.config.allowInput)
                fp._bind(secondInput, "keydown", (e) => {
                    if (e.key === "Enter") {
                        fp.setDate([fp.selectedDates[0], secondInput.value], true, dateFormat);
                        secondInput.click();
                    }
                });
            if (!config.input)
                fp._input.parentNode &&
                    fp._input.parentNode.insertBefore(secondInput, fp._input.nextSibling);
        };
        const plugin = {
            onParseConfig() {
                fp.config.mode = "range";
                dateFormat = fp.config.altInput
                    ? fp.config.altFormat
                    : fp.config.dateFormat;
            },
            onReady() {
                createSecondInput();
                fp.config.ignoredFocusElements.push(secondInput);
                if (fp.config.allowInput) {
                    fp._input.removeAttribute("readonly");
                    secondInput.removeAttribute("readonly");
                }
                else {
                    secondInput.setAttribute("readonly", "readonly");
                }
                fp._bind(fp._input, "focus", () => {
                    fp.latestSelectedDateObj = fp.selectedDates[0];
                    fp._setHoursFromDate(fp.selectedDates[0]);
                    _secondInputFocused = false;
                    fp.jumpToDate(fp.selectedDates[0]);
                });
                if (fp.config.allowInput)
                    fp._bind(fp._input, "keydown", (e) => {
                        if (e.key === "Enter")
                            fp.setDate([fp._input.value, fp.selectedDates[1]], true, dateFormat);
                    });
                fp.setDate(fp.selectedDates, false);
                plugin.onValueUpdate(fp.selectedDates);
                fp.loadedPlugins.push("range");
            },
            onPreCalendarPosition() {
                if (_secondInputFocused) {
                    fp._positionElement = secondInput;
                    setTimeout(() => {
                        fp._positionElement = fp._input;
                    }, 0);
                }
            },
            onChange() {
                if (!fp.selectedDates.length) {
                    setTimeout(() => {
                        if (fp.selectedDates.length)
                            return;
                        secondInput.value = "";
                        _prevDates = [];
                    }, 10);
                }
                if (_secondInputFocused) {
                    setTimeout(() => {
                        secondInput.focus();
                    }, 0);
                }
            },
            onDestroy() {
                if (!config.input)
                    secondInput.parentNode &&
                        secondInput.parentNode.removeChild(secondInput);
            },
            onValueUpdate(selDates) {
                if (!secondInput)
                    return;
                _prevDates =
                    !_prevDates || selDates.length >= _prevDates.length
                        ? [...selDates]
                        : _prevDates;
                if (_prevDates.length > selDates.length) {
                    const newSelectedDate = selDates[0];
                    const newDates = _secondInputFocused
                        ? [_prevDates[0], newSelectedDate]
                        : [newSelectedDate, _prevDates[1]];
                    fp.setDate(newDates, false);
                    _prevDates = [...newDates];
                }
                [
                    fp._input.value = "",
                    secondInput.value = "",
                ] = fp.selectedDates.map((d) => fp.formatDate(d, dateFormat));
            },
        };
        return plugin;
    };
}

let l10n;

function updateClasses(instance) {
  const {
    calendarContainer,
    days,
    daysContainer,
    weekdayContainer,
    selectedDates,
  } = instance;

  calendarContainer.classList.add("bx--date-picker__calendar");
  calendarContainer
    .querySelector(".flatpickr-month")
    .classList.add("bx--date-picker__month");

  weekdayContainer.classList.add("bx--date-picker__weekdays");
  weekdayContainer.querySelectorAll(".flatpickr-weekday").forEach((node) => {
    node.classList.add("bx--date-picker__weekday");
  });

  daysContainer.classList.add("bx--date-picker__days");
  days.querySelectorAll(".flatpickr-day").forEach((node) => {
    node.classList.add("bx--date-picker__day");
    if (node.classList.contains("today") && selectedDates.length > 0) {
      node.classList.add("no-border");
    } else if (node.classList.contains("today") && selectedDates.length === 0) {
      node.classList.remove("no-border");
    }
  });
}

function updateMonthNode(instance) {
  const monthText = instance.l10n.months.longhand[instance.currentMonth];
  const staticMonthNode = instance.monthNav.querySelector(".cur-month");

  if (staticMonthNode) {
    staticMonthNode.textContent = monthText;
  } else {
    const monthSelectNode = instance.monthsDropdownContainer;
    const span = document.createElement("span");
    span.setAttribute("class", "cur-month");
    span.textContent = monthText;
    monthSelectNode.parentNode.replaceChild(span, monthSelectNode);
  }
}

function createCalendar({ options, base, input, dispatch }) {
  let locale = options.locale;

  if (options.locale === "en" && l10n && l10n.en) {
    l10n.en.weekdays.shorthand.forEach((_, index) => {
      const shorthand = _.slice(0, 2);
      l10n.en.weekdays.shorthand[index] =
        shorthand === "Th" ? "Th" : shorthand.charAt(0);
    });

    locale = l10n.en;
  }

  return new flatpickr(base, {
    ...options,
    allowInput: true,
    disableMobile: true,
    clickOpens: true,
    locale,
    plugins: [
      options.mode === "range" && new rangePlugin({ position: "left", input }),
    ].filter(Boolean),
    nextArrow:
      '<svg width="16px" height="16px" viewBox="0 0 16 16"><polygon points="11,8 6,13 5.3,12.3 9.6,8 5.3,3.7 6,3 "/><rect width="16" height="16" style="fill: none" /></svg>',
    prevArrow:
      '<svg width="16px" height="16px" viewBox="0 0 16 16"><polygon points="5,8 10,3 10.7,3.7 6.4,8 10.7,12.3 10,13 "/><rect width="16" height="16" style="fill: none" /></svg>',
    onChange: () => {
      dispatch("change");
    },
    onClose: () => {
      dispatch("close");
    },
    onMonthChange: (s, d, instance) => {
      updateMonthNode(instance);
    },
    onOpen: (s, d, instance) => {
      dispatch("open");
      updateClasses(instance);
      updateMonthNode(instance);
    },
  });
}

/* src/DatePicker/DatePicker.svelte generated by Svelte v3.32.1 */

const { document: document_1 } = globals;

function create_fragment$18(ctx) {
	let t;
	let div1;
	let div0;
	let div0_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[22].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);
	let div1_levels = [/*$$restProps*/ ctx[13]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			t = space();
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "id", /*id*/ ctx[3]);
			attr(div0, "class", div0_class_value = "" + ((/*datePickerType*/ ctx[0] && `bx--date-picker--${/*datePickerType*/ ctx[0]}`) + "\n      " + (/*datePickerType*/ ctx[0] === "range" && /*$labelTextEmpty*/ ctx[6] && "bx--date-picker--nolabel")));
			toggle_class(div0, "bx--date-picker", true);
			toggle_class(div0, "bx--date-picker--short", /*short*/ ctx[1]);
			toggle_class(div0, "bx--date-picker--light", /*light*/ ctx[2]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, t, anchor);
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[28](div0);
			current = true;

			if (!mounted) {
				dispose = [
					listen(document_1.body, "click", /*click_handler_1*/ ctx[27]),
					listen(div1, "click", /*click_handler*/ ctx[23]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[24]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[25]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[26])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 2097152) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[21], dirty, null, null);
				}
			}

			if (!current || dirty[0] & /*id*/ 8) {
				attr(div0, "id", /*id*/ ctx[3]);
			}

			if (!current || dirty[0] & /*datePickerType, $labelTextEmpty*/ 65 && div0_class_value !== (div0_class_value = "" + ((/*datePickerType*/ ctx[0] && `bx--date-picker--${/*datePickerType*/ ctx[0]}`) + "\n      " + (/*datePickerType*/ ctx[0] === "range" && /*$labelTextEmpty*/ ctx[6] && "bx--date-picker--nolabel")))) {
				attr(div0, "class", div0_class_value);
			}

			if (dirty[0] & /*datePickerType, $labelTextEmpty*/ 65) {
				toggle_class(div0, "bx--date-picker", true);
			}

			if (dirty[0] & /*datePickerType, $labelTextEmpty, short*/ 67) {
				toggle_class(div0, "bx--date-picker--short", /*short*/ ctx[1]);
			}

			if (dirty[0] & /*datePickerType, $labelTextEmpty, light*/ 69) {
				toggle_class(div0, "bx--date-picker--light", /*light*/ ctx[2]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty[0] & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t);
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div0_binding*/ ctx[28](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$17($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"datePickerType","value","appendTo","dateFormat","maxDate","minDate","locale","short","light","id"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $inputIds;
	let $hasCalendar;
	let $inputValue;
	let $mode;
	let $range;
	let $labelTextEmpty;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { datePickerType = "simple" } = $$props;
	let { value = "" } = $$props;
	let { appendTo = document.body } = $$props;
	let { dateFormat = "m/d/Y" } = $$props;
	let { maxDate = null } = $$props;
	let { minDate = null } = $$props;
	let { locale = "en" } = $$props;
	let { short = false } = $$props;
	let { light = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const dispatch = createEventDispatcher();
	const inputs = writable([]);
	const inputIds = derived(inputs, _ => _.map(({ id }) => id));
	component_subscribe($$self, inputIds, value => $$invalidate(31, $inputIds = value));
	const labelTextEmpty = derived(inputs, _ => _.filter(({ labelText }) => !!labelText).length === 0);
	component_subscribe($$self, labelTextEmpty, value => $$invalidate(6, $labelTextEmpty = value));
	const inputValue = writable(value);
	component_subscribe($$self, inputValue, value => $$invalidate(20, $inputValue = value));
	const mode = writable(datePickerType);
	component_subscribe($$self, mode, value => $$invalidate(33, $mode = value));
	const range = derived(mode, _ => _ === "range");
	component_subscribe($$self, range, value => $$invalidate(34, $range = value));
	const hasCalendar = derived(mode, _ => _ === "single" || _ === "range");
	component_subscribe($$self, hasCalendar, value => $$invalidate(32, $hasCalendar = value));
	let calendar = undefined;
	let datePickerRef = undefined;
	let inputRef = undefined;
	let inputRefTo = undefined;

	setContext("DatePicker", {
		range,
		inputValue,
		hasCalendar,
		add: data => {
			inputs.update(_ => [..._, data]);
		},
		declareRef: ({ id, ref }) => {
			if ($inputIds.indexOf(id) === 0) {
				inputRef = ref;
			} else {
				inputRefTo = ref;
			}
		},
		updateValue: ({ type, value }) => {
			if (!calendar && type === "input" || type === "change") {
				inputValue.set(value);
			}

			if (!calendar && type === "change") {
				dispatch("change", value);
			}
		},
		blurInput: relatedTarget => {
			if (calendar && !calendar.calendarContainer.contains(relatedTarget)) {
				calendar.close();
			}
		},
		openCalendar: () => {
			calendar.open();
		},
		focusCalendar: () => {
			(calendar.selectedDateElem || calendar.todayDateElem || calendar.calendarContainer.querySelector(".flatpickr-day[tabindex]") || calendar.calendarContainer).focus();
		}
	});

	afterUpdate(() => {
		if ($hasCalendar && !calendar) {
			$$invalidate(4, calendar = createCalendar({
				options: {
					appendTo,
					dateFormat,
					defaultDate: $inputValue,
					locale,
					maxDate,
					minDate,
					mode: $mode
				},
				base: inputRef,
				input: inputRefTo,
				dispatch: event => {
					const detail = { selectedDates: calendar.selectedDates };

					if ($range) {
						detail.dateStr = {
							from: inputRef.value,
							to: inputRefTo.value
						};
					} else {
						detail.dateStr = inputRef.value;
					}

					return dispatch(event, detail);
				}
			}));
		}

		if (calendar && !$range) {
			calendar.setDate($inputValue);
		}
	});

	onDestroy(() => {
		if (calendar) {
			calendar.destroy();
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	const click_handler_1 = ({ target }) => {
		if (!calendar || !calendar.isOpen) {
			return;
		}

		if (datePickerRef && datePickerRef.contains(target)) {
			return;
		}

		if (!calendar.calendarContainer.contains(target)) {
			calendar.close();
		}
	};

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			datePickerRef = $$value;
			$$invalidate(5, datePickerRef);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(13, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("datePickerType" in $$new_props) $$invalidate(0, datePickerType = $$new_props.datePickerType);
		if ("value" in $$new_props) $$invalidate(14, value = $$new_props.value);
		if ("appendTo" in $$new_props) $$invalidate(15, appendTo = $$new_props.appendTo);
		if ("dateFormat" in $$new_props) $$invalidate(16, dateFormat = $$new_props.dateFormat);
		if ("maxDate" in $$new_props) $$invalidate(17, maxDate = $$new_props.maxDate);
		if ("minDate" in $$new_props) $$invalidate(18, minDate = $$new_props.minDate);
		if ("locale" in $$new_props) $$invalidate(19, locale = $$new_props.locale);
		if ("short" in $$new_props) $$invalidate(1, short = $$new_props.short);
		if ("light" in $$new_props) $$invalidate(2, light = $$new_props.light);
		if ("id" in $$new_props) $$invalidate(3, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$inputValue*/ 1048576) {
			 $$invalidate(14, value = $inputValue);
		}

		if ($$self.$$.dirty[0] & /*value*/ 16384) {
			 inputValue.set(value);
		}
	};

	return [
		datePickerType,
		short,
		light,
		id,
		calendar,
		datePickerRef,
		$labelTextEmpty,
		inputIds,
		labelTextEmpty,
		inputValue,
		mode,
		range,
		hasCalendar,
		$$restProps,
		value,
		appendTo,
		dateFormat,
		maxDate,
		minDate,
		locale,
		$inputValue,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		div0_binding
	];
}

class DatePicker extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$17,
			create_fragment$18,
			safe_not_equal,
			{
				datePickerType: 0,
				value: 14,
				appendTo: 15,
				dateFormat: 16,
				maxDate: 17,
				minDate: 18,
				locale: 19,
				short: 1,
				light: 2,
				id: 3
			},
			[-1, -1]
		);
	}
}

/* node_modules/carbon-icons-svelte/lib/Calendar16/Calendar16.svelte generated by Svelte v3.32.1 */

function create_if_block$H(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$m(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$H(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$H(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$19(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$m(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Calendar16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M26,4h-4V2h-2v2h-8V2h-2v2H6C4.9,4,4,4.9,4,6v20c0,1.1,0.9,2,2,2h20c1.1,0,2-0.9,2-2V6C28,4.9,27.1,4,26,4z M26,26H6V12h20\tV26z M26,10H6V6h4v2h2V6h8v2h2V6h4V10z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Calendar16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$18($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Calendar16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$18, create_fragment$19, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/DatePicker/DatePickerInput.svelte generated by Svelte v3.32.1 */

function create_if_block_6$1(ctx) {
	let label;
	let t;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[8]);
			attr(label, "for", /*id*/ ctx[7]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[9]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 256) set_data(t, /*labelText*/ ctx[8]);

			if (dirty[0] & /*id*/ 128) {
				attr(label, "for", /*id*/ ctx[7]);
			}

			if (dirty[0] & /*hideLabel*/ 512) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[9]);
			}

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (128:4) {#if !$hasCalendar}
function create_if_block_3$4(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = /*invalid*/ ctx[10] && create_if_block_5$2();
	let if_block1 = !/*invalid*/ ctx[10] && /*warn*/ ctx[12] && create_if_block_4$4();

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*invalid*/ ctx[10]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 1024) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5$2();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[10] && /*warn*/ ctx[12]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 5120) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$4();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

// (129:6) {#if invalid}
function create_if_block_5$2(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: {
				class: "bx--date-picker__icon bx--date-picker__icon--invalid"
			}
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (134:6) {#if !invalid && warn}
function create_if_block_4$4(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--date-picker__icon bx--date-picker__icon--warn"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (140:4) {#if $hasCalendar}
function create_if_block_2$5(ctx) {
	let calendar16;
	let current;

	calendar16 = new Calendar16({
			props: {
				role: "img",
				class: "bx--date-picker__icon",
				"aria-label": /*iconDescription*/ ctx[6],
				title: /*iconDescription*/ ctx[6]
			}
		});

	calendar16.$on("click", /*openCalendar*/ ctx[22]);

	return {
		c() {
			create_component(calendar16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(calendar16, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const calendar16_changes = {};
			if (dirty[0] & /*iconDescription*/ 64) calendar16_changes["aria-label"] = /*iconDescription*/ ctx[6];
			if (dirty[0] & /*iconDescription*/ 64) calendar16_changes.title = /*iconDescription*/ ctx[6];
			calendar16.$set(calendar16_changes);
		},
		i(local) {
			if (current) return;
			transition_in(calendar16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(calendar16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(calendar16, detaching);
		}
	};
}

// (150:2) {#if invalid}
function create_if_block_1$b(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[11]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 2048) set_data(t, /*invalidText*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (153:2) {#if !invalid && warn}
function create_if_block$I(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[13]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 8192) set_data(t, /*warnText*/ ctx[13]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1a(ctx) {
	let div1;
	let t0;
	let div0;
	let input;
	let input_data_invalid_value;
	let input_value_value;
	let input_class_value;
	let t1;
	let t2;
	let t3;
	let t4;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*labelText*/ ctx[8] && create_if_block_6$1(ctx);

	let input_levels = [
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[10] || undefined
		},
		{ id: /*id*/ ctx[7] },
		{ name: /*name*/ ctx[14] },
		{ placeholder: /*placeholder*/ ctx[3] },
		{ type: /*type*/ ctx[2] },
		{ pattern: /*pattern*/ ctx[4] },
		{ disabled: /*disabled*/ ctx[5] },
		/*$$restProps*/ ctx[25],
		{
			value: input_value_value = !/*$range*/ ctx[15]
			? /*$inputValue*/ ctx[16]
			: undefined
		},
		{
			class: input_class_value = /*size*/ ctx[1] && `bx--date-picker__input--${/*size*/ ctx[1]}`
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block1 = !/*$hasCalendar*/ ctx[17] && create_if_block_3$4(ctx);
	let if_block2 = /*$hasCalendar*/ ctx[17] && create_if_block_2$5(ctx);
	let if_block3 = /*invalid*/ ctx[10] && create_if_block_1$b(ctx);
	let if_block4 = !/*invalid*/ ctx[10] && /*warn*/ ctx[12] && create_if_block$I(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			input = element("input");
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			set_attributes(input, input_data);
			toggle_class(input, "bx--date-picker__input", true);
			toggle_class(input, "bx--date-picker__input--invalid", /*invalid*/ ctx[10]);
			toggle_class(div0, "bx--date-picker-input__wrapper", true);
			toggle_class(div0, "bx--date-picker-input__wrapper--invalid", /*invalid*/ ctx[10]);
			toggle_class(div0, "bx--date-picker-input__wrapper--warn", /*warn*/ ctx[12]);
			toggle_class(div1, "bx--date-picker-container", true);
			toggle_class(div1, "bx--date-picker--nolabel", !/*labelText*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			append(div0, input);
			input.value = input_data.value;
			/*input_binding*/ ctx[29](input);
			append(div0, t1);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t2);
			if (if_block2) if_block2.m(div0, null);
			append(div1, t3);
			if (if_block3) if_block3.m(div1, null);
			append(div1, t4);
			if (if_block4) if_block4.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_handler*/ ctx[26]),
					listen(input, "input", /*input_handler_1*/ ctx[30]),
					listen(input, "change", /*change_handler*/ ctx[31]),
					listen(input, "keydown", /*keydown_handler*/ ctx[27]),
					listen(input, "keydown", /*keydown_handler_1*/ ctx[32]),
					listen(input, "blur", /*blur_handler*/ ctx[28]),
					listen(input, "blur", /*blur_handler_1*/ ctx[33])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*labelText*/ ctx[8]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6$1(ctx);
					if_block0.c();
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				(!current || dirty[0] & /*invalid*/ 1024 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[10] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*id*/ 128) && { id: /*id*/ ctx[7] },
				(!current || dirty[0] & /*name*/ 16384) && { name: /*name*/ ctx[14] },
				(!current || dirty[0] & /*placeholder*/ 8) && { placeholder: /*placeholder*/ ctx[3] },
				(!current || dirty[0] & /*type*/ 4) && { type: /*type*/ ctx[2] },
				(!current || dirty[0] & /*pattern*/ 16) && { pattern: /*pattern*/ ctx[4] },
				(!current || dirty[0] & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
				dirty[0] & /*$$restProps*/ 33554432 && /*$$restProps*/ ctx[25],
				(!current || dirty[0] & /*$range, $inputValue*/ 98304 && input_value_value !== (input_value_value = !/*$range*/ ctx[15]
				? /*$inputValue*/ ctx[16]
				: undefined) && input.value !== input_value_value) && { value: input_value_value },
				(!current || dirty[0] & /*size*/ 2 && input_class_value !== (input_class_value = /*size*/ ctx[1] && `bx--date-picker__input--${/*size*/ ctx[1]}`)) && { class: input_class_value }
			]));

			if ("value" in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--date-picker__input", true);
			toggle_class(input, "bx--date-picker__input--invalid", /*invalid*/ ctx[10]);

			if (!/*$hasCalendar*/ ctx[17]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*$hasCalendar*/ 131072) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*$hasCalendar*/ ctx[17]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*$hasCalendar*/ 131072) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2$5(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*invalid*/ 1024) {
				toggle_class(div0, "bx--date-picker-input__wrapper--invalid", /*invalid*/ ctx[10]);
			}

			if (dirty[0] & /*warn*/ 4096) {
				toggle_class(div0, "bx--date-picker-input__wrapper--warn", /*warn*/ ctx[12]);
			}

			if (/*invalid*/ ctx[10]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_1$b(ctx);
					if_block3.c();
					if_block3.m(div1, t4);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!/*invalid*/ ctx[10] && /*warn*/ ctx[12]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block$I(ctx);
					if_block4.c();
					if_block4.m(div1, null);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (dirty[0] & /*labelText*/ 256) {
				toggle_class(div1, "bx--date-picker--nolabel", !/*labelText*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			/*input_binding*/ ctx[29](null);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$19($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","type","placeholder","pattern","disabled","iconDescription","id","labelText","hideLabel","invalid","invalidText","warn","warnText","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $range;
	let $inputValue;
	let $hasCalendar;
	let { size = undefined } = $$props;
	let { type = "text" } = $$props;
	let { placeholder = "" } = $$props;
	let { pattern = "\\d{1,2}\\/\\d{1,2}\\/\\d{4}" } = $$props;
	let { disabled = false } = $$props;
	let { iconDescription = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	const { range, add, hasCalendar, declareRef, updateValue, blurInput, openCalendar, focusCalendar, inputValue } = getContext("DatePicker");
	component_subscribe($$self, range, value => $$invalidate(15, $range = value));
	component_subscribe($$self, hasCalendar, value => $$invalidate(17, $hasCalendar = value));
	component_subscribe($$self, inputValue, value => $$invalidate(16, $inputValue = value));
	add({ id, labelText });

	onMount(() => {
		declareRef({ id, ref });
	});

	function input_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		updateValue({ type: "input", value: target.value });
	};

	const change_handler = ({ target }) => {
		updateValue({ type: "change", value: target.value });
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === "ArrowDown") {
			focusCalendar();
		}
	};

	const blur_handler_1 = ({ relatedTarget }) => {
		blurInput(relatedTarget);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("type" in $$new_props) $$invalidate(2, type = $$new_props.type);
		if ("placeholder" in $$new_props) $$invalidate(3, placeholder = $$new_props.placeholder);
		if ("pattern" in $$new_props) $$invalidate(4, pattern = $$new_props.pattern);
		if ("disabled" in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ("iconDescription" in $$new_props) $$invalidate(6, iconDescription = $$new_props.iconDescription);
		if ("id" in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ("labelText" in $$new_props) $$invalidate(8, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(9, hideLabel = $$new_props.hideLabel);
		if ("invalid" in $$new_props) $$invalidate(10, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(11, invalidText = $$new_props.invalidText);
		if ("warn" in $$new_props) $$invalidate(12, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(13, warnText = $$new_props.warnText);
		if ("name" in $$new_props) $$invalidate(14, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	return [
		ref,
		size,
		type,
		placeholder,
		pattern,
		disabled,
		iconDescription,
		id,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		warn,
		warnText,
		name,
		$range,
		$inputValue,
		$hasCalendar,
		range,
		hasCalendar,
		updateValue,
		blurInput,
		openCalendar,
		focusCalendar,
		inputValue,
		$$restProps,
		input_handler,
		keydown_handler,
		blur_handler,
		input_binding,
		input_handler_1,
		change_handler,
		keydown_handler_1,
		blur_handler_1
	];
}

class DatePickerInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$19,
			create_fragment$1a,
			safe_not_equal,
			{
				size: 1,
				type: 2,
				placeholder: 3,
				pattern: 4,
				disabled: 5,
				iconDescription: 6,
				id: 7,
				labelText: 8,
				hideLabel: 9,
				invalid: 10,
				invalidText: 11,
				warn: 12,
				warnText: 13,
				name: 14,
				ref: 0
			},
			[-1, -1]
		);
	}
}

/* src/DatePicker/DatePickerSkeleton.svelte generated by Svelte v3.32.1 */

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (24:4) {#each Array.from({ length: range ? 2 : 1 }, (_, i) => i) as input, i (input)}
function create_each_block$6(key_1, ctx) {
	let div1;
	let label;
	let t0;
	let div0;
	let t1;

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			label = element("label");
			t0 = space();
			div0 = element("div");
			t1 = space();
			attr(label, "for", /*id*/ ctx[1]);
			toggle_class(label, "bx--label", true);
			toggle_class(div0, "bx--date-picker__input", true);
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(div1, "bx--date-picker-container", true);
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, label);
			append(div1, t0);
			append(div1, div0);
			append(div1, t1);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*id*/ 2) {
				attr(label, "for", /*id*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function create_fragment$1b(ctx) {
	let div1;
	let div0;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*range*/ ctx[0] ? 2 : 1 }, func$3);
	const get_key = ctx => /*input*/ ctx[7];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$6(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$6(key, child_ctx));
	}

	let div1_levels = [/*$$restProps*/ ctx[2]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(div0, "bx--date-picker", true);
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(div0, "bx--date-picker--range", true);
			toggle_class(div0, "bx--date-picker--short", !/*range*/ ctx[0]);
			toggle_class(div0, "bx--date-picker--simple", !/*range*/ ctx[0]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[3]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*id, range*/ 3) {
				each_value = Array.from({ length: /*range*/ ctx[0] ? 2 : 1 }, func$3);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, destroy_block, create_each_block$6, null, get_each_context$6);
			}

			if (dirty & /*range*/ 1) {
				toggle_class(div0, "bx--date-picker--short", !/*range*/ ctx[0]);
			}

			if (dirty & /*range*/ 1) {
				toggle_class(div0, "bx--date-picker--simple", !/*range*/ ctx[0]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$3 = (_, i) => i;

function instance$1a($$self, $$props, $$invalidate) {
	const omit_props_names = ["range","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { range = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("range" in $$new_props) $$invalidate(0, range = $$new_props.range);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
	};

	return [
		range,
		id,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class DatePickerSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1a, create_fragment$1b, safe_not_equal, { range: 0, id: 1 });
	}
}

/* src/Dropdown/Dropdown.svelte generated by Svelte v3.32.1 */

function get_each_context$7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i];
	child_ctx[37] = i;
	return child_ctx;
}

// (152:2) {#if titleText}
function create_if_block_5$3(ctx) {
	let label_1;
	let t;

	return {
		c() {
			label_1 = element("label");
			t = text(/*titleText*/ ctx[11]);
			attr(label_1, "for", /*id*/ ctx[20]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[10]);
			toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[18]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);
			append(label_1, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*titleText*/ 2048) set_data(t, /*titleText*/ ctx[11]);

			if (dirty[0] & /*id*/ 1048576) {
				attr(label_1, "for", /*id*/ ctx[20]);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*hideLabel*/ 262144) {
				toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[18]);
			}
		},
		d(detaching) {
			if (detaching) detach(label_1);
		}
	};
}

// (192:4) {#if invalid}
function create_if_block_4$5(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (195:4) {#if !invalid && warn}
function create_if_block_3$5(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--list-box__invalid-icon bx--list-box__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (227:54) {:else}
function create_else_block$g(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*label*/ 131072) set_data(t, /*label*/ ctx[17]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (227:8) {#if selectedItem}
function create_if_block_2$6(ctx) {
	let t_value = /*itemToString*/ ctx[5](/*selectedItem*/ ctx[23]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*itemToString, selectedItem*/ 8388640 && t_value !== (t_value = /*itemToString*/ ctx[5](/*selectedItem*/ ctx[23]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (231:4) {#if open}
function create_if_block_1$c(ctx) {
	let listboxmenu;
	let current;

	listboxmenu = new ListBoxMenu({
			props: {
				"aria-labelledby": /*id*/ ctx[20],
				id: /*id*/ ctx[20],
				$$slots: { default: [create_default_slot_1$4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(listboxmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxmenu_changes = {};
			if (dirty[0] & /*id*/ 1048576) listboxmenu_changes["aria-labelledby"] = /*id*/ ctx[20];
			if (dirty[0] & /*id*/ 1048576) listboxmenu_changes.id = /*id*/ ctx[20];

			if (dirty[0] & /*items, selectedIndex, selectedId, highlightedIndex, ref, itemToString*/ 20971577 | dirty[1] & /*$$scope*/ 128) {
				listboxmenu_changes.$$scope = { dirty, ctx };
			}

			listboxmenu.$set(listboxmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxmenu, detaching);
		}
	};
}

// (234:10) <ListBoxMenuItem             id="{item.id}"             active="{selectedIndex === i || selectedId === item.id}"             highlighted="{highlightedIndex === i || selectedIndex === i}"             on:click="{() => {               selectedId = item.id;               selectedIndex = i;               ref.focus();             }}"             on:mouseenter="{() => {               highlightedIndex = i;             }}"           >
function create_default_slot_2$2(ctx) {
	let t0_value = /*itemToString*/ ctx[5](/*item*/ ctx[35]) + "";
	let t0;
	let t1;

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*itemToString, items*/ 48 && t0_value !== (t0_value = /*itemToString*/ ctx[5](/*item*/ ctx[35]) + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (233:8) {#each items as item, i (item.id)}
function create_each_block$7(key_1, ctx) {
	let first;
	let listboxmenuitem;
	let current;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[31](/*item*/ ctx[35], /*i*/ ctx[37]);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[32](/*i*/ ctx[37]);
	}

	listboxmenuitem = new ListBoxMenuItem({
			props: {
				id: /*item*/ ctx[35].id,
				active: /*selectedIndex*/ ctx[0] === /*i*/ ctx[37] || /*selectedId*/ ctx[22] === /*item*/ ctx[35].id,
				highlighted: /*highlightedIndex*/ ctx[24] === /*i*/ ctx[37] || /*selectedIndex*/ ctx[0] === /*i*/ ctx[37],
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			}
		});

	listboxmenuitem.$on("click", click_handler_1);
	listboxmenuitem.$on("mouseenter", mouseenter_handler);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(listboxmenuitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(listboxmenuitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const listboxmenuitem_changes = {};
			if (dirty[0] & /*items*/ 16) listboxmenuitem_changes.id = /*item*/ ctx[35].id;
			if (dirty[0] & /*selectedIndex, items, selectedId*/ 4194321) listboxmenuitem_changes.active = /*selectedIndex*/ ctx[0] === /*i*/ ctx[37] || /*selectedId*/ ctx[22] === /*item*/ ctx[35].id;
			if (dirty[0] & /*highlightedIndex, items, selectedIndex*/ 16777233) listboxmenuitem_changes.highlighted = /*highlightedIndex*/ ctx[24] === /*i*/ ctx[37] || /*selectedIndex*/ ctx[0] === /*i*/ ctx[37];

			if (dirty[0] & /*itemToString, items*/ 48 | dirty[1] & /*$$scope*/ 128) {
				listboxmenuitem_changes.$$scope = { dirty, ctx };
			}

			listboxmenuitem.$set(listboxmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(listboxmenuitem, detaching);
		}
	};
}

// (232:6) <ListBoxMenu aria-labelledby="{id}" id="{id}">
function create_default_slot_1$4(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*items*/ ctx[4];
	const get_key = ctx => /*item*/ ctx[35].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$7(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$7(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*items, selectedIndex, selectedId, highlightedIndex, ref, itemToString*/ 20971577) {
				each_value = /*items*/ ctx[4];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$7, each_1_anchor, get_each_context$7);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (162:2) <ListBox     type="{type}"     size="{size}"     id="{id}"     name="{name}"     aria-label="{$$props['aria-label']}"     class="bx--dropdown {direction === 'top' && 'bx--list-box--up'} {invalid &&       'bx--dropdown--invalid'} {!invalid &&       warn &&       'bx--dropdown--warning'} {open && 'bx--dropdown--open'}       {size ===       'sm' && 'bx--dropdown--sm'}       {size === 'xl' &&       'bx--dropdown--xl'}       {inline &&       'bx--dropdown--inline'}       {disabled &&       'bx--dropdown--disabled'}       {light && 'bx--dropdown--light'}"     on:click="{({ target }) => {       open = ref.contains(target) ? !open : false;     }}"     disabled="{disabled}"     open="{open}"     invalid="{invalid}"     invalidText="{invalidText}"     light="{light}"     warn="{warn}"     warnText="{warnText}"   >
function create_default_slot$a(ctx) {
	let t0;
	let t1;
	let button;
	let span;
	let t2;
	let listboxmenuicon;
	let t3;
	let if_block3_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*invalid*/ ctx[12] && create_if_block_4$5();
	let if_block1 = !/*invalid*/ ctx[12] && /*warn*/ ctx[14] && create_if_block_3$5();

	function select_block_type(ctx, dirty) {
		if (/*selectedItem*/ ctx[23]) return create_if_block_2$6;
		return create_else_block$g;
	}

	let current_block_type = select_block_type(ctx);
	let if_block2 = current_block_type(ctx);

	listboxmenuicon = new ListBoxMenuIcon({
			props: {
				open: /*open*/ ctx[1],
				translateWithId: /*translateWithId*/ ctx[19]
			}
		});

	let if_block3 = /*open*/ ctx[1] && create_if_block_1$c(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			button = element("button");
			span = element("span");
			if_block2.c();
			t2 = space();
			create_component(listboxmenuicon.$$.fragment);
			t3 = space();
			if (if_block3) if_block3.c();
			if_block3_anchor = empty();
			attr(span, "class", "bx--list-box__label");
			attr(button, "tabindex", "0");
			attr(button, "role", "button");
			attr(button, "aria-expanded", /*open*/ ctx[1]);
			button.disabled = /*disabled*/ ctx[10];
			attr(button, "translatewithid", /*translateWithId*/ ctx[19]);
			attr(button, "id", /*id*/ ctx[20]);
			toggle_class(button, "bx--list-box__field", true);
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			insert(target, button, anchor);
			append(button, span);
			if_block2.m(span, null);
			append(button, t2);
			mount_component(listboxmenuicon, button, null);
			/*button_binding*/ ctx[29](button);
			insert(target, t3, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert(target, if_block3_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(button, "keydown", /*keydown_handler*/ ctx[30]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*invalid*/ ctx[12]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 4096) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$5();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[12] && /*warn*/ ctx[14]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 20480) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$5();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(span, null);
				}
			}

			const listboxmenuicon_changes = {};
			if (dirty[0] & /*open*/ 2) listboxmenuicon_changes.open = /*open*/ ctx[1];
			if (dirty[0] & /*translateWithId*/ 524288) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[19];
			listboxmenuicon.$set(listboxmenuicon_changes);

			if (!current || dirty[0] & /*open*/ 2) {
				attr(button, "aria-expanded", /*open*/ ctx[1]);
			}

			if (!current || dirty[0] & /*disabled*/ 1024) {
				button.disabled = /*disabled*/ ctx[10];
			}

			if (!current || dirty[0] & /*translateWithId*/ 524288) {
				attr(button, "translatewithid", /*translateWithId*/ ctx[19]);
			}

			if (!current || dirty[0] & /*id*/ 1048576) {
				attr(button, "id", /*id*/ ctx[20]);
			}

			if (/*open*/ ctx[1]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*open*/ 2) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_1$c(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(listboxmenuicon.$$.fragment, local);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(listboxmenuicon.$$.fragment, local);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (detaching) detach(button);
			if_block2.d();
			destroy_component(listboxmenuicon);
			/*button_binding*/ ctx[29](null);
			if (detaching) detach(t3);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(if_block3_anchor);
			mounted = false;
			dispose();
		}
	};
}

// (253:2) {#if !inline && !invalid && !warn && helperText}
function create_if_block$J(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[16]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 65536) set_data(t, /*helperText*/ ctx[16]);

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[10]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1c(ctx) {
	let div;
	let t0;
	let listbox;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*titleText*/ ctx[11] && create_if_block_5$3(ctx);

	listbox = new ListBox({
			props: {
				type: /*type*/ ctx[6],
				size: /*size*/ ctx[8],
				id: /*id*/ ctx[20],
				name: /*name*/ ctx[21],
				"aria-label": /*$$props*/ ctx[27]["aria-label"],
				class: "bx--dropdown " + (/*direction*/ ctx[7] === "top" && "bx--list-box--up") + " " + (/*invalid*/ ctx[12] && "bx--dropdown--invalid") + " " + (!/*invalid*/ ctx[12] && /*warn*/ ctx[14] && "bx--dropdown--warning") + " " + (/*open*/ ctx[1] && "bx--dropdown--open") + "\n      " + (/*size*/ ctx[8] === "sm" && "bx--dropdown--sm") + "\n      " + (/*size*/ ctx[8] === "xl" && "bx--dropdown--xl") + "\n      " + (/*inline*/ ctx[2] && "bx--dropdown--inline") + "\n      " + (/*disabled*/ ctx[10] && "bx--dropdown--disabled") + "\n      " + (/*light*/ ctx[9] && "bx--dropdown--light"),
				disabled: /*disabled*/ ctx[10],
				open: /*open*/ ctx[1],
				invalid: /*invalid*/ ctx[12],
				invalidText: /*invalidText*/ ctx[13],
				light: /*light*/ ctx[9],
				warn: /*warn*/ ctx[14],
				warnText: /*warnText*/ ctx[15],
				$$slots: { default: [create_default_slot$a] },
				$$scope: { ctx }
			}
		});

	listbox.$on("click", /*click_handler_2*/ ctx[33]);
	let if_block1 = !/*inline*/ ctx[2] && !/*invalid*/ ctx[12] && !/*warn*/ ctx[14] && /*helperText*/ ctx[16] && create_if_block$J(ctx);
	let div_levels = [/*$$restProps*/ ctx[26]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			create_component(listbox.$$.fragment);
			t1 = space();
			if (if_block1) if_block1.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--dropdown__wrapper", true);
			toggle_class(div, "bx--list-box__wrapper", true);
			toggle_class(div, "bx--dropdown__wrapper--inline", /*inline*/ ctx[2]);
			toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[2]);
			toggle_class(div, "bx--dropdown__wrapper--inline--invalid", /*inline*/ ctx[2] && /*invalid*/ ctx[12]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			mount_component(listbox, div, null);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(window, "click", /*click_handler*/ ctx[28]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*titleText*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5$3(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			const listbox_changes = {};
			if (dirty[0] & /*type*/ 64) listbox_changes.type = /*type*/ ctx[6];
			if (dirty[0] & /*size*/ 256) listbox_changes.size = /*size*/ ctx[8];
			if (dirty[0] & /*id*/ 1048576) listbox_changes.id = /*id*/ ctx[20];
			if (dirty[0] & /*name*/ 2097152) listbox_changes.name = /*name*/ ctx[21];
			if (dirty[0] & /*$$props*/ 134217728) listbox_changes["aria-label"] = /*$$props*/ ctx[27]["aria-label"];
			if (dirty[0] & /*direction, invalid, warn, open, size, inline, disabled, light*/ 22406) listbox_changes.class = "bx--dropdown " + (/*direction*/ ctx[7] === "top" && "bx--list-box--up") + " " + (/*invalid*/ ctx[12] && "bx--dropdown--invalid") + " " + (!/*invalid*/ ctx[12] && /*warn*/ ctx[14] && "bx--dropdown--warning") + " " + (/*open*/ ctx[1] && "bx--dropdown--open") + "\n      " + (/*size*/ ctx[8] === "sm" && "bx--dropdown--sm") + "\n      " + (/*size*/ ctx[8] === "xl" && "bx--dropdown--xl") + "\n      " + (/*inline*/ ctx[2] && "bx--dropdown--inline") + "\n      " + (/*disabled*/ ctx[10] && "bx--dropdown--disabled") + "\n      " + (/*light*/ ctx[9] && "bx--dropdown--light");
			if (dirty[0] & /*disabled*/ 1024) listbox_changes.disabled = /*disabled*/ ctx[10];
			if (dirty[0] & /*open*/ 2) listbox_changes.open = /*open*/ ctx[1];
			if (dirty[0] & /*invalid*/ 4096) listbox_changes.invalid = /*invalid*/ ctx[12];
			if (dirty[0] & /*invalidText*/ 8192) listbox_changes.invalidText = /*invalidText*/ ctx[13];
			if (dirty[0] & /*light*/ 512) listbox_changes.light = /*light*/ ctx[9];
			if (dirty[0] & /*warn*/ 16384) listbox_changes.warn = /*warn*/ ctx[14];
			if (dirty[0] & /*warnText*/ 32768) listbox_changes.warnText = /*warnText*/ ctx[15];

			if (dirty[0] & /*id, items, selectedIndex, selectedId, highlightedIndex, ref, itemToString, open, disabled, translateWithId, selectedItem, label, invalid, warn*/ 31085627 | dirty[1] & /*$$scope*/ 128) {
				listbox_changes.$$scope = { dirty, ctx };
			}

			listbox.$set(listbox_changes);

			if (!/*inline*/ ctx[2] && !/*invalid*/ ctx[12] && !/*warn*/ ctx[14] && /*helperText*/ ctx[16]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$J(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty[0] & /*$$restProps*/ 67108864 && /*$$restProps*/ ctx[26]]));
			toggle_class(div, "bx--dropdown__wrapper", true);
			toggle_class(div, "bx--list-box__wrapper", true);
			toggle_class(div, "bx--dropdown__wrapper--inline", /*inline*/ ctx[2]);
			toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[2]);
			toggle_class(div, "bx--dropdown__wrapper--inline--invalid", /*inline*/ ctx[2] && /*invalid*/ ctx[12]);
		},
		i(local) {
			if (current) return;
			transition_in(listbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			destroy_component(listbox);
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function instance$1b($$self, $$props, $$invalidate) {
	let selectedItem;

	const omit_props_names = [
		"items","itemToString","selectedIndex","type","direction","size","open","inline","light","disabled","titleText","invalid","invalidText","warn","warnText","helperText","label","hideLabel","translateWithId","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { items = [] } = $$props;
	let { itemToString = item => item.text || item.id } = $$props;
	let { selectedIndex = -1 } = $$props;
	let { type = "default" } = $$props;
	let { direction = "bottom" } = $$props;
	let { size = undefined } = $$props;
	let { open = false } = $$props;
	let { inline = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { titleText = "" } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { label = undefined } = $$props;
	let { hideLabel = false } = $$props;
	let { translateWithId = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let selectedId = undefined;
	let highlightedIndex = -1;

	function change(dir) {
		let index = highlightedIndex + dir;

		if (index < 0) {
			index = items.length - 1;
		} else if (index >= items.length) {
			index = 0;
		}

		$$invalidate(24, highlightedIndex = index);
	}

	const click_handler = ({ target }) => {
		if (open && ref && !ref.contains(target)) {
			$$invalidate(1, open = false);
		}
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(3, ref);
		});
	}

	const keydown_handler = ({ key }) => {
		if (key === "Enter") {
			$$invalidate(1, open = !open);

			if (highlightedIndex > -1 && highlightedIndex !== selectedIndex) {
				$$invalidate(0, selectedIndex = highlightedIndex);
				$$invalidate(1, open = false);
			}
		} else if (key === "Tab") {
			$$invalidate(1, open = false);
			ref.blur();
		} else if (key === "ArrowDown") {
			change(1);
		} else if (key === "ArrowUp") {
			change(-1);
		}
	};

	const click_handler_1 = (item, i) => {
		$$invalidate(22, selectedId = item.id);
		$$invalidate(0, selectedIndex = i);
		ref.focus();
	};

	const mouseenter_handler = i => {
		$$invalidate(24, highlightedIndex = i);
	};

	const click_handler_2 = ({ target }) => {
		$$invalidate(1, open = ref.contains(target) ? !open : false);
	};

	$$self.$$set = $$new_props => {
		$$invalidate(27, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(26, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("items" in $$new_props) $$invalidate(4, items = $$new_props.items);
		if ("itemToString" in $$new_props) $$invalidate(5, itemToString = $$new_props.itemToString);
		if ("selectedIndex" in $$new_props) $$invalidate(0, selectedIndex = $$new_props.selectedIndex);
		if ("type" in $$new_props) $$invalidate(6, type = $$new_props.type);
		if ("direction" in $$new_props) $$invalidate(7, direction = $$new_props.direction);
		if ("size" in $$new_props) $$invalidate(8, size = $$new_props.size);
		if ("open" in $$new_props) $$invalidate(1, open = $$new_props.open);
		if ("inline" in $$new_props) $$invalidate(2, inline = $$new_props.inline);
		if ("light" in $$new_props) $$invalidate(9, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(10, disabled = $$new_props.disabled);
		if ("titleText" in $$new_props) $$invalidate(11, titleText = $$new_props.titleText);
		if ("invalid" in $$new_props) $$invalidate(12, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(13, invalidText = $$new_props.invalidText);
		if ("warn" in $$new_props) $$invalidate(14, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(15, warnText = $$new_props.warnText);
		if ("helperText" in $$new_props) $$invalidate(16, helperText = $$new_props.helperText);
		if ("label" in $$new_props) $$invalidate(17, label = $$new_props.label);
		if ("hideLabel" in $$new_props) $$invalidate(18, hideLabel = $$new_props.hideLabel);
		if ("translateWithId" in $$new_props) $$invalidate(19, translateWithId = $$new_props.translateWithId);
		if ("id" in $$new_props) $$invalidate(20, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(21, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(3, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*items, selectedIndex*/ 17) {
			 $$invalidate(23, selectedItem = items[selectedIndex]);
		}

		if ($$self.$$.dirty[0] & /*selectedIndex, selectedId, selectedItem*/ 12582913) {
			 if (selectedIndex > -1) {
				dispatch("select", { selectedId, selectedIndex, selectedItem });
			}
		}

		if ($$self.$$.dirty[0] & /*type*/ 64) {
			 $$invalidate(2, inline = type === "inline");
		}

		if ($$self.$$.dirty[0] & /*open*/ 2) {
			 if (!open) {
				$$invalidate(24, highlightedIndex = -1);
			}
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		selectedIndex,
		open,
		inline,
		ref,
		items,
		itemToString,
		type,
		direction,
		size,
		light,
		disabled,
		titleText,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		label,
		hideLabel,
		translateWithId,
		id,
		name,
		selectedId,
		selectedItem,
		highlightedIndex,
		change,
		$$restProps,
		$$props,
		click_handler,
		button_binding,
		keydown_handler,
		click_handler_1,
		mouseenter_handler,
		click_handler_2
	];
}

class Dropdown extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1b,
			create_fragment$1c,
			safe_not_equal,
			{
				items: 4,
				itemToString: 5,
				selectedIndex: 0,
				type: 6,
				direction: 7,
				size: 8,
				open: 1,
				inline: 2,
				light: 9,
				disabled: 10,
				titleText: 11,
				invalid: 12,
				invalidText: 13,
				warn: 14,
				warnText: 15,
				helperText: 16,
				label: 17,
				hideLabel: 18,
				translateWithId: 19,
				id: 20,
				name: 21,
				ref: 3
			},
			[-1, -1]
		);
	}
}

/* src/Dropdown/DropdownSkeleton.svelte generated by Svelte v3.32.1 */

function create_fragment$1d(ctx) {
	let div1;
	let div0;
	let span;
	let mounted;
	let dispose;
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span = element("span");
			toggle_class(span, "bx--list-box__label", true);
			attr(div0, "role", "button");
			toggle_class(div0, "bx--list-box__field", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--dropdown-v2", true);
			toggle_class(div1, "bx--list-box", true);
			toggle_class(div1, "bx--form-item", true);
			toggle_class(div1, "bx--list-box--inline", /*inline*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--dropdown-v2", true);
			toggle_class(div1, "bx--list-box", true);
			toggle_class(div1, "bx--form-item", true);
			toggle_class(div1, "bx--list-box--inline", /*inline*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1c($$self, $$props, $$invalidate) {
	const omit_props_names = ["inline"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { inline = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("inline" in $$new_props) $$invalidate(0, inline = $$new_props.inline);
	};

	return [
		inline,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class DropdownSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1c, create_fragment$1d, safe_not_equal, { inline: 0 });
	}
}

/* node_modules/carbon-icons-svelte/lib/CheckmarkFilled16/CheckmarkFilled16.svelte generated by Svelte v3.32.1 */

function create_if_block$K(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$n(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$K(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$K(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1e(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$n(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "CheckmarkFilled16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M8,1C4.1,1,1,4.1,1,8c0,3.9,3.1,7,7,7s7-3.1,7-7C15,4.1,11.9,1,8,1z M7,11L4.3,8.3l0.9-0.8L7,9.3l4-3.9l0.9,0.8L7,11z");
			attr(path1, "d", "M7,11L4.3,8.3l0.9-0.8L7,9.3l4-3.9l0.9,0.8L7,11z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "CheckmarkFilled16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1d($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class CheckmarkFilled16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1d, create_fragment$1e, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/Loading/Loading.svelte generated by Svelte v3.32.1 */

function create_else_block$h(ctx) {
	let div;
	let label;
	let t0;
	let t1;
	let svg;
	let title;
	let t2;
	let circle;
	let div_aria_live_value;
	let if_block = /*small*/ ctx[0] && create_if_block_2$7(ctx);

	let div_levels = [
		{ "aria-atomic": "true" },
		{ "aria-labelledby": /*id*/ ctx[4] },
		{
			"aria-live": div_aria_live_value = /*active*/ ctx[1] ? "assertive" : "off"
		},
		/*$$restProps*/ ctx[6]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			label = element("label");
			t0 = text(/*description*/ ctx[3]);
			t1 = space();
			svg = svg_element("svg");
			title = svg_element("title");
			t2 = text(/*description*/ ctx[3]);
			if (if_block) if_block.c();
			circle = svg_element("circle");
			attr(label, "id", /*id*/ ctx[4]);
			toggle_class(label, "bx--visually-hidden", true);
			attr(circle, "cx", "50%");
			attr(circle, "cy", "50%");
			attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			toggle_class(circle, "bx--loading__stroke", true);
			attr(svg, "viewBox", "0 0 100 100");
			toggle_class(svg, "bx--loading__svg", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--loading", true);
			toggle_class(div, "bx--loading--small", /*small*/ ctx[0]);
			toggle_class(div, "bx--loading--stop", !/*active*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			append(label, t0);
			append(div, t1);
			append(div, svg);
			append(svg, title);
			append(title, t2);
			if (if_block) if_block.m(svg, null);
			append(svg, circle);
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 8) set_data(t0, /*description*/ ctx[3]);

			if (dirty & /*id*/ 16) {
				attr(label, "id", /*id*/ ctx[4]);
			}

			if (dirty & /*description*/ 8) set_data(t2, /*description*/ ctx[3]);

			if (/*small*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2$7(ctx);
					if_block.c();
					if_block.m(svg, circle);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*spinnerRadius*/ 32) {
				attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ "aria-atomic": "true" },
				dirty & /*id*/ 16 && { "aria-labelledby": /*id*/ ctx[4] },
				dirty & /*active*/ 2 && div_aria_live_value !== (div_aria_live_value = /*active*/ ctx[1] ? "assertive" : "off") && { "aria-live": div_aria_live_value },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(div, "bx--loading", true);
			toggle_class(div, "bx--loading--small", /*small*/ ctx[0]);
			toggle_class(div, "bx--loading--stop", !/*active*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

// (20:0) {#if withOverlay}
function create_if_block$L(ctx) {
	let div1;
	let div0;
	let label;
	let t0;
	let t1;
	let svg;
	let title;
	let t2;
	let circle;
	let div0_aria_live_value;
	let if_block = /*small*/ ctx[0] && create_if_block_1$d(ctx);
	let div1_levels = [/*$$restProps*/ ctx[6]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			label = element("label");
			t0 = text(/*description*/ ctx[3]);
			t1 = space();
			svg = svg_element("svg");
			title = svg_element("title");
			t2 = text(/*description*/ ctx[3]);
			if (if_block) if_block.c();
			circle = svg_element("circle");
			attr(label, "id", /*id*/ ctx[4]);
			toggle_class(label, "bx--visually-hidden", true);
			attr(circle, "cx", "50%");
			attr(circle, "cy", "50%");
			attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			toggle_class(circle, "bx--loading__stroke", true);
			attr(svg, "viewBox", "0 0 100 100");
			toggle_class(svg, "bx--loading__svg", true);
			attr(div0, "aria-atomic", "true");
			attr(div0, "aria-labelledby", /*id*/ ctx[4]);
			attr(div0, "aria-live", div0_aria_live_value = /*active*/ ctx[1] ? "assertive" : "off");
			toggle_class(div0, "bx--loading", true);
			toggle_class(div0, "bx--loading--small", /*small*/ ctx[0]);
			toggle_class(div0, "bx--loading--stop", !/*active*/ ctx[1]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--loading-overlay", true);
			toggle_class(div1, "bx--loading-overlay--stop", !/*active*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, label);
			append(label, t0);
			append(div0, t1);
			append(div0, svg);
			append(svg, title);
			append(title, t2);
			if (if_block) if_block.m(svg, null);
			append(svg, circle);
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 8) set_data(t0, /*description*/ ctx[3]);

			if (dirty & /*id*/ 16) {
				attr(label, "id", /*id*/ ctx[4]);
			}

			if (dirty & /*description*/ 8) set_data(t2, /*description*/ ctx[3]);

			if (/*small*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$d(ctx);
					if_block.c();
					if_block.m(svg, circle);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*spinnerRadius*/ 32) {
				attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			}

			if (dirty & /*id*/ 16) {
				attr(div0, "aria-labelledby", /*id*/ ctx[4]);
			}

			if (dirty & /*active*/ 2 && div0_aria_live_value !== (div0_aria_live_value = /*active*/ ctx[1] ? "assertive" : "off")) {
				attr(div0, "aria-live", div0_aria_live_value);
			}

			if (dirty & /*small*/ 1) {
				toggle_class(div0, "bx--loading--small", /*small*/ ctx[0]);
			}

			if (dirty & /*active*/ 2) {
				toggle_class(div0, "bx--loading--stop", !/*active*/ ctx[1]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(div1, "bx--loading-overlay", true);
			toggle_class(div1, "bx--loading-overlay--stop", !/*active*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
		}
	};
}

// (67:6) {#if small}
function create_if_block_2$7(ctx) {
	let circle;

	return {
		c() {
			circle = svg_element("circle");
			attr(circle, "cx", "50%");
			attr(circle, "cy", "50%");
			attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			toggle_class(circle, "bx--loading__background", true);
		},
		m(target, anchor) {
			insert(target, circle, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*spinnerRadius*/ 32) {
				attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(circle);
		}
	};
}

// (38:8) {#if small}
function create_if_block_1$d(ctx) {
	let circle;

	return {
		c() {
			circle = svg_element("circle");
			attr(circle, "cx", "50%");
			attr(circle, "cy", "50%");
			attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			toggle_class(circle, "bx--loading__background", true);
		},
		m(target, anchor) {
			insert(target, circle, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*spinnerRadius*/ 32) {
				attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(circle);
		}
	};
}

function create_fragment$1f(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*withOverlay*/ ctx[2]) return create_if_block$L;
		return create_else_block$h;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1e($$self, $$props, $$invalidate) {
	let spinnerRadius;
	const omit_props_names = ["small","active","withOverlay","description","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { small = false } = $$props;
	let { active = true } = $$props;
	let { withOverlay = true } = $$props;
	let { description = "Active loading indicator" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("small" in $$new_props) $$invalidate(0, small = $$new_props.small);
		if ("active" in $$new_props) $$invalidate(1, active = $$new_props.active);
		if ("withOverlay" in $$new_props) $$invalidate(2, withOverlay = $$new_props.withOverlay);
		if ("description" in $$new_props) $$invalidate(3, description = $$new_props.description);
		if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*small*/ 1) {
			 $$invalidate(5, spinnerRadius = small ? "42" : "44");
		}
	};

	return [small, active, withOverlay, description, id, spinnerRadius, $$restProps];
}

class Loading extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1e, create_fragment$1f, safe_not_equal, {
			small: 0,
			active: 1,
			withOverlay: 2,
			description: 3,
			id: 4
		});
	}
}

/* src/FileUploader/Filename.svelte generated by Svelte v3.32.1 */

function create_if_block_3$6(ctx) {
	let loading;
	let current;

	const loading_spread_levels = [
		{ description: /*iconDescription*/ ctx[1] },
		/*$$restProps*/ ctx[3],
		{ small: true },
		{ withOverlay: false }
	];

	let loading_props = {};

	for (let i = 0; i < loading_spread_levels.length; i += 1) {
		loading_props = assign(loading_props, loading_spread_levels[i]);
	}

	loading = new Loading({ props: loading_props });

	return {
		c() {
			create_component(loading.$$.fragment);
		},
		m(target, anchor) {
			mount_component(loading, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const loading_changes = (dirty & /*iconDescription, $$restProps*/ 10)
			? get_spread_update(loading_spread_levels, [
					dirty & /*iconDescription*/ 2 && { description: /*iconDescription*/ ctx[1] },
					dirty & /*$$restProps*/ 8 && get_spread_object(/*$$restProps*/ ctx[3]),
					loading_spread_levels[2],
					loading_spread_levels[3]
				])
			: {};

			loading.$set(loading_changes);
		},
		i(local) {
			if (current) return;
			transition_in(loading.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loading.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(loading, detaching);
		}
	};
}

// (29:0) {#if status === "edit"}
function create_if_block_1$e(ctx) {
	let t;
	let close16;
	let current;
	let if_block = /*invalid*/ ctx[2] && create_if_block_2$8();

	const close16_spread_levels = [
		{ "aria-label": /*iconDescription*/ ctx[1] },
		{ title: /*iconDescription*/ ctx[1] },
		{ class: "bx--file-close" },
		/*$$restProps*/ ctx[3]
	];

	let close16_props = {};

	for (let i = 0; i < close16_spread_levels.length; i += 1) {
		close16_props = assign(close16_props, close16_spread_levels[i]);
	}

	close16 = new Close16({ props: close16_props });
	close16.$on("click", /*click_handler*/ ctx[4]);
	close16.$on("keydown", /*keydown_handler*/ ctx[5]);

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			create_component(close16.$$.fragment);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			mount_component(close16, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*invalid*/ ctx[2]) {
				if (if_block) {
					if (dirty & /*invalid*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$8();
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const close16_changes = (dirty & /*iconDescription, $$restProps*/ 10)
			? get_spread_update(close16_spread_levels, [
					dirty & /*iconDescription*/ 2 && { "aria-label": /*iconDescription*/ ctx[1] },
					dirty & /*iconDescription*/ 2 && { title: /*iconDescription*/ ctx[1] },
					close16_spread_levels[2],
					dirty & /*$$restProps*/ 8 && get_spread_object(/*$$restProps*/ ctx[3])
				])
			: {};

			close16.$set(close16_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(close16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(close16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			destroy_component(close16, detaching);
		}
	};
}

// (30:2) {#if invalid}
function create_if_block_2$8(ctx) {
	let warningfilled16;
	let current;
	warningfilled16 = new WarningFilled16({ props: { class: "bx--file-invalid" } });

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (43:0) {#if status === "complete"}
function create_if_block$M(ctx) {
	let checkmarkfilled16;
	let current;

	const checkmarkfilled16_spread_levels = [
		{ "aria-label": /*iconDescription*/ ctx[1] },
		{ title: /*iconDescription*/ ctx[1] },
		{ class: "bx--file-complete" },
		/*$$restProps*/ ctx[3]
	];

	let checkmarkfilled16_props = {};

	for (let i = 0; i < checkmarkfilled16_spread_levels.length; i += 1) {
		checkmarkfilled16_props = assign(checkmarkfilled16_props, checkmarkfilled16_spread_levels[i]);
	}

	checkmarkfilled16 = new CheckmarkFilled16({ props: checkmarkfilled16_props });

	return {
		c() {
			create_component(checkmarkfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkmarkfilled16, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkmarkfilled16_changes = (dirty & /*iconDescription, $$restProps*/ 10)
			? get_spread_update(checkmarkfilled16_spread_levels, [
					dirty & /*iconDescription*/ 2 && { "aria-label": /*iconDescription*/ ctx[1] },
					dirty & /*iconDescription*/ 2 && { title: /*iconDescription*/ ctx[1] },
					checkmarkfilled16_spread_levels[2],
					dirty & /*$$restProps*/ 8 && get_spread_object(/*$$restProps*/ ctx[3])
				])
			: {};

			checkmarkfilled16.$set(checkmarkfilled16_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkmarkfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkmarkfilled16, detaching);
		}
	};
}

function create_fragment$1g(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*status*/ ctx[0] === "uploading" && create_if_block_3$6(ctx);
	let if_block1 = /*status*/ ctx[0] === "edit" && create_if_block_1$e(ctx);
	let if_block2 = /*status*/ ctx[0] === "complete" && create_if_block$M(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*status*/ ctx[0] === "uploading") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*status*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$6(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*status*/ ctx[0] === "edit") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*status*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$e(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*status*/ ctx[0] === "complete") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*status*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$M(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

function instance$1f($$self, $$props, $$invalidate) {
	const omit_props_names = ["status","iconDescription","invalid"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { status = "uploading" } = $$props;
	let { iconDescription = "" } = $$props;
	let { invalid = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("status" in $$new_props) $$invalidate(0, status = $$new_props.status);
		if ("iconDescription" in $$new_props) $$invalidate(1, iconDescription = $$new_props.iconDescription);
		if ("invalid" in $$new_props) $$invalidate(2, invalid = $$new_props.invalid);
	};

	return [status, iconDescription, invalid, $$restProps, click_handler, keydown_handler];
}

class Filename extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1f, create_fragment$1g, safe_not_equal, {
			status: 0,
			iconDescription: 1,
			invalid: 2
		});
	}
}

/* src/FileUploader/FileUploaderButton.svelte generated by Svelte v3.32.1 */

function create_fragment$1h(ctx) {
	let label;
	let span;
	let t0;
	let label_tabindex_value;
	let label_class_value;
	let t1;
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "file" },
		{ tabindex: "-1" },
		{ accept: /*accept*/ ctx[2] },
		{ disabled: /*disabled*/ ctx[4] },
		{ id: /*id*/ ctx[9] },
		{ multiple: /*multiple*/ ctx[3] },
		{ name: /*name*/ ctx[10] },
		/*$$restProps*/ ctx[11]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			label = element("label");
			span = element("span");
			t0 = text(/*labelText*/ ctx[0]);
			t1 = space();
			input = element("input");
			attr(span, "role", /*role*/ ctx[7]);
			attr(label, "aria-disabled", /*disabled*/ ctx[4]);
			attr(label, "for", /*id*/ ctx[9]);
			attr(label, "tabindex", label_tabindex_value = /*disabled*/ ctx[4] ? "-1" : /*tabindex*/ ctx[8]);
			attr(label, "class", label_class_value = /*kind*/ ctx[6] && `bx--btn--${/*kind*/ ctx[6]}`);
			toggle_class(label, "bx--btn", true);
			toggle_class(label, "bx--btn--sm", true);
			toggle_class(label, "bx--btn--disabled", /*disabled*/ ctx[4]);
			set_attributes(input, input_data);
			toggle_class(input, "bx--visually-hidden", true);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, span);
			append(span, t0);
			insert(target, t1, anchor);
			insert(target, input, anchor);
			/*input_binding*/ ctx[16](input);

			if (!mounted) {
				dispose = [
					listen(label, "keydown", /*keydown_handler*/ ctx[14]),
					listen(label, "keydown", /*keydown_handler_1*/ ctx[15]),
					listen(input, "change", stop_propagation(/*change_handler*/ ctx[12])),
					listen(input, "change", stop_propagation(/*change_handler_1*/ ctx[17])),
					listen(input, "click", /*click_handler*/ ctx[13]),
					listen(input, "click", click_handler_1)
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*labelText*/ 1) set_data(t0, /*labelText*/ ctx[0]);

			if (dirty & /*role*/ 128) {
				attr(span, "role", /*role*/ ctx[7]);
			}

			if (dirty & /*disabled*/ 16) {
				attr(label, "aria-disabled", /*disabled*/ ctx[4]);
			}

			if (dirty & /*id*/ 512) {
				attr(label, "for", /*id*/ ctx[9]);
			}

			if (dirty & /*disabled, tabindex*/ 272 && label_tabindex_value !== (label_tabindex_value = /*disabled*/ ctx[4] ? "-1" : /*tabindex*/ ctx[8])) {
				attr(label, "tabindex", label_tabindex_value);
			}

			if (dirty & /*kind*/ 64 && label_class_value !== (label_class_value = /*kind*/ ctx[6] && `bx--btn--${/*kind*/ ctx[6]}`)) {
				attr(label, "class", label_class_value);
			}

			if (dirty & /*kind*/ 64) {
				toggle_class(label, "bx--btn", true);
			}

			if (dirty & /*kind*/ 64) {
				toggle_class(label, "bx--btn--sm", true);
			}

			if (dirty & /*kind, disabled*/ 80) {
				toggle_class(label, "bx--btn--disabled", /*disabled*/ ctx[4]);
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "file" },
				{ tabindex: "-1" },
				dirty & /*accept*/ 4 && { accept: /*accept*/ ctx[2] },
				dirty & /*disabled*/ 16 && { disabled: /*disabled*/ ctx[4] },
				dirty & /*id*/ 512 && { id: /*id*/ ctx[9] },
				dirty & /*multiple*/ 8 && { multiple: /*multiple*/ ctx[3] },
				dirty & /*name*/ 1024 && { name: /*name*/ ctx[10] },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
			]));

			toggle_class(input, "bx--visually-hidden", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(label);
			if (detaching) detach(t1);
			if (detaching) detach(input);
			/*input_binding*/ ctx[16](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

const click_handler_1 = ({ target }) => {
	target.value = null;
};

function instance$1g($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"accept","multiple","disabled","disableLabelChanges","kind","labelText","role","tabindex","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { accept = [] } = $$props;
	let { multiple = false } = $$props;
	let { disabled = false } = $$props;
	let { disableLabelChanges = false } = $$props;
	let { kind = "primary" } = $$props;
	let { labelText = "Add file" } = $$props;
	let { role = "button" } = $$props;
	let { tabindex = "0" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;

	function change_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	const keydown_handler_1 = ({ key }) => {
		if (key === " " || key === "Enter") {
			ref.click();
		}
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler_1 = ({ target }) => {
		const files = target.files;
		const length = files.length;

		if (files && !disableLabelChanges) {
			$$invalidate(0, labelText = length > 1 ? `${length} files` : files[0].name);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("accept" in $$new_props) $$invalidate(2, accept = $$new_props.accept);
		if ("multiple" in $$new_props) $$invalidate(3, multiple = $$new_props.multiple);
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("disableLabelChanges" in $$new_props) $$invalidate(5, disableLabelChanges = $$new_props.disableLabelChanges);
		if ("kind" in $$new_props) $$invalidate(6, kind = $$new_props.kind);
		if ("labelText" in $$new_props) $$invalidate(0, labelText = $$new_props.labelText);
		if ("role" in $$new_props) $$invalidate(7, role = $$new_props.role);
		if ("tabindex" in $$new_props) $$invalidate(8, tabindex = $$new_props.tabindex);
		if ("id" in $$new_props) $$invalidate(9, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(10, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	return [
		labelText,
		ref,
		accept,
		multiple,
		disabled,
		disableLabelChanges,
		kind,
		role,
		tabindex,
		id,
		name,
		$$restProps,
		change_handler,
		click_handler,
		keydown_handler,
		keydown_handler_1,
		input_binding,
		change_handler_1
	];
}

class FileUploaderButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1g, create_fragment$1h, safe_not_equal, {
			accept: 2,
			multiple: 3,
			disabled: 4,
			disableLabelChanges: 5,
			kind: 6,
			labelText: 0,
			role: 7,
			tabindex: 8,
			id: 9,
			name: 10,
			ref: 1
		});
	}
}

/* src/FileUploader/FileUploader.svelte generated by Svelte v3.32.1 */

function get_each_context$8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i].name;
	child_ctx[25] = i;
	return child_ctx;
}

// (102:4) {#each files as { name }
function create_each_block$8(key_1, ctx) {
	let span1;
	let p;
	let t0_value = /*name*/ ctx[9] + "";
	let t0;
	let t1;
	let span0;
	let filename;
	let t2;
	let current;

	function keydown_handler_1(...args) {
		return /*keydown_handler_1*/ ctx[19](/*i*/ ctx[25], ...args);
	}

	function click_handler_2() {
		return /*click_handler_2*/ ctx[21](/*i*/ ctx[25]);
	}

	filename = new Filename({
			props: {
				iconDescription: /*iconDescription*/ ctx[8],
				status: /*status*/ ctx[1]
			}
		});

	filename.$on("keydown", /*keydown_handler*/ ctx[18]);
	filename.$on("keydown", keydown_handler_1);
	filename.$on("click", /*click_handler_1*/ ctx[20]);
	filename.$on("click", click_handler_2);

	return {
		key: key_1,
		first: null,
		c() {
			span1 = element("span");
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			span0 = element("span");
			create_component(filename.$$.fragment);
			t2 = space();
			toggle_class(p, "bx--file-filename", true);
			toggle_class(span0, "bx--file__state-container", true);
			toggle_class(span1, "bx--file__selected-file", true);
			this.first = span1;
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, p);
			append(p, t0);
			append(span1, t1);
			append(span1, span0);
			mount_component(filename, span0, null);
			append(span1, t2);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*files*/ 1) && t0_value !== (t0_value = /*name*/ ctx[9] + "")) set_data(t0, t0_value);
			const filename_changes = {};
			if (dirty & /*iconDescription*/ 256) filename_changes.iconDescription = /*iconDescription*/ ctx[8];
			if (dirty & /*status*/ 2) filename_changes.status = /*status*/ ctx[1];
			filename.$set(filename_changes);
		},
		i(local) {
			if (current) return;
			transition_in(filename.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(filename.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span1);
			destroy_component(filename);
		}
	};
}

function create_fragment$1i(ctx) {
	let div1;
	let strong;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let fileuploaderbutton;
	let t4;
	let div0;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let mounted;
	let dispose;

	fileuploaderbutton = new FileUploaderButton({
			props: {
				disableLabelChanges: true,
				labelText: /*buttonLabel*/ ctx[7],
				accept: /*accept*/ ctx[2],
				name: /*name*/ ctx[9],
				multiple: /*multiple*/ ctx[3],
				kind: /*kind*/ ctx[6]
			}
		});

	fileuploaderbutton.$on("change", /*change_handler*/ ctx[16]);
	fileuploaderbutton.$on("change", /*change_handler_1*/ ctx[17]);
	let each_value = /*files*/ ctx[0];
	const get_key = ctx => /*name*/ ctx[9];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$8(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$8(key, child_ctx));
	}

	let div1_levels = [/*$$restProps*/ ctx[10]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			strong = element("strong");
			t0 = text(/*labelTitle*/ ctx[5]);
			t1 = space();
			p = element("p");
			t2 = text(/*labelDescription*/ ctx[4]);
			t3 = space();
			create_component(fileuploaderbutton.$$.fragment);
			t4 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(strong, "bx--file--label", true);
			toggle_class(p, "bx--label-description", true);
			toggle_class(div0, "bx--file-container", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, strong);
			append(strong, t0);
			append(div1, t1);
			append(div1, p);
			append(p, t2);
			append(div1, t3);
			mount_component(fileuploaderbutton, div1, null);
			append(div1, t4);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[12]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*labelTitle*/ 32) set_data(t0, /*labelTitle*/ ctx[5]);
			if (!current || dirty & /*labelDescription*/ 16) set_data(t2, /*labelDescription*/ ctx[4]);
			const fileuploaderbutton_changes = {};
			if (dirty & /*buttonLabel*/ 128) fileuploaderbutton_changes.labelText = /*buttonLabel*/ ctx[7];
			if (dirty & /*accept*/ 4) fileuploaderbutton_changes.accept = /*accept*/ ctx[2];
			if (dirty & /*name*/ 512) fileuploaderbutton_changes.name = /*name*/ ctx[9];
			if (dirty & /*multiple*/ 8) fileuploaderbutton_changes.multiple = /*multiple*/ ctx[3];
			if (dirty & /*kind*/ 64) fileuploaderbutton_changes.kind = /*kind*/ ctx[6];
			fileuploaderbutton.$set(fileuploaderbutton_changes);

			if (dirty & /*iconDescription, status, files*/ 259) {
				each_value = /*files*/ ctx[0];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, outro_and_destroy_block, create_each_block$8, null, get_each_context$8);
				check_outros();
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(fileuploaderbutton.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(fileuploaderbutton.$$.fragment, local);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(fileuploaderbutton);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1h($$self, $$props, $$invalidate) {
	let prevFiles;

	const omit_props_names = [
		"status","accept","files","multiple","clearFiles","labelDescription","labelTitle","kind","buttonLabel","iconDescription","name"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { status = "uploading" } = $$props;
	let { accept = [] } = $$props;
	let { files = [] } = $$props;
	let { multiple = false } = $$props;

	const clearFiles = () => {
		$$invalidate(0, files = []);
	};

	let { labelDescription = "" } = $$props;
	let { labelTitle = "" } = $$props;
	let { kind = "primary" } = $$props;
	let { buttonLabel = "" } = $$props;
	let { iconDescription = "Provide icon description" } = $$props;
	let { name = "" } = $$props;
	const dispatch = createEventDispatcher();

	afterUpdate(() => {
		if (files.length > prevFiles.length) {
			dispatch("add", files);
		} else {
			dispatch("remove", prevFiles.filter(_ => !files.includes(_)));
		}

		prevFiles = [...files];
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	const change_handler_1 = ({ target }) => {
		$$invalidate(0, files = [...target.files]);
	};

	function keydown_handler(event) {
		bubble($$self, event);
	}

	const keydown_handler_1 = (i, { key }) => {
		if (key === " " || key === "Enter") {
			$$invalidate(0, files = files.filter((_, index) => index !== i));
		}
	};

	function click_handler_1(event) {
		bubble($$self, event);
	}

	const click_handler_2 = i => {
		$$invalidate(0, files = files.filter((_, index) => index !== i));
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("status" in $$new_props) $$invalidate(1, status = $$new_props.status);
		if ("accept" in $$new_props) $$invalidate(2, accept = $$new_props.accept);
		if ("files" in $$new_props) $$invalidate(0, files = $$new_props.files);
		if ("multiple" in $$new_props) $$invalidate(3, multiple = $$new_props.multiple);
		if ("labelDescription" in $$new_props) $$invalidate(4, labelDescription = $$new_props.labelDescription);
		if ("labelTitle" in $$new_props) $$invalidate(5, labelTitle = $$new_props.labelTitle);
		if ("kind" in $$new_props) $$invalidate(6, kind = $$new_props.kind);
		if ("buttonLabel" in $$new_props) $$invalidate(7, buttonLabel = $$new_props.buttonLabel);
		if ("iconDescription" in $$new_props) $$invalidate(8, iconDescription = $$new_props.iconDescription);
		if ("name" in $$new_props) $$invalidate(9, name = $$new_props.name);
	};

	 prevFiles = [];

	return [
		files,
		status,
		accept,
		multiple,
		labelDescription,
		labelTitle,
		kind,
		buttonLabel,
		iconDescription,
		name,
		$$restProps,
		clearFiles,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		change_handler_1,
		keydown_handler,
		keydown_handler_1,
		click_handler_1,
		click_handler_2
	];
}

class FileUploader extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1h, create_fragment$1i, safe_not_equal, {
			status: 1,
			accept: 2,
			files: 0,
			multiple: 3,
			clearFiles: 11,
			labelDescription: 4,
			labelTitle: 5,
			kind: 6,
			buttonLabel: 7,
			iconDescription: 8,
			name: 9
		});
	}

	get clearFiles() {
		return this.$$.ctx[11];
	}
}

/* src/FileUploader/FileUploaderItem.svelte generated by Svelte v3.32.1 */

function create_if_block$N(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let if_block = /*errorBody*/ ctx[4] && create_if_block_1$f(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t0 = text(/*errorSubject*/ ctx[3]);
			t1 = space();
			if (if_block) if_block.c();
			toggle_class(div0, "bx--form-requirement__title", true);
			toggle_class(div1, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, t0);
			append(div1, t1);
			if (if_block) if_block.m(div1, null);
		},
		p(ctx, dirty) {
			if (dirty & /*errorSubject*/ 8) set_data(t0, /*errorSubject*/ ctx[3]);

			if (/*errorBody*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$f(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
		}
	};
}

// (64:6) {#if errorBody}
function create_if_block_1$f(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*errorBody*/ ctx[4]);
			toggle_class(p, "bx--form-requirement__supplement", true);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*errorBody*/ 16) set_data(t, /*errorBody*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment$1j(ctx) {
	let span1;
	let p;
	let t0;
	let t1;
	let span0;
	let filename;
	let t2;
	let current;
	let mounted;
	let dispose;

	filename = new Filename({
			props: {
				iconDescription: /*iconDescription*/ ctx[1],
				status: /*status*/ ctx[0],
				invalid: /*invalid*/ ctx[2]
			}
		});

	filename.$on("keydown", /*keydown_handler*/ ctx[12]);
	filename.$on("click", /*click_handler*/ ctx[13]);
	let if_block = /*invalid*/ ctx[2] && /*errorSubject*/ ctx[3] && create_if_block$N(ctx);
	let span1_levels = [{ id: /*id*/ ctx[5] }, /*$$restProps*/ ctx[8]];
	let span1_data = {};

	for (let i = 0; i < span1_levels.length; i += 1) {
		span1_data = assign(span1_data, span1_levels[i]);
	}

	return {
		c() {
			span1 = element("span");
			p = element("p");
			t0 = text(/*name*/ ctx[6]);
			t1 = space();
			span0 = element("span");
			create_component(filename.$$.fragment);
			t2 = space();
			if (if_block) if_block.c();
			toggle_class(p, "bx--file-filename", true);
			toggle_class(span0, "bx--file__state-container", true);
			set_attributes(span1, span1_data);
			toggle_class(span1, "bx--file__selected-file", true);
			toggle_class(span1, "bx--file__selected-file--invalid", /*invalid*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, p);
			append(p, t0);
			append(span1, t1);
			append(span1, span0);
			mount_component(filename, span0, null);
			append(span1, t2);
			if (if_block) if_block.m(span1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(span1, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(span1, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(span1, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*name*/ 64) set_data(t0, /*name*/ ctx[6]);
			const filename_changes = {};
			if (dirty & /*iconDescription*/ 2) filename_changes.iconDescription = /*iconDescription*/ ctx[1];
			if (dirty & /*status*/ 1) filename_changes.status = /*status*/ ctx[0];
			if (dirty & /*invalid*/ 4) filename_changes.invalid = /*invalid*/ ctx[2];
			filename.$set(filename_changes);

			if (/*invalid*/ ctx[2] && /*errorSubject*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$N(ctx);
					if_block.c();
					if_block.m(span1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(span1, span1_data = get_spread_update(span1_levels, [
				(!current || dirty & /*id*/ 32) && { id: /*id*/ ctx[5] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			toggle_class(span1, "bx--file__selected-file", true);
			toggle_class(span1, "bx--file__selected-file--invalid", /*invalid*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(filename.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(filename.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span1);
			destroy_component(filename);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1i($$self, $$props, $$invalidate) {
	const omit_props_names = ["status","iconDescription","invalid","errorSubject","errorBody","id","name"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { status = "uploading" } = $$props;
	let { iconDescription = "" } = $$props;
	let { invalid = false } = $$props;
	let { errorSubject = "" } = $$props;
	let { errorBody = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	const dispatch = createEventDispatcher();

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	const keydown_handler = ({ key }) => {
		if (key === " " || key === "Enter") {
			dispatch("delete", id);
		}
	};

	const click_handler = () => {
		dispatch("delete", id);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("status" in $$new_props) $$invalidate(0, status = $$new_props.status);
		if ("iconDescription" in $$new_props) $$invalidate(1, iconDescription = $$new_props.iconDescription);
		if ("invalid" in $$new_props) $$invalidate(2, invalid = $$new_props.invalid);
		if ("errorSubject" in $$new_props) $$invalidate(3, errorSubject = $$new_props.errorSubject);
		if ("errorBody" in $$new_props) $$invalidate(4, errorBody = $$new_props.errorBody);
		if ("id" in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(6, name = $$new_props.name);
	};

	return [
		status,
		iconDescription,
		invalid,
		errorSubject,
		errorBody,
		id,
		name,
		dispatch,
		$$restProps,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler
	];
}

class FileUploaderItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1i, create_fragment$1j, safe_not_equal, {
			status: 0,
			iconDescription: 1,
			invalid: 2,
			errorSubject: 3,
			errorBody: 4,
			id: 5,
			name: 6
		});
	}
}

/* src/FileUploader/FileUploaderDropContainer.svelte generated by Svelte v3.32.1 */

function create_fragment$1k(ctx) {
	let div1;
	let label;
	let div0;
	let t0;
	let t1;
	let input;
	let mounted;
	let dispose;
	let div1_levels = [/*$$restProps*/ ctx[12]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			label = element("label");
			div0 = element("div");
			t0 = text(/*labelText*/ ctx[4]);
			t1 = space();
			input = element("input");
			attr(input, "type", "file");
			attr(input, "tabindex", "-1");
			attr(input, "id", /*id*/ ctx[8]);
			input.disabled = /*disabled*/ ctx[6];
			attr(input, "accept", /*accept*/ ctx[1]);
			attr(input, "name", /*name*/ ctx[9]);
			input.multiple = /*multiple*/ ctx[2];
			toggle_class(input, "bx--file-input", true);
			attr(div0, "role", /*role*/ ctx[5]);
			toggle_class(div0, "bx--file__drop-container", true);
			toggle_class(div0, "bx--file__drop-container--drag-over", /*over*/ ctx[10]);
			attr(label, "for", /*id*/ ctx[8]);
			attr(label, "tabindex", /*tabindex*/ ctx[7]);
			toggle_class(label, "bx--file-browse-btn", true);
			toggle_class(label, "bx--file-browse-btn--disabled", /*disabled*/ ctx[6]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--file", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, label);
			append(label, div0);
			append(div0, t0);
			append(div0, t1);
			append(div0, input);
			/*input_binding*/ ctx[19](input);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[17]),
					listen(input, "change", /*change_handler_1*/ ctx[20]),
					listen(input, "click", /*click_handler*/ ctx[18]),
					listen(input, "click", click_handler_1$1),
					listen(label, "keydown", /*keydown_handler*/ ctx[16]),
					listen(label, "keydown", /*keydown_handler_1*/ ctx[21]),
					listen(div1, "dragover", /*dragover_handler*/ ctx[13]),
					listen(div1, "dragover", stop_propagation(prevent_default(/*dragover_handler_1*/ ctx[22]))),
					listen(div1, "dragleave", /*dragleave_handler*/ ctx[14]),
					listen(div1, "dragleave", stop_propagation(prevent_default(/*dragleave_handler_1*/ ctx[23]))),
					listen(div1, "drop", /*drop_handler*/ ctx[15]),
					listen(div1, "drop", stop_propagation(prevent_default(/*drop_handler_1*/ ctx[24])))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*labelText*/ 16) set_data(t0, /*labelText*/ ctx[4]);

			if (dirty & /*id*/ 256) {
				attr(input, "id", /*id*/ ctx[8]);
			}

			if (dirty & /*disabled*/ 64) {
				input.disabled = /*disabled*/ ctx[6];
			}

			if (dirty & /*accept*/ 2) {
				attr(input, "accept", /*accept*/ ctx[1]);
			}

			if (dirty & /*name*/ 512) {
				attr(input, "name", /*name*/ ctx[9]);
			}

			if (dirty & /*multiple*/ 4) {
				input.multiple = /*multiple*/ ctx[2];
			}

			if (dirty & /*role*/ 32) {
				attr(div0, "role", /*role*/ ctx[5]);
			}

			if (dirty & /*over*/ 1024) {
				toggle_class(div0, "bx--file__drop-container--drag-over", /*over*/ ctx[10]);
			}

			if (dirty & /*id*/ 256) {
				attr(label, "for", /*id*/ ctx[8]);
			}

			if (dirty & /*tabindex*/ 128) {
				attr(label, "tabindex", /*tabindex*/ ctx[7]);
			}

			if (dirty & /*disabled*/ 64) {
				toggle_class(label, "bx--file-browse-btn--disabled", /*disabled*/ ctx[6]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]]));
			toggle_class(div1, "bx--file", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			/*input_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

const click_handler_1$1 = ({ target }) => {
	target.value = null;
};

function instance$1j($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"accept","multiple","validateFiles","labelText","role","disabled","tabindex","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { accept = [] } = $$props;
	let { multiple = false } = $$props;
	let { validateFiles = files => files } = $$props;
	let { labelText = "Add file" } = $$props;
	let { role = "button" } = $$props;
	let { disabled = false } = $$props;
	let { tabindex = "0" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let over = false;

	function dragover_handler(event) {
		bubble($$self, event);
	}

	function dragleave_handler(event) {
		bubble($$self, event);
	}

	function drop_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const change_handler_1 = ({ target }) => {
		dispatch("add", validateFiles(target.files));
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === " " || key === "Enter") {
			ref.click();
		}
	};

	const dragover_handler_1 = ({ dataTransfer }) => {
		if (!disabled) {
			$$invalidate(10, over = true);
			dataTransfer.dropEffect = "copy";
		}
	};

	const dragleave_handler_1 = ({ dataTransfer }) => {
		if (!disabled) {
			$$invalidate(10, over = false);
			dataTransfer.dropEffect = "move";
		}
	};

	const drop_handler_1 = ({ dataTransfer }) => {
		if (!disabled) {
			$$invalidate(10, over = false);
			dispatch("add", validateFiles(dataTransfer.files));
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("accept" in $$new_props) $$invalidate(1, accept = $$new_props.accept);
		if ("multiple" in $$new_props) $$invalidate(2, multiple = $$new_props.multiple);
		if ("validateFiles" in $$new_props) $$invalidate(3, validateFiles = $$new_props.validateFiles);
		if ("labelText" in $$new_props) $$invalidate(4, labelText = $$new_props.labelText);
		if ("role" in $$new_props) $$invalidate(5, role = $$new_props.role);
		if ("disabled" in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("tabindex" in $$new_props) $$invalidate(7, tabindex = $$new_props.tabindex);
		if ("id" in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(9, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	return [
		ref,
		accept,
		multiple,
		validateFiles,
		labelText,
		role,
		disabled,
		tabindex,
		id,
		name,
		over,
		dispatch,
		$$restProps,
		dragover_handler,
		dragleave_handler,
		drop_handler,
		keydown_handler,
		change_handler,
		click_handler,
		input_binding,
		change_handler_1,
		keydown_handler_1,
		dragover_handler_1,
		dragleave_handler_1,
		drop_handler_1
	];
}

class FileUploaderDropContainer extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1j, create_fragment$1k, safe_not_equal, {
			accept: 1,
			multiple: 2,
			validateFiles: 3,
			labelText: 4,
			role: 5,
			disabled: 6,
			tabindex: 7,
			id: 8,
			name: 9,
			ref: 0
		});
	}
}

/* src/FileUploader/FileUploaderSkeleton.svelte generated by Svelte v3.32.1 */

function create_fragment$1l(ctx) {
	let div;
	let skeletontext0;
	let t0;
	let skeletontext1;
	let t1;
	let buttonskeleton;
	let current;
	let mounted;
	let dispose;
	skeletontext0 = new SkeletonText({ props: { heading: true, width: "100px" } });

	skeletontext1 = new SkeletonText({
			props: {
				width: "225px",
				class: "bx--label-description"
			}
		});

	buttonskeleton = new ButtonSkeleton({});
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			create_component(skeletontext0.$$.fragment);
			t0 = space();
			create_component(skeletontext1.$$.fragment);
			t1 = space();
			create_component(buttonskeleton.$$.fragment);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(skeletontext0, div, null);
			append(div, t0);
			mount_component(skeletontext1, div, null);
			append(div, t1);
			mount_component(buttonskeleton, div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[1]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(skeletontext0.$$.fragment, local);
			transition_in(skeletontext1.$$.fragment, local);
			transition_in(buttonskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(skeletontext0.$$.fragment, local);
			transition_out(skeletontext1.$$.fragment, local);
			transition_out(buttonskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(skeletontext0);
			destroy_component(skeletontext1);
			destroy_component(buttonskeleton);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1k($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class FileUploaderSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1k, create_fragment$1l, safe_not_equal, {});
	}
}

/* src/Form/Form.svelte generated by Svelte v3.32.1 */

function create_fragment$1m(ctx) {
	let form;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let form_levels = [/*$$restProps*/ ctx[0]];
	let form_data = {};

	for (let i = 0; i < form_levels.length; i += 1) {
		form_data = assign(form_data, form_levels[i]);
	}

	return {
		c() {
			form = element("form");
			if (default_slot) default_slot.c();
			set_attributes(form, form_data);
			toggle_class(form, "bx--form", true);
		},
		m(target, anchor) {
			insert(target, form, anchor);

			if (default_slot) {
				default_slot.m(form, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(form, "click", /*click_handler*/ ctx[3]),
					listen(form, "keydown", /*keydown_handler*/ ctx[4]),
					listen(form, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(form, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(form, "mouseleave", /*mouseleave_handler*/ ctx[7]),
					listen(form, "submit", prevent_default(/*submit_handler*/ ctx[8]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(form, form_data = get_spread_update(form_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(form, "bx--form", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1l($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function submit_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		submit_handler
	];
}

class Form extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1l, create_fragment$1m, safe_not_equal, {});
	}
}

/* src/FluidForm/FluidForm.svelte generated by Svelte v3.32.1 */

function create_default_slot$b(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1n(ctx) {
	let form;
	let current;

	const form_spread_levels = [
		/*$$restProps*/ ctx[0],
		{
			class: "bx--form--fluid " + /*$$restProps*/ ctx[0].class
		}
	];

	let form_props = {
		$$slots: { default: [create_default_slot$b] },
		$$scope: { ctx }
	};

	for (let i = 0; i < form_spread_levels.length; i += 1) {
		form_props = assign(form_props, form_spread_levels[i]);
	}

	form = new Form({ props: form_props });
	form.$on("click", /*click_handler*/ ctx[2]);
	form.$on("keydown", /*keydown_handler*/ ctx[3]);
	form.$on("mouseover", /*mouseover_handler*/ ctx[4]);
	form.$on("mouseenter", /*mouseenter_handler*/ ctx[5]);
	form.$on("mouseleave", /*mouseleave_handler*/ ctx[6]);
	form.$on("submit", /*submit_handler*/ ctx[7]);

	return {
		c() {
			create_component(form.$$.fragment);
		},
		m(target, anchor) {
			mount_component(form, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const form_changes = (dirty & /*$$restProps*/ 1)
			? get_spread_update(form_spread_levels, [
					get_spread_object(/*$$restProps*/ ctx[0]),
					{
						class: "bx--form--fluid " + /*$$restProps*/ ctx[0].class
					}
				])
			: {};

			if (dirty & /*$$scope*/ 256) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
		},
		i(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(form, detaching);
		}
	};
}

function instance$1m($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	setContext("Form", { isFluid: true });

	function click_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function submit_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		slots,
		click_handler,
		keydown_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		submit_handler,
		$$scope
	];
}

class FluidForm extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1m, create_fragment$1n, safe_not_equal, {});
	}
}

/* src/FormGroup/FormGroup.svelte generated by Svelte v3.32.1 */

function create_if_block$O(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*messageText*/ ctx[2]);
			toggle_class(div, "bx--form__requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*messageText*/ 4) set_data(t, /*messageText*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1o(ctx) {
	let fieldset;
	let legend;
	let t0;
	let t1;
	let t2;
	let fieldset_data_invalid_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let if_block = /*message*/ ctx[1] && create_if_block$O(ctx);

	let fieldset_levels = [
		{
			"data-invalid": fieldset_data_invalid_value = /*invalid*/ ctx[0] || undefined
		},
		/*$$restProps*/ ctx[4]
	];

	let fieldset_data = {};

	for (let i = 0; i < fieldset_levels.length; i += 1) {
		fieldset_data = assign(fieldset_data, fieldset_levels[i]);
	}

	return {
		c() {
			fieldset = element("fieldset");
			legend = element("legend");
			t0 = text(/*legendText*/ ctx[3]);
			t1 = space();
			if (default_slot) default_slot.c();
			t2 = space();
			if (if_block) if_block.c();
			toggle_class(legend, "bx--label", true);
			set_attributes(fieldset, fieldset_data);
			toggle_class(fieldset, "bx--fieldset", true);
		},
		m(target, anchor) {
			insert(target, fieldset, anchor);
			append(fieldset, legend);
			append(legend, t0);
			append(fieldset, t1);

			if (default_slot) {
				default_slot.m(fieldset, null);
			}

			append(fieldset, t2);
			if (if_block) if_block.m(fieldset, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(fieldset, "click", /*click_handler*/ ctx[7]),
					listen(fieldset, "mouseover", /*mouseover_handler*/ ctx[8]),
					listen(fieldset, "mouseenter", /*mouseenter_handler*/ ctx[9]),
					listen(fieldset, "mouseleave", /*mouseleave_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*legendText*/ 8) set_data(t0, /*legendText*/ ctx[3]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (/*message*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$O(ctx);
					if_block.c();
					if_block.m(fieldset, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(fieldset, fieldset_data = get_spread_update(fieldset_levels, [
				(!current || dirty & /*invalid*/ 1 && fieldset_data_invalid_value !== (fieldset_data_invalid_value = /*invalid*/ ctx[0] || undefined)) && {
					"data-invalid": fieldset_data_invalid_value
				},
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(fieldset, "bx--fieldset", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(fieldset);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1n($$self, $$props, $$invalidate) {
	const omit_props_names = ["invalid","message","messageText","legendText"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { invalid = false } = $$props;
	let { message = false } = $$props;
	let { messageText = "" } = $$props;
	let { legendText = "" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("invalid" in $$new_props) $$invalidate(0, invalid = $$new_props.invalid);
		if ("message" in $$new_props) $$invalidate(1, message = $$new_props.message);
		if ("messageText" in $$new_props) $$invalidate(2, messageText = $$new_props.messageText);
		if ("legendText" in $$new_props) $$invalidate(3, legendText = $$new_props.legendText);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	return [
		invalid,
		message,
		messageText,
		legendText,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class FormGroup extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1n, create_fragment$1o, safe_not_equal, {
			invalid: 0,
			message: 1,
			messageText: 2,
			legendText: 3
		});
	}
}

/* src/FormItem/FormItem.svelte generated by Svelte v3.32.1 */

function create_fragment$1p(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1o($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class FormItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1o, create_fragment$1p, safe_not_equal, {});
	}
}

/* src/FormLabel/FormLabel.svelte generated by Svelte v3.32.1 */

function create_fragment$1q(ctx) {
	let label;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let label_levels = [{ for: /*id*/ ctx[0] }, /*$$restProps*/ ctx[1]];
	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	return {
		c() {
			label = element("label");
			if (default_slot) default_slot.c();
			set_attributes(label, label_data);
			toggle_class(label, "bx--label", true);
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (default_slot) {
				default_slot.m(label, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(label, "click", /*click_handler*/ ctx[4]),
					listen(label, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(label, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(label, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				(!current || dirty & /*id*/ 1) && { for: /*id*/ ctx[0] },
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
			]));

			toggle_class(label, "bx--label", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1p($$self, $$props, $$invalidate) {
	const omit_props_names = ["id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [
		id,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class FormLabel extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1p, create_fragment$1q, safe_not_equal, { id: 0 });
	}
}

/* src/Grid/Grid.svelte generated by Svelte v3.32.1 */

const get_default_slot_changes$2 = dirty => ({ props: dirty & /*props*/ 2 });
const get_default_slot_context$2 = ctx => ({ props: /*props*/ ctx[1] });

// (54:0) {:else}
function create_else_block$i(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let div_levels = [/*props*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*props*/ 2 && /*props*/ ctx[1]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (52:0) {#if as}
function create_if_block$P(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$2);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, props*/ 514) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$2, get_default_slot_context$2);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1r(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$P, create_else_block$i];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*as*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1q($$self, $$props, $$invalidate) {
	let props;

	const omit_props_names = [
		"as","condensed","narrow","fullWidth","noGutter","noGutterLeft","noGutterRight","padding"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { as = false } = $$props;
	let { condensed = false } = $$props;
	let { narrow = false } = $$props;
	let { fullWidth = false } = $$props;
	let { noGutter = false } = $$props;
	let { noGutterLeft = false } = $$props;
	let { noGutterRight = false } = $$props;
	let { padding = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("as" in $$new_props) $$invalidate(0, as = $$new_props.as);
		if ("condensed" in $$new_props) $$invalidate(2, condensed = $$new_props.condensed);
		if ("narrow" in $$new_props) $$invalidate(3, narrow = $$new_props.narrow);
		if ("fullWidth" in $$new_props) $$invalidate(4, fullWidth = $$new_props.fullWidth);
		if ("noGutter" in $$new_props) $$invalidate(5, noGutter = $$new_props.noGutter);
		if ("noGutterLeft" in $$new_props) $$invalidate(6, noGutterLeft = $$new_props.noGutterLeft);
		if ("noGutterRight" in $$new_props) $$invalidate(7, noGutterRight = $$new_props.noGutterRight);
		if ("padding" in $$new_props) $$invalidate(8, padding = $$new_props.padding);
		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(1, props = {
			...$$restProps,
			class: [
				$$restProps.class,
				"bx--grid",
				condensed && "bx--grid--condensed",
				narrow && "bx--grid--narrow",
				fullWidth && "bx--grid--full-width",
				noGutter && "bx--no-gutter",
				noGutterLeft && "bx--no-gutter--left",
				noGutterRight && "bx--no-gutter--right",
				padding && "bx--row-padding"
			].filter(Boolean).join(" ")
		});
	};

	return [
		as,
		props,
		condensed,
		narrow,
		fullWidth,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		$$scope,
		slots
	];
}

class Grid extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1q, create_fragment$1r, safe_not_equal, {
			as: 0,
			condensed: 2,
			narrow: 3,
			fullWidth: 4,
			noGutter: 5,
			noGutterLeft: 6,
			noGutterRight: 7,
			padding: 8
		});
	}
}

/* src/Grid/Row.svelte generated by Svelte v3.32.1 */

const get_default_slot_changes$3 = dirty => ({ props: dirty & /*props*/ 2 });
const get_default_slot_context$3 = ctx => ({ props: /*props*/ ctx[1] });

// (50:0) {:else}
function create_else_block$j(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
	let div_levels = [/*props*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*props*/ 2 && /*props*/ ctx[1]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (48:0) {#if as}
function create_if_block$Q(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$3);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, props*/ 258) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$3, get_default_slot_context$3);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1s(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$Q, create_else_block$j];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*as*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1r($$self, $$props, $$invalidate) {
	let props;
	const omit_props_names = ["as","condensed","narrow","noGutter","noGutterLeft","noGutterRight","padding"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { as = false } = $$props;
	let { condensed = false } = $$props;
	let { narrow = false } = $$props;
	let { noGutter = false } = $$props;
	let { noGutterLeft = false } = $$props;
	let { noGutterRight = false } = $$props;
	let { padding = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("as" in $$new_props) $$invalidate(0, as = $$new_props.as);
		if ("condensed" in $$new_props) $$invalidate(2, condensed = $$new_props.condensed);
		if ("narrow" in $$new_props) $$invalidate(3, narrow = $$new_props.narrow);
		if ("noGutter" in $$new_props) $$invalidate(4, noGutter = $$new_props.noGutter);
		if ("noGutterLeft" in $$new_props) $$invalidate(5, noGutterLeft = $$new_props.noGutterLeft);
		if ("noGutterRight" in $$new_props) $$invalidate(6, noGutterRight = $$new_props.noGutterRight);
		if ("padding" in $$new_props) $$invalidate(7, padding = $$new_props.padding);
		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(1, props = {
			...$$restProps,
			class: [
				$$restProps.class,
				"bx--row",
				condensed && "bx--row--condensed",
				narrow && "bx--row--narrow",
				noGutter && "bx--no-gutter",
				noGutterLeft && "bx--no-gutter--left",
				noGutterRight && "bx--no-gutter--right",
				padding && "bx--row-padding"
			].filter(Boolean).join(" ")
		});
	};

	return [
		as,
		props,
		condensed,
		narrow,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		$$scope,
		slots
	];
}

class Row extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1r, create_fragment$1s, safe_not_equal, {
			as: 0,
			condensed: 2,
			narrow: 3,
			noGutter: 4,
			noGutterLeft: 5,
			noGutterRight: 6,
			padding: 7
		});
	}
}

/* src/Grid/Column.svelte generated by Svelte v3.32.1 */

const get_default_slot_changes$4 = dirty => ({ props: dirty & /*props*/ 2 });
const get_default_slot_context$4 = ctx => ({ props: /*props*/ ctx[1] });

// (115:0) {:else}
function create_else_block$k(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);
	let div_levels = [/*props*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8192) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*props*/ 2 && /*props*/ ctx[1]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (113:0) {#if as}
function create_if_block$R(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], get_default_slot_context$4);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, props*/ 8194) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], dirty, get_default_slot_changes$4, get_default_slot_context$4);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1t(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$R, create_else_block$k];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*as*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1s($$self, $$props, $$invalidate) {
	let columnClass;
	let props;

	const omit_props_names = [
		"as","noGutter","noGutterLeft","noGutterRight","padding","aspectRatio","sm","md","lg","xlg","max"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { as = false } = $$props;
	let { noGutter = false } = $$props;
	let { noGutterLeft = false } = $$props;
	let { noGutterRight = false } = $$props;
	let { padding = false } = $$props;
	let { aspectRatio = undefined } = $$props;
	let { sm = undefined } = $$props;
	let { md = undefined } = $$props;
	let { lg = undefined } = $$props;
	let { xlg = undefined } = $$props;
	let { max = undefined } = $$props;
	const breakpoints = ["sm", "md", "lg", "xlg", "max"];

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("as" in $$new_props) $$invalidate(0, as = $$new_props.as);
		if ("noGutter" in $$new_props) $$invalidate(2, noGutter = $$new_props.noGutter);
		if ("noGutterLeft" in $$new_props) $$invalidate(3, noGutterLeft = $$new_props.noGutterLeft);
		if ("noGutterRight" in $$new_props) $$invalidate(4, noGutterRight = $$new_props.noGutterRight);
		if ("padding" in $$new_props) $$invalidate(5, padding = $$new_props.padding);
		if ("aspectRatio" in $$new_props) $$invalidate(6, aspectRatio = $$new_props.aspectRatio);
		if ("sm" in $$new_props) $$invalidate(7, sm = $$new_props.sm);
		if ("md" in $$new_props) $$invalidate(8, md = $$new_props.md);
		if ("lg" in $$new_props) $$invalidate(9, lg = $$new_props.lg);
		if ("xlg" in $$new_props) $$invalidate(10, xlg = $$new_props.xlg);
		if ("max" in $$new_props) $$invalidate(11, max = $$new_props.max);
		if ("$$scope" in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*sm, md, lg, xlg, max*/ 3968) {
			 $$invalidate(12, columnClass = [sm, md, lg, xlg, max].map((breakpoint, i) => {
				const name = breakpoints[i];

				if (breakpoint === true) {
					return `bx--col-${name}`;
				} else if (typeof breakpoint === "number") {
					return `bx--col-${name}-${breakpoint}`;
				} else if (typeof breakpoint === "object") {
					let bp = [];

					if (typeof breakpoint.span === "number") {
						bp = [...bp, `bx--col-${name}-${breakpoint.span}`];
					} else if (breakpoint.span === true) {
						bp = [...bp, `bx--col-${name}`];
					}

					if (typeof breakpoint.offset === "number") {
						bp = [...bp, `bx--offset-${name}-${breakpoint.offset}`];
					}

					return bp.join(" ");
				}
			}).filter(Boolean).join(" "));
		}

		 $$invalidate(1, props = {
			...$$restProps,
			class: [
				$$restProps.class,
				columnClass,
				!columnClass && "bx--col",
				noGutter && "bx--no-gutter",
				noGutterLeft && "bx--no-gutter--left",
				noGutterRight && "bx--no-gutter--right",
				aspectRatio && `bx--aspect-ratio bx--aspect-ratio--${aspectRatio}`,
				padding && "bx--col-padding"
			].filter(Boolean).join(" ")
		});
	};

	return [
		as,
		props,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		aspectRatio,
		sm,
		md,
		lg,
		xlg,
		max,
		columnClass,
		$$scope,
		slots
	];
}

class Column extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1s, create_fragment$1t, safe_not_equal, {
			as: 0,
			noGutter: 2,
			noGutterLeft: 3,
			noGutterRight: 4,
			padding: 5,
			aspectRatio: 6,
			sm: 7,
			md: 8,
			lg: 9,
			xlg: 10,
			max: 11
		});
	}
}

/* src/Icon/IconSkeleton.svelte generated by Svelte v3.32.1 */

function create_fragment$1u(ctx) {
	let div;
	let div_style_value;
	let mounted;
	let dispose;

	let div_levels = [
		/*$$restProps*/ ctx[1],
		{
			style: div_style_value = "" + (/*$$restProps*/ ctx[1].style + "; width: " + /*size*/ ctx[0] + "px; height: " + /*size*/ ctx[0] + "px")
		}
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "bx--icon--skeleton", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[2]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				dirty & /*$$restProps, size*/ 3 && div_style_value !== (div_style_value = "" + (/*$$restProps*/ ctx[1].style + "; width: " + /*size*/ ctx[0] + "px; height: " + /*size*/ ctx[0] + "px")) && { style: div_style_value }
			]));

			toggle_class(div, "bx--icon--skeleton", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1t($$self, $$props, $$invalidate) {
	const omit_props_names = ["size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
	};

	return [
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class IconSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1t, create_fragment$1u, safe_not_equal, { size: 0 });
	}
}

/* src/Icon/Icon.svelte generated by Svelte v3.32.1 */

function create_else_block$l(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*$$restProps*/ ctx[2]];
	var switch_value = /*render*/ ctx[0];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
		switch_instance.$on("click", /*click_handler_1*/ ctx[7]);
		switch_instance.$on("mouseover", /*mouseover_handler_1*/ ctx[8]);
		switch_instance.$on("mouseenter", /*mouseenter_handler_1*/ ctx[9]);
		switch_instance.$on("mouseleave", /*mouseleave_handler_1*/ ctx[10]);
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = (dirty & /*$$restProps*/ 4)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*$$restProps*/ ctx[2])])
			: {};

			if (switch_value !== (switch_value = /*render*/ ctx[0])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					switch_instance.$on("click", /*click_handler_1*/ ctx[7]);
					switch_instance.$on("mouseover", /*mouseover_handler_1*/ ctx[8]);
					switch_instance.$on("mouseenter", /*mouseenter_handler_1*/ ctx[9]);
					switch_instance.$on("mouseleave", /*mouseleave_handler_1*/ ctx[10]);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (25:0) {#if skeleton}
function create_if_block$S(ctx) {
	let iconskeleton;
	let current;
	const iconskeleton_spread_levels = [/*$$restProps*/ ctx[2]];
	let iconskeleton_props = {};

	for (let i = 0; i < iconskeleton_spread_levels.length; i += 1) {
		iconskeleton_props = assign(iconskeleton_props, iconskeleton_spread_levels[i]);
	}

	iconskeleton = new IconSkeleton({ props: iconskeleton_props });
	iconskeleton.$on("click", /*click_handler*/ ctx[3]);
	iconskeleton.$on("mouseover", /*mouseover_handler*/ ctx[4]);
	iconskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[5]);
	iconskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[6]);

	return {
		c() {
			create_component(iconskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(iconskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const iconskeleton_changes = (dirty & /*$$restProps*/ 4)
			? get_spread_update(iconskeleton_spread_levels, [get_spread_object(/*$$restProps*/ ctx[2])])
			: {};

			iconskeleton.$set(iconskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(iconskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(iconskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(iconskeleton, detaching);
		}
	};
}

function create_fragment$1v(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$S, create_else_block$l];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1u($$self, $$props, $$invalidate) {
	const omit_props_names = ["render","skeleton"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { render = undefined } = $$props;
	let { skeleton = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("render" in $$new_props) $$invalidate(0, render = $$new_props.render);
		if ("skeleton" in $$new_props) $$invalidate(1, skeleton = $$new_props.skeleton);
	};

	return [
		render,
		skeleton,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class Icon extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1u, create_fragment$1v, safe_not_equal, { render: 0, skeleton: 1 });
	}
}

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        easing,
        css: t => `opacity: ${t * o}`
    };
}
function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
    const style = getComputedStyle(node);
    const opacity = +style.opacity;
    const height = parseFloat(style.height);
    const padding_top = parseFloat(style.paddingTop);
    const padding_bottom = parseFloat(style.paddingBottom);
    const margin_top = parseFloat(style.marginTop);
    const margin_bottom = parseFloat(style.marginBottom);
    const border_top_width = parseFloat(style.borderTopWidth);
    const border_bottom_width = parseFloat(style.borderBottomWidth);
    return {
        delay,
        duration,
        easing,
        css: t => 'overflow: hidden;' +
            `opacity: ${Math.min(t * 20, 1) * opacity};` +
            `height: ${t * height}px;` +
            `padding-top: ${t * padding_top}px;` +
            `padding-bottom: ${t * padding_bottom}px;` +
            `margin-top: ${t * margin_top}px;` +
            `margin-bottom: ${t * margin_bottom}px;` +
            `border-top-width: ${t * border_top_width}px;` +
            `border-bottom-width: ${t * border_bottom_width}px;`
    };
}

/* src/ImageLoader/ImageLoader.svelte generated by Svelte v3.32.1 */
const get_error_slot_changes_1 = dirty => ({});
const get_error_slot_context_1 = ctx => ({});
const get_loading_slot_changes_1 = dirty => ({});
const get_loading_slot_context_1 = ctx => ({});
const get_error_slot_changes = dirty => ({});
const get_error_slot_context = ctx => ({});
const get_loading_slot_changes = dirty => ({});
const get_loading_slot_context = ctx => ({});

// (95:0) {:else}
function create_else_block$m(ctx) {
	let aspectratio;
	let current;

	aspectratio = new AspectRatio({
			props: {
				ratio: /*ratio*/ ctx[5],
				$$slots: { default: [create_default_slot$c] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(aspectratio.$$.fragment);
		},
		m(target, anchor) {
			mount_component(aspectratio, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const aspectratio_changes = {};
			if (dirty & /*ratio*/ 32) aspectratio_changes.ratio = /*ratio*/ ctx[5];

			if (dirty & /*$$scope, error, $$restProps, src, alt, fadeIn, loaded, loading*/ 1247) {
				aspectratio_changes.$$scope = { dirty, ctx };
			}

			aspectratio.$set(aspectratio_changes);
		},
		i(local) {
			if (current) return;
			transition_in(aspectratio.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(aspectratio.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(aspectratio, detaching);
		}
	};
}

// (79:0) {#if ratio === undefined}
function create_if_block$T(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*loading*/ ctx[2] && create_if_block_3$7(ctx);
	let if_block1 = /*loaded*/ ctx[0] && create_if_block_2$9(ctx);
	let if_block2 = /*error*/ ctx[1] && create_if_block_1$g(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*loading*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*loading*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$7(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*loaded*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*loaded*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$9(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*error*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*error*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1$g(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (97:4) {#if loading}
function create_if_block_6$2(ctx) {
	let current;
	const loading_slot_template = /*#slots*/ ctx[9].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[10], get_loading_slot_context_1);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},
		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(loading_slot, loading_slot_template, ctx, /*$$scope*/ ctx[10], dirty, get_loading_slot_changes_1, get_loading_slot_context_1);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},
		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},
		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (100:4) {#if loaded}
function create_if_block_5$4(ctx) {
	let img;
	let img_style_value;
	let img_src_value;
	let img_transition;
	let current;

	let img_levels = [
		/*$$restProps*/ ctx[7],
		{
			style: img_style_value = "width: 100%;" + /*$$restProps*/ ctx[7].style
		},
		{ src: img_src_value = /*src*/ ctx[3] },
		{ alt: /*alt*/ ctx[4] }
	];

	let img_data = {};

	for (let i = 0; i < img_levels.length; i += 1) {
		img_data = assign(img_data, img_levels[i]);
	}

	return {
		c() {
			img = element("img");
			set_attributes(img, img_data);
		},
		m(target, anchor) {
			insert(target, img, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			set_attributes(img, img_data = get_spread_update(img_levels, [
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				(!current || dirty & /*$$restProps*/ 128 && img_style_value !== (img_style_value = "width: 100%;" + /*$$restProps*/ ctx[7].style)) && { style: img_style_value },
				(!current || dirty & /*src*/ 8 && img.src !== (img_src_value = /*src*/ ctx[3])) && { src: img_src_value },
				(!current || dirty & /*alt*/ 16) && { alt: /*alt*/ ctx[4] }
			]));
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img_transition) img_transition = create_bidirectional_transition(img, fade, { duration: /*fadeIn*/ ctx[6] ? fast02 : 0 }, true);
				img_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!img_transition) img_transition = create_bidirectional_transition(img, fade, { duration: /*fadeIn*/ ctx[6] ? fast02 : 0 }, false);
			img_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(img);
			if (detaching && img_transition) img_transition.end();
		}
	};
}

// (109:4) {#if error}
function create_if_block_4$6(ctx) {
	let current;
	const error_slot_template = /*#slots*/ ctx[9].error;
	const error_slot = create_slot(error_slot_template, ctx, /*$$scope*/ ctx[10], get_error_slot_context_1);

	return {
		c() {
			if (error_slot) error_slot.c();
		},
		m(target, anchor) {
			if (error_slot) {
				error_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (error_slot) {
				if (error_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(error_slot, error_slot_template, ctx, /*$$scope*/ ctx[10], dirty, get_error_slot_changes_1, get_error_slot_context_1);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(error_slot, local);
			current = true;
		},
		o(local) {
			transition_out(error_slot, local);
			current = false;
		},
		d(detaching) {
			if (error_slot) error_slot.d(detaching);
		}
	};
}

// (96:2) <AspectRatio ratio="{ratio}">
function create_default_slot$c(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*loading*/ ctx[2] && create_if_block_6$2(ctx);
	let if_block1 = /*loaded*/ ctx[0] && create_if_block_5$4(ctx);
	let if_block2 = /*error*/ ctx[1] && create_if_block_4$6(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*loading*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*loading*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*loaded*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*loaded*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_5$4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*error*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*error*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_4$6(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (80:2) {#if loading}
function create_if_block_3$7(ctx) {
	let current;
	const loading_slot_template = /*#slots*/ ctx[9].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[10], get_loading_slot_context);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},
		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(loading_slot, loading_slot_template, ctx, /*$$scope*/ ctx[10], dirty, get_loading_slot_changes, get_loading_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},
		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},
		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (83:2) {#if loaded}
function create_if_block_2$9(ctx) {
	let img;
	let img_style_value;
	let img_src_value;
	let img_transition;
	let current;

	let img_levels = [
		/*$$restProps*/ ctx[7],
		{
			style: img_style_value = "width: 100%;" + /*$$restProps*/ ctx[7].style
		},
		{ src: img_src_value = /*src*/ ctx[3] },
		{ alt: /*alt*/ ctx[4] }
	];

	let img_data = {};

	for (let i = 0; i < img_levels.length; i += 1) {
		img_data = assign(img_data, img_levels[i]);
	}

	return {
		c() {
			img = element("img");
			set_attributes(img, img_data);
		},
		m(target, anchor) {
			insert(target, img, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			set_attributes(img, img_data = get_spread_update(img_levels, [
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				(!current || dirty & /*$$restProps*/ 128 && img_style_value !== (img_style_value = "width: 100%;" + /*$$restProps*/ ctx[7].style)) && { style: img_style_value },
				(!current || dirty & /*src*/ 8 && img.src !== (img_src_value = /*src*/ ctx[3])) && { src: img_src_value },
				(!current || dirty & /*alt*/ 16) && { alt: /*alt*/ ctx[4] }
			]));
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img_transition) img_transition = create_bidirectional_transition(img, fade, { duration: /*fadeIn*/ ctx[6] ? fast02 : 0 }, true);
				img_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!img_transition) img_transition = create_bidirectional_transition(img, fade, { duration: /*fadeIn*/ ctx[6] ? fast02 : 0 }, false);
			img_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(img);
			if (detaching && img_transition) img_transition.end();
		}
	};
}

// (92:2) {#if error}
function create_if_block_1$g(ctx) {
	let current;
	const error_slot_template = /*#slots*/ ctx[9].error;
	const error_slot = create_slot(error_slot_template, ctx, /*$$scope*/ ctx[10], get_error_slot_context);

	return {
		c() {
			if (error_slot) error_slot.c();
		},
		m(target, anchor) {
			if (error_slot) {
				error_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (error_slot) {
				if (error_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(error_slot, error_slot_template, ctx, /*$$scope*/ ctx[10], dirty, get_error_slot_changes, get_error_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(error_slot, local);
			current = true;
		},
		o(local) {
			transition_out(error_slot, local);
			current = false;
		},
		d(detaching) {
			if (error_slot) error_slot.d(detaching);
		}
	};
}

function create_fragment$1w(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$T, create_else_block$m];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*ratio*/ ctx[5] === undefined) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

const fast02 = 110;

function instance$1v($$self, $$props, $$invalidate) {
	const omit_props_names = ["src","alt","ratio","loading","loaded","error","fadeIn","loadImage"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { src = "" } = $$props;
	let { alt = "" } = $$props;
	let { ratio = undefined } = $$props;
	let { loading = false } = $$props;
	let { loaded = false } = $$props;
	let { error = false } = $$props;
	let { fadeIn = false } = $$props;

	const loadImage = url => {
		if (image != null) image = null;
		$$invalidate(0, loaded = false);
		$$invalidate(1, error = false);
		image = new Image();
		image.src = url || src;
		image.onload = () => $$invalidate(0, loaded = true);
		image.onerror = () => $$invalidate(1, error = true);
	};

	const dispatch = createEventDispatcher();
	let image = null;

	onMount(() => {
		return () => image = null;
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("src" in $$new_props) $$invalidate(3, src = $$new_props.src);
		if ("alt" in $$new_props) $$invalidate(4, alt = $$new_props.alt);
		if ("ratio" in $$new_props) $$invalidate(5, ratio = $$new_props.ratio);
		if ("loading" in $$new_props) $$invalidate(2, loading = $$new_props.loading);
		if ("loaded" in $$new_props) $$invalidate(0, loaded = $$new_props.loaded);
		if ("error" in $$new_props) $$invalidate(1, error = $$new_props.error);
		if ("fadeIn" in $$new_props) $$invalidate(6, fadeIn = $$new_props.fadeIn);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*loaded, error*/ 3) {
			 $$invalidate(2, loading = !loaded && !error);
		}

		if ($$self.$$.dirty & /*src*/ 8) {
			 if (src) loadImage();
		}

		if ($$self.$$.dirty & /*loaded*/ 1) {
			 if (loaded) dispatch("load");
		}

		if ($$self.$$.dirty & /*error*/ 2) {
			 if (error) dispatch("error");
		}
	};

	return [
		loaded,
		error,
		loading,
		src,
		alt,
		ratio,
		fadeIn,
		$$restProps,
		loadImage,
		slots,
		$$scope
	];
}

class ImageLoader extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1v, create_fragment$1w, safe_not_equal, {
			src: 3,
			alt: 4,
			ratio: 5,
			loading: 2,
			loaded: 0,
			error: 1,
			fadeIn: 6,
			loadImage: 8
		});
	}

	get loadImage() {
		return this.$$.ctx[8];
	}
}

/* node_modules/carbon-icons-svelte/lib/Error20/Error20.svelte generated by Svelte v3.32.1 */

function create_if_block$U(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$o(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$U(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$U(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1x(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$o(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Error20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M2,16H2A14,14,0,1,0,16,2,14,14,0,0,0,2,16Zm23.15,7.75L8.25,6.85a12,12,0,0,1,16.9,16.9ZM8.24,25.16A12,12,0,0,1,6.84,8.27L23.73,25.16a12,12,0,0,1-15.49,0Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Error20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1w($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Error20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1w, create_fragment$1x, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/InlineLoading/InlineLoading.svelte generated by Svelte v3.32.1 */

function create_if_block_3$8(ctx) {
	let loading;
	let current;

	loading = new Loading({
			props: {
				small: true,
				description: /*iconDescription*/ ctx[2],
				withOverlay: false,
				active: /*status*/ ctx[0] === "active"
			}
		});

	return {
		c() {
			create_component(loading.$$.fragment);
		},
		m(target, anchor) {
			mount_component(loading, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const loading_changes = {};
			if (dirty & /*iconDescription*/ 4) loading_changes.description = /*iconDescription*/ ctx[2];
			if (dirty & /*status*/ 1) loading_changes.active = /*status*/ ctx[0] === "active";
			loading.$set(loading_changes);
		},
		i(local) {
			if (current) return;
			transition_in(loading.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loading.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(loading, detaching);
		}
	};
}

// (59:36) 
function create_if_block_2$a(ctx) {
	let checkmarkfilled16;
	let current;

	checkmarkfilled16 = new CheckmarkFilled16({
			props: {
				class: "bx--inline-loading__checkmark-container"
			}
		});

	return {
		c() {
			create_component(checkmarkfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkmarkfilled16, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(checkmarkfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkmarkfilled16, detaching);
		}
	};
}

// (57:4) {#if status === "error"}
function create_if_block_1$h(ctx) {
	let error20;
	let current;

	error20 = new Error20({
			props: { class: "bx--inline-loading--error" }
		});

	return {
		c() {
			create_component(error20.$$.fragment);
		},
		m(target, anchor) {
			mount_component(error20, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(error20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(error20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(error20, detaching);
		}
	};
}

// (70:2) {#if description}
function create_if_block$V(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*description*/ ctx[1]);
			toggle_class(div, "bx--inline-loading__text", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 2) set_data(t, /*description*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1y(ctx) {
	let div1;
	let div0;
	let current_block_type_index;
	let if_block0;
	let t;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1$h, create_if_block_2$a, create_if_block_3$8];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*status*/ ctx[0] === "error") return 0;
		if (/*status*/ ctx[0] === "finished") return 1;
		if (/*status*/ ctx[0] === "inactive" || /*status*/ ctx[0] === "active") return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block1 = /*description*/ ctx[1] && create_if_block$V(ctx);
	let div1_levels = [{ "aria-live": "assertive" }, /*$$restProps*/ ctx[3]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			toggle_class(div0, "bx--inline-loading__animation", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--inline-loading", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div0, null);
			}

			append(div1, t);
			if (if_block1) if_block1.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[5]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(div0, null);
				} else {
					if_block0 = null;
				}
			}

			if (/*description*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$V(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				{ "aria-live": "assertive" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(div1, "bx--inline-loading", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1x($$self, $$props, $$invalidate) {
	const omit_props_names = ["status","description","iconDescription","successDelay"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { status = "active" } = $$props;
	let { description = undefined } = $$props;
	let { iconDescription = undefined } = $$props;
	let { successDelay = 1500 } = $$props;
	const dispatch = createEventDispatcher();
	let timeout = undefined;

	onMount(() => {
		return () => {
			clearTimeout(timeout);
		};
	});

	afterUpdate(() => {
		if (status === "finished") {
			timeout = setTimeout(
				() => {
					dispatch("success");
				},
				successDelay
			);
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("status" in $$new_props) $$invalidate(0, status = $$new_props.status);
		if ("description" in $$new_props) $$invalidate(1, description = $$new_props.description);
		if ("iconDescription" in $$new_props) $$invalidate(2, iconDescription = $$new_props.iconDescription);
		if ("successDelay" in $$new_props) $$invalidate(4, successDelay = $$new_props.successDelay);
	};

	return [
		status,
		description,
		iconDescription,
		$$restProps,
		successDelay,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class InlineLoading extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1x, create_fragment$1y, safe_not_equal, {
			status: 0,
			description: 1,
			iconDescription: 2,
			successDelay: 4
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/Launch16/Launch16.svelte generated by Svelte v3.32.1 */

function create_if_block$W(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$p(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$W(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$W(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1z(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$p(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Launch16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M13,14H3c-0.6,0-1-0.4-1-1V3c0-0.6,0.4-1,1-1h5v1H3v10h10V8h1v5C14,13.6,13.6,14,13,14z");
			attr(path1, "d", "M10 1L10 2 13.3 2 9 6.3 9.7 7 14 2.7 14 6 15 6 15 1z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Launch16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1y($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Launch16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1y, create_fragment$1z, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/Link/OutboundLink.svelte generated by Svelte v3.32.1 */

function create_default_slot$d(ctx) {
	let t;
	let launch16;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	launch16 = new Launch16({});

	return {
		c() {
			if (default_slot) default_slot.c();
			t = space();
			create_component(launch16.$$.fragment);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			insert(target, t, anchor);
			mount_component(launch16, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(launch16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(launch16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t);
			destroy_component(launch16, detaching);
		}
	};
}

function create_fragment$1A(ctx) {
	let link;
	let current;
	const link_spread_levels = [/*$$restProps*/ ctx[0], { target: "_blank" }];

	let link_props = {
		$$slots: { default: [create_default_slot$d] },
		$$scope: { ctx }
	};

	for (let i = 0; i < link_spread_levels.length; i += 1) {
		link_props = assign(link_props, link_spread_levels[i]);
	}

	link = new Link({ props: link_props });
	link.$on("click", /*click_handler*/ ctx[2]);
	link.$on("mouseover", /*mouseover_handler*/ ctx[3]);
	link.$on("mouseenter", /*mouseenter_handler*/ ctx[4]);
	link.$on("mouseleave", /*mouseleave_handler*/ ctx[5]);

	return {
		c() {
			create_component(link.$$.fragment);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const link_changes = (dirty & /*$$restProps*/ 1)
			? get_spread_update(link_spread_levels, [get_spread_object(/*$$restProps*/ ctx[0]), link_spread_levels[1]])
			: {};

			if (dirty & /*$$scope*/ 64) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

function instance$1z($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class OutboundLink extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1z, create_fragment$1A, safe_not_equal, {});
	}
}

/* src/ListItem/ListItem.svelte generated by Svelte v3.32.1 */

function create_fragment$1B(ctx) {
	let li;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let li_levels = [/*$$restProps*/ ctx[0]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if (default_slot) default_slot.c();
			set_attributes(li, li_data);
			toggle_class(li, "bx--list__item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);

			if (default_slot) {
				default_slot.m(li, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "click", /*click_handler*/ ctx[3]),
					listen(li, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(li, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(li, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(li, "bx--list__item", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1A($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ListItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1A, create_fragment$1B, safe_not_equal, {});
	}
}

/* src/LocalStorage/LocalStorage.svelte generated by Svelte v3.32.1 */

function instance$1B($$self, $$props, $$invalidate) {
	let { key = "local-storage-key" } = $$props;
	let { value = "" } = $$props;
	const dispatch = createEventDispatcher();
	let prevValue = value;

	function setItem() {
		if (typeof value === "object") {
			localStorage.setItem(key, JSON.stringify(value));
		} else {
			localStorage.setItem(key, value);
		}
	}

	onMount(() => {
		const item = localStorage.getItem(key);

		if (item != null) {
			try {
				$$invalidate(0, value = JSON.parse(item));
			} catch(e) {
				$$invalidate(0, value = item);
			}
		} else {
			setItem();
			dispatch("save");
		}
	});

	afterUpdate(() => {
		if (prevValue !== value) {
			setItem();
			dispatch("update", { prevValue, value });
		}

		prevValue = value;
	});

	$$self.$$set = $$props => {
		if ("key" in $$props) $$invalidate(1, key = $$props.key);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, key];
}

class LocalStorage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1B, null, safe_not_equal, { key: 1, value: 0 });
	}
}

/* src/MultiSelect/MultiSelect.svelte generated by Svelte v3.32.1 */

function get_each_context$9(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[66] = list[i];
	child_ctx[68] = i;
	return child_ctx;
}

// (242:2) {#if titleText}
function create_if_block_9$1(ctx) {
	let label_1;
	let t;

	return {
		c() {
			label_1 = element("label");
			t = text(/*titleText*/ ctx[9]);
			attr(label_1, "for", /*id*/ ctx[17]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);
			append(label_1, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*titleText*/ 512) set_data(t, /*titleText*/ ctx[9]);

			if (dirty[0] & /*id*/ 131072) {
				attr(label_1, "for", /*id*/ ctx[17]);
			}

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(label_1);
		}
	};
}

// (273:4) {#if invalid}
function create_if_block_8$1(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (276:4) {#if !invalid && warn}
function create_if_block_7$1(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--list-box__invalid-icon bx--list-box__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (333:6) {#if checked.length > 0}
function create_if_block_6$3(ctx) {
	let listboxselection;
	let current;

	listboxselection = new ListBoxSelection({
			props: {
				selectionCount: /*checked*/ ctx[21].length,
				translateWithId: /*translateWithId*/ ctx[8],
				disabled: /*disabled*/ ctx[4]
			}
		});

	listboxselection.$on("clear", /*clear_handler*/ ctx[46]);
	listboxselection.$on("clear", /*clear_handler_1*/ ctx[47]);

	return {
		c() {
			create_component(listboxselection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxselection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxselection_changes = {};
			if (dirty[0] & /*checked*/ 2097152) listboxselection_changes.selectionCount = /*checked*/ ctx[21].length;
			if (dirty[0] & /*translateWithId*/ 256) listboxselection_changes.translateWithId = /*translateWithId*/ ctx[8];
			if (dirty[0] & /*disabled*/ 16) listboxselection_changes.disabled = /*disabled*/ ctx[4];
			listboxselection.$set(listboxselection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxselection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxselection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxselection, detaching);
		}
	};
}

// (348:6) {#if filterable}
function create_if_block_3$9(ctx) {
	let input;
	let t0;
	let t1;
	let t2;
	let listboxmenuicon;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[33],
		{ role: "combobox" },
		{ tabindex: "0" },
		{ autocomplete: "off" },
		{ "aria-autocomplete": "list" },
		{ "aria-expanded": /*open*/ ctx[0] },
		{
			"aria-activedescendant": /*highlightedId*/ ctx[31]
		},
		{ "aria-disabled": /*disabled*/ ctx[4] },
		{ "aria-controls": /*menuId*/ ctx[27] },
		{ disabled: /*disabled*/ ctx[4] },
		{ placeholder: /*placeholder*/ ctx[7] },
		{ id: /*id*/ ctx[17] },
		{ name: /*name*/ ctx[18] },
		{ value: /*inputValue*/ ctx[19] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block0 = /*invalid*/ ctx[11] && create_if_block_5$5();
	let if_block1 = /*inputValue*/ ctx[19] && create_if_block_4$7(ctx);

	listboxmenuicon = new ListBoxMenuIcon({
			props: {
				translateWithId: /*translateWithId*/ ctx[8],
				open: /*open*/ ctx[0]
			}
		});

	listboxmenuicon.$on("click", /*click_handler_1*/ ctx[53]);

	return {
		c() {
			input = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			create_component(listboxmenuicon.$$.fragment);
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--empty", /*inputValue*/ ctx[19] === "");
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			input.value = input_data.value;
			/*input_binding*/ ctx[48](input);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t2, anchor);
			mount_component(listboxmenuicon, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_handler*/ ctx[49]),
					listen(input, "keydown", /*keydown_handler*/ ctx[42]),
					listen(input, "keydown", stop_propagation(/*keydown_handler_1*/ ctx[50])),
					listen(input, "focus", /*focus_handler*/ ctx[43]),
					listen(input, "blur", /*blur_handler*/ ctx[44]),
					listen(input, "blur", /*blur_handler_1*/ ctx[51])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[1] & /*$$restProps*/ 4 && /*$$restProps*/ ctx[33],
				{ role: "combobox" },
				{ tabindex: "0" },
				{ autocomplete: "off" },
				{ "aria-autocomplete": "list" },
				(!current || dirty[0] & /*open*/ 1) && { "aria-expanded": /*open*/ ctx[0] },
				(!current || dirty[1] & /*highlightedId*/ 1) && {
					"aria-activedescendant": /*highlightedId*/ ctx[31]
				},
				(!current || dirty[0] & /*disabled*/ 16) && { "aria-disabled": /*disabled*/ ctx[4] },
				(!current || dirty[0] & /*menuId*/ 134217728) && { "aria-controls": /*menuId*/ ctx[27] },
				(!current || dirty[0] & /*disabled*/ 16) && { disabled: /*disabled*/ ctx[4] },
				(!current || dirty[0] & /*placeholder*/ 128) && { placeholder: /*placeholder*/ ctx[7] },
				(!current || dirty[0] & /*id*/ 131072) && { id: /*id*/ ctx[17] },
				(!current || dirty[0] & /*name*/ 262144) && { name: /*name*/ ctx[18] },
				(!current || dirty[0] & /*inputValue*/ 524288 && input.value !== /*inputValue*/ ctx[19]) && { value: /*inputValue*/ ctx[19] }
			]));

			if ("value" in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--empty", /*inputValue*/ ctx[19] === "");
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[6]);

			if (/*invalid*/ ctx[11]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5$5();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*inputValue*/ ctx[19]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*inputValue*/ 524288) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$7(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const listboxmenuicon_changes = {};
			if (dirty[0] & /*translateWithId*/ 256) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[8];
			if (dirty[0] & /*open*/ 1) listboxmenuicon_changes.open = /*open*/ ctx[0];
			listboxmenuicon.$set(listboxmenuicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(listboxmenuicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(listboxmenuicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[48](null);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t2);
			destroy_component(listboxmenuicon, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (398:8) {#if invalid}
function create_if_block_5$5(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (401:8) {#if inputValue}
function create_if_block_4$7(ctx) {
	let listboxselection;
	let current;

	listboxselection = new ListBoxSelection({
			props: {
				translateWithId: /*translateWithId*/ ctx[8],
				disabled: /*disabled*/ ctx[4],
				open: /*open*/ ctx[0]
			}
		});

	listboxselection.$on("clear", /*clear_handler_2*/ ctx[52]);

	return {
		c() {
			create_component(listboxselection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxselection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxselection_changes = {};
			if (dirty[0] & /*translateWithId*/ 256) listboxselection_changes.translateWithId = /*translateWithId*/ ctx[8];
			if (dirty[0] & /*disabled*/ 16) listboxselection_changes.disabled = /*disabled*/ ctx[4];
			if (dirty[0] & /*open*/ 1) listboxselection_changes.open = /*open*/ ctx[0];
			listboxselection.$set(listboxselection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxselection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxselection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxselection, detaching);
		}
	};
}

// (421:6) {#if !filterable}
function create_if_block_2$b(ctx) {
	let span;
	let t0;
	let t1;
	let listboxmenuicon;
	let current;

	listboxmenuicon = new ListBoxMenuIcon({
			props: {
				open: /*open*/ ctx[0],
				translateWithId: /*translateWithId*/ ctx[8]
			}
		});

	return {
		c() {
			span = element("span");
			t0 = text(/*label*/ ctx[16]);
			t1 = space();
			create_component(listboxmenuicon.$$.fragment);
			attr(span, "class", "bx--list-box__label");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			insert(target, t1, anchor);
			mount_component(listboxmenuicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*label*/ 65536) set_data(t0, /*label*/ ctx[16]);
			const listboxmenuicon_changes = {};
			if (dirty[0] & /*open*/ 1) listboxmenuicon_changes.open = /*open*/ ctx[0];
			if (dirty[0] & /*translateWithId*/ 256) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[8];
			listboxmenuicon.$set(listboxmenuicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t1);
			destroy_component(listboxmenuicon, detaching);
		}
	};
}

// (281:4) <ListBoxField       role="button"       tabindex="0"       aria-expanded="{open}"       on:click="{() => {         if (disabled) return;         if (filterable) {           open = true;           inputRef.focus();         } else {           open = !open;         }       }}"       on:keydown="{({ key }) => {         if (filterable) {           return;         }         if (key === ' ') {           open = !open;         } else if (key === 'Tab') {           if (selectionRef && checked.length > 0) {             selectionRef.focus();           } else {             open = false;             fieldRef.blur();           }         } else if (key === 'ArrowDown') {           change(1);         } else if (key === 'ArrowUp') {           change(-1);         } else if (key === 'Enter') {           if (highlightedIndex > -1) {             sortedItems[highlightedIndex].checked = !sortedItems[               highlightedIndex             ].checked;           }         }       }}"       on:blur="{({ relatedTarget }) => {         if (           relatedTarget &&           !['INPUT', 'SELECT', 'TEXTAREA'].includes(relatedTarget.tagName) &&           relatedTarget.getAttribute('role') !== 'button' &&           relatedTarget.getAttribute('role') !== 'searchbox'         ) {           fieldRef.focus();         }       }}"       id="{id}"       disabled="{disabled}"       translateWithId="{translateWithId}"     >
function create_default_slot_3$2(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*checked*/ ctx[21].length > 0 && create_if_block_6$3(ctx);
	let if_block1 = /*filterable*/ ctx[5] && create_if_block_3$9(ctx);
	let if_block2 = !/*filterable*/ ctx[5] && create_if_block_2$b(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*checked*/ ctx[21].length > 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*checked*/ 2097152) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*filterable*/ ctx[5]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*filterable*/ 32) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$9(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!/*filterable*/ ctx[5]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*filterable*/ 32) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2$b(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (426:4) {#if open}
function create_if_block_1$i(ctx) {
	let listboxmenu;
	let current;

	listboxmenu = new ListBoxMenu({
			props: {
				"aria-label": /*ariaLabel*/ ctx[29],
				id: /*id*/ ctx[17],
				$$slots: { default: [create_default_slot_1$5] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(listboxmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxmenu_changes = {};
			if (dirty[0] & /*ariaLabel*/ 536870912) listboxmenu_changes["aria-label"] = /*ariaLabel*/ ctx[29];
			if (dirty[0] & /*id*/ 131072) listboxmenu_changes.id = /*id*/ ctx[17];

			if (dirty[0] & /*filterable, filteredItems, sortedItems, highlightedIndex, fieldRef, useTitleInItem, itemToString, disabled*/ 1095762994 | dirty[2] & /*$$scope*/ 128) {
				listboxmenu_changes.$$scope = { dirty, ctx };
			}

			listboxmenu.$set(listboxmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxmenu, detaching);
		}
	};
}

// (429:10) <ListBoxMenuItem             id="{item.id}"             active="{item.checked}"             highlighted="{highlightedIndex === i}"             on:click="{() => {               sortedItems = sortedItems.map((_) =>                 _.id === item.id ? { ..._, checked: !_.checked } : _               );               fieldRef.focus();             }}"             on:mouseenter="{() => {               highlightedIndex = i;             }}"           >
function create_default_slot_2$3(ctx) {
	let checkbox;
	let t;
	let current;

	checkbox = new Checkbox({
			props: {
				readonly: true,
				tabindex: "-1",
				id: "checkbox-" + /*item*/ ctx[66].id,
				title: /*useTitleInItem*/ ctx[10]
				? /*itemToString*/ ctx[1](/*item*/ ctx[66])
				: undefined,
				name: /*itemToString*/ ctx[1](/*item*/ ctx[66]),
				labelText: /*itemToString*/ ctx[1](/*item*/ ctx[66]),
				checked: /*item*/ ctx[66].checked,
				disabled: /*disabled*/ ctx[4]
			}
		});

	return {
		c() {
			create_component(checkbox.$$.fragment);
			t = space();
		},
		m(target, anchor) {
			mount_component(checkbox, target, anchor);
			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkbox_changes = {};
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1077936160) checkbox_changes.id = "checkbox-" + /*item*/ ctx[66].id;

			if (dirty[0] & /*useTitleInItem, itemToString, filterable, filteredItems, sortedItems*/ 1077937186) checkbox_changes.title = /*useTitleInItem*/ ctx[10]
			? /*itemToString*/ ctx[1](/*item*/ ctx[66])
			: undefined;

			if (dirty[0] & /*itemToString, filterable, filteredItems, sortedItems*/ 1077936162) checkbox_changes.name = /*itemToString*/ ctx[1](/*item*/ ctx[66]);
			if (dirty[0] & /*itemToString, filterable, filteredItems, sortedItems*/ 1077936162) checkbox_changes.labelText = /*itemToString*/ ctx[1](/*item*/ ctx[66]);
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1077936160) checkbox_changes.checked = /*item*/ ctx[66].checked;
			if (dirty[0] & /*disabled*/ 16) checkbox_changes.disabled = /*disabled*/ ctx[4];
			checkbox.$set(checkbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkbox, detaching);
			if (detaching) detach(t);
		}
	};
}

// (428:8) {#each filterable ? filteredItems : sortedItems as item, i (item.id)}
function create_each_block$9(key_1, ctx) {
	let first;
	let listboxmenuitem;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[57](/*item*/ ctx[66]);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[58](/*i*/ ctx[68]);
	}

	listboxmenuitem = new ListBoxMenuItem({
			props: {
				id: /*item*/ ctx[66].id,
				active: /*item*/ ctx[66].checked,
				highlighted: /*highlightedIndex*/ ctx[20] === /*i*/ ctx[68],
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			}
		});

	listboxmenuitem.$on("click", click_handler_3);
	listboxmenuitem.$on("mouseenter", mouseenter_handler);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(listboxmenuitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(listboxmenuitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const listboxmenuitem_changes = {};
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1077936160) listboxmenuitem_changes.id = /*item*/ ctx[66].id;
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1077936160) listboxmenuitem_changes.active = /*item*/ ctx[66].checked;
			if (dirty[0] & /*highlightedIndex, filterable, filteredItems, sortedItems*/ 1078984736) listboxmenuitem_changes.highlighted = /*highlightedIndex*/ ctx[20] === /*i*/ ctx[68];

			if (dirty[0] & /*filterable, filteredItems, sortedItems, useTitleInItem, itemToString, disabled*/ 1077937202 | dirty[2] & /*$$scope*/ 128) {
				listboxmenuitem_changes.$$scope = { dirty, ctx };
			}

			listboxmenuitem.$set(listboxmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(listboxmenuitem, detaching);
		}
	};
}

// (427:6) <ListBoxMenu aria-label="{ariaLabel}" id="{id}">
function create_default_slot_1$5(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;

	let each_value = /*filterable*/ ctx[5]
	? /*filteredItems*/ ctx[30]
	: /*sortedItems*/ ctx[22];

	const get_key = ctx => /*item*/ ctx[66].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$9(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$9(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filterable, filteredItems, sortedItems, highlightedIndex, fieldRef, useTitleInItem, itemToString, disabled*/ 1095762994) {
				each_value = /*filterable*/ ctx[5]
				? /*filteredItems*/ ctx[30]
				: /*sortedItems*/ ctx[22];

				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$9, each_1_anchor, get_each_context$9);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (251:2) <ListBox     aria-label="{ariaLabel}"     id="{id}"     disabled="{disabled}"     invalid="{invalid}"     invalidText="{invalidText}"     open="{open}"     light="{light}"     size="{size}"     warn="{warn}"     warnText="{warnText}"     class="bx--multi-select {direction === 'top' &&       'bx--list-box--up'} {filterable && 'bx--combo-box'}       {filterable &&       'bx--multi-select--filterable'}       {invalid &&       'bx--multi-select--invalid'}       {inline &&       'bx--multi-select--inline'}       {checked.length > 0 &&       'bx--multi-select--selected'}"   >
function create_default_slot$e(ctx) {
	let t0;
	let t1;
	let listboxfield;
	let t2;
	let if_block2_anchor;
	let current;
	let if_block0 = /*invalid*/ ctx[11] && create_if_block_8$1();
	let if_block1 = !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block_7$1();

	listboxfield = new ListBoxField({
			props: {
				role: "button",
				tabindex: "0",
				"aria-expanded": /*open*/ ctx[0],
				id: /*id*/ ctx[17],
				disabled: /*disabled*/ ctx[4],
				translateWithId: /*translateWithId*/ ctx[8],
				$$slots: { default: [create_default_slot_3$2] },
				$$scope: { ctx }
			}
		});

	listboxfield.$on("click", /*click_handler_2*/ ctx[54]);
	listboxfield.$on("keydown", /*keydown_handler_2*/ ctx[55]);
	listboxfield.$on("blur", /*blur_handler_2*/ ctx[56]);
	let if_block2 = /*open*/ ctx[0] && create_if_block_1$i(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			create_component(listboxfield.$$.fragment);
			t2 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			mount_component(listboxfield, target, anchor);
			insert(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*invalid*/ ctx[11]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_8$1();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 10240) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_7$1();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const listboxfield_changes = {};
			if (dirty[0] & /*open*/ 1) listboxfield_changes["aria-expanded"] = /*open*/ ctx[0];
			if (dirty[0] & /*id*/ 131072) listboxfield_changes.id = /*id*/ ctx[17];
			if (dirty[0] & /*disabled*/ 16) listboxfield_changes.disabled = /*disabled*/ ctx[4];
			if (dirty[0] & /*translateWithId*/ 256) listboxfield_changes.translateWithId = /*translateWithId*/ ctx[8];

			if (dirty[0] & /*open, translateWithId, label, filterable, disabled, inputValue, invalid, menuId, placeholder, id, name, inputRef, light, highlightedIndex, sortedItems, checked, fieldRef*/ 226429425 | dirty[1] & /*$$restProps, highlightedId*/ 5 | dirty[2] & /*$$scope*/ 128) {
				listboxfield_changes.$$scope = { dirty, ctx };
			}

			listboxfield.$set(listboxfield_changes);

			if (/*open*/ ctx[0]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*open*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1$i(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(listboxfield.$$.fragment, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(listboxfield.$$.fragment, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			destroy_component(listboxfield, detaching);
			if (detaching) detach(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (458:2) {#if !inline && !invalid && !warn && helperText}
function create_if_block$X(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[15]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 32768) set_data(t, /*helperText*/ ctx[15]);

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1C(ctx) {
	let t0;
	let div;
	let t1;
	let listbox;
	let t2;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*titleText*/ ctx[9] && create_if_block_9$1(ctx);

	listbox = new ListBox({
			props: {
				"aria-label": /*ariaLabel*/ ctx[29],
				id: /*id*/ ctx[17],
				disabled: /*disabled*/ ctx[4],
				invalid: /*invalid*/ ctx[11],
				invalidText: /*invalidText*/ ctx[12],
				open: /*open*/ ctx[0],
				light: /*light*/ ctx[6],
				size: /*size*/ ctx[2],
				warn: /*warn*/ ctx[13],
				warnText: /*warnText*/ ctx[14],
				class: "bx--multi-select " + (/*direction*/ ctx[3] === "top" && "bx--list-box--up") + " " + (/*filterable*/ ctx[5] && "bx--combo-box") + "\n      " + (/*filterable*/ ctx[5] && "bx--multi-select--filterable") + "\n      " + (/*invalid*/ ctx[11] && "bx--multi-select--invalid") + "\n      " + (/*inline*/ ctx[28] && "bx--multi-select--inline") + "\n      " + (/*checked*/ ctx[21].length > 0 && "bx--multi-select--selected"),
				$$slots: { default: [create_default_slot$e] },
				$$scope: { ctx }
			}
		});

	let if_block1 = !/*inline*/ ctx[28] && !/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && /*helperText*/ ctx[15] && create_if_block$X(ctx);

	return {
		c() {
			t0 = space();
			div = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			create_component(listbox.$$.fragment);
			t2 = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--multi-select__wrapper", true);
			toggle_class(div, "bx--list-box__wrapper", true);
			toggle_class(div, "bx--multi-select__wrapper--inline", /*inline*/ ctx[28]);
			toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[28]);
			toggle_class(div, "bx--multi-select__wrapper--inline--invalid", /*inline*/ ctx[28] && /*invalid*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t1);
			mount_component(listbox, div, null);
			append(div, t2);
			if (if_block1) if_block1.m(div, null);
			/*div_binding*/ ctx[59](div);
			current = true;

			if (!mounted) {
				dispose = listen(document.body, "click", /*click_handler*/ ctx[45]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*titleText*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_9$1(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			const listbox_changes = {};
			if (dirty[0] & /*ariaLabel*/ 536870912) listbox_changes["aria-label"] = /*ariaLabel*/ ctx[29];
			if (dirty[0] & /*id*/ 131072) listbox_changes.id = /*id*/ ctx[17];
			if (dirty[0] & /*disabled*/ 16) listbox_changes.disabled = /*disabled*/ ctx[4];
			if (dirty[0] & /*invalid*/ 2048) listbox_changes.invalid = /*invalid*/ ctx[11];
			if (dirty[0] & /*invalidText*/ 4096) listbox_changes.invalidText = /*invalidText*/ ctx[12];
			if (dirty[0] & /*open*/ 1) listbox_changes.open = /*open*/ ctx[0];
			if (dirty[0] & /*light*/ 64) listbox_changes.light = /*light*/ ctx[6];
			if (dirty[0] & /*size*/ 4) listbox_changes.size = /*size*/ ctx[2];
			if (dirty[0] & /*warn*/ 8192) listbox_changes.warn = /*warn*/ ctx[13];
			if (dirty[0] & /*warnText*/ 16384) listbox_changes.warnText = /*warnText*/ ctx[14];
			if (dirty[0] & /*direction, filterable, invalid, inline, checked*/ 270534696) listbox_changes.class = "bx--multi-select " + (/*direction*/ ctx[3] === "top" && "bx--list-box--up") + " " + (/*filterable*/ ctx[5] && "bx--combo-box") + "\n      " + (/*filterable*/ ctx[5] && "bx--multi-select--filterable") + "\n      " + (/*invalid*/ ctx[11] && "bx--multi-select--invalid") + "\n      " + (/*inline*/ ctx[28] && "bx--multi-select--inline") + "\n      " + (/*checked*/ ctx[21].length > 0 && "bx--multi-select--selected");

			if (dirty[0] & /*ariaLabel, id, filterable, filteredItems, sortedItems, highlightedIndex, fieldRef, useTitleInItem, itemToString, disabled, open, translateWithId, inputRef, selectionRef, checked, label, inputValue, invalid, menuId, placeholder, name, light, warn*/ 1870605811 | dirty[1] & /*$$restProps, highlightedId*/ 5 | dirty[2] & /*$$scope*/ 128) {
				listbox_changes.$$scope = { dirty, ctx };
			}

			listbox.$set(listbox_changes);

			if (!/*inline*/ ctx[28] && !/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && /*helperText*/ ctx[15]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$X(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*inline*/ 268435456) {
				toggle_class(div, "bx--multi-select__wrapper--inline", /*inline*/ ctx[28]);
			}

			if (dirty[0] & /*inline*/ 268435456) {
				toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[28]);
			}

			if (dirty[0] & /*inline, invalid*/ 268437504) {
				toggle_class(div, "bx--multi-select__wrapper--inline--invalid", /*inline*/ ctx[28] && /*invalid*/ ctx[11]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(listbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			destroy_component(listbox);
			if (if_block1) if_block1.d();
			/*div_binding*/ ctx[59](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$1C($$self, $$props, $$invalidate) {
	let menuId;
	let inline;
	let ariaLabel;
	let sortedItems;
	let checked;
	let unchecked;
	let filteredItems;
	let highlightedId;

	const omit_props_names = [
		"items","itemToString","selectedIds","value","size","type","direction","selectionFeedback","disabled","filterable","filterItem","open","light","locale","placeholder","sortItem","translateWithId","titleText","useTitleInItem","invalid","invalidText","warn","warnText","helperText","label","id","name"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { items = [] } = $$props;
	let { itemToString = item => item.text || item.id } = $$props;
	let { selectedIds = [] } = $$props;
	let { value = "" } = $$props;
	let { size = undefined } = $$props;
	let { type = "default" } = $$props;
	let { direction = "bottom" } = $$props;
	let { selectionFeedback = "top-after-reopen" } = $$props;
	let { disabled = false } = $$props;
	let { filterable = false } = $$props;
	let { filterItem = (item, value) => item.text.toLowerCase().includes(value.toLowerCase()) } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { locale = "en" } = $$props;
	let { placeholder = "" } = $$props;
	let { sortItem = (a, b) => a.text.localeCompare(b.text, locale, { numeric: true }) } = $$props;
	let { translateWithId = undefined } = $$props;
	let { titleText = "" } = $$props;
	let { useTitleInItem = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { label = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	const dispatch = createEventDispatcher();
	let multiSelectRef = null;
	let fieldRef = null;
	let selectionRef = null;
	let inputRef = null;
	let inputValue = "";
	let initialSorted = false;
	let highlightedIndex = -1;
	let prevChecked = [];

	setContext("MultiSelect", {
		declareRef: ({ key, ref }) => {
			switch (key) {
				case "field":
					$$invalidate(24, fieldRef = ref);
					break;
				case "selection":
					$$invalidate(25, selectionRef = ref);
					break;
			}
		}
	});

	function change(direction) {
		let index = highlightedIndex + direction;

		if (index < 0) {
			index = items.length - 1;
		} else if (index >= items.length) {
			index = 0;
		}

		$$invalidate(20, highlightedIndex = index);
	}

	function sort() {
		return [
			...checked.length > 1 ? checked.sort(sortItem) : checked,
			...unchecked.sort(sortItem)
		];
	}

	afterUpdate(() => {
		if (checked.length !== prevChecked.length) {
			if (selectionFeedback === "top") {
				$$invalidate(22, sortedItems = sort());
			}

			prevChecked = checked;
			$$invalidate(35, selectedIds = checked.map(({ id }) => id));

			dispatch("select", {
				selectedIds,
				selected: checked,
				unselected: unchecked
			});
		}

		if (!open) {
			if (!initialSorted || selectionFeedback !== "fixed") {
				$$invalidate(22, sortedItems = sort());
				initialSorted = true;
			}

			$$invalidate(20, highlightedIndex = -1);
			$$invalidate(19, inputValue = "");
		}

		$$invalidate(34, items = sortedItems);
	});

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	const click_handler = ({ target }) => {
		if (open && multiSelectRef && !multiSelectRef.contains(target)) {
			$$invalidate(0, open = false);
		}
	};

	function clear_handler(event) {
		bubble($$self, event);
	}

	const clear_handler_1 = () => {
		$$invalidate(22, sortedItems = sortedItems.map(item => ({ ...item, checked: false })));
		fieldRef.blur();
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputRef = $$value;
			$$invalidate(26, inputRef);
		});
	}

	const input_handler = ({ target }) => {
		$$invalidate(19, inputValue = target.value);
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === "Enter") {
			if (highlightedIndex > -1) {
				$$invalidate(22, sortedItems[highlightedIndex].checked = !sortedItems[highlightedIndex].checked, sortedItems);
			}
		} else if (key === "Tab") {
			$$invalidate(0, open = false);
		} else if (key === "ArrowDown") {
			change(1);
		} else if (key === "ArrowUp") {
			change(-1);
		}
	};

	const blur_handler_1 = ({ relatedTarget }) => {
		if (relatedTarget && relatedTarget.getAttribute("role") !== "button") {
			inputRef.focus();
		}
	};

	const clear_handler_2 = () => {
		$$invalidate(19, inputValue = "");
		$$invalidate(0, open = false);
	};

	const click_handler_1 = e => {
		e.stopPropagation();
		$$invalidate(0, open = !open);
	};

	const click_handler_2 = () => {
		if (disabled) return;

		if (filterable) {
			$$invalidate(0, open = true);
			inputRef.focus();
		} else {
			$$invalidate(0, open = !open);
		}
	};

	const keydown_handler_2 = ({ key }) => {
		if (filterable) {
			return;
		}

		if (key === " ") {
			$$invalidate(0, open = !open);
		} else if (key === "Tab") {
			if (selectionRef && checked.length > 0) {
				selectionRef.focus();
			} else {
				$$invalidate(0, open = false);
				fieldRef.blur();
			}
		} else if (key === "ArrowDown") {
			change(1);
		} else if (key === "ArrowUp") {
			change(-1);
		} else if (key === "Enter") {
			if (highlightedIndex > -1) {
				$$invalidate(22, sortedItems[highlightedIndex].checked = !sortedItems[highlightedIndex].checked, sortedItems);
			}
		}
	};

	const blur_handler_2 = ({ relatedTarget }) => {
		if (relatedTarget && !["INPUT", "SELECT", "TEXTAREA"].includes(relatedTarget.tagName) && relatedTarget.getAttribute("role") !== "button" && relatedTarget.getAttribute("role") !== "searchbox") {
			fieldRef.focus();
		}
	};

	const click_handler_3 = item => {
		$$invalidate(22, sortedItems = sortedItems.map(_ => _.id === item.id ? { ..._, checked: !_.checked } : _));
		fieldRef.focus();
	};

	const mouseenter_handler = i => {
		$$invalidate(20, highlightedIndex = i);
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			multiSelectRef = $$value;
			$$invalidate(23, multiSelectRef);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(65, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(33, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("items" in $$new_props) $$invalidate(34, items = $$new_props.items);
		if ("itemToString" in $$new_props) $$invalidate(1, itemToString = $$new_props.itemToString);
		if ("selectedIds" in $$new_props) $$invalidate(35, selectedIds = $$new_props.selectedIds);
		if ("value" in $$new_props) $$invalidate(36, value = $$new_props.value);
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("type" in $$new_props) $$invalidate(37, type = $$new_props.type);
		if ("direction" in $$new_props) $$invalidate(3, direction = $$new_props.direction);
		if ("selectionFeedback" in $$new_props) $$invalidate(38, selectionFeedback = $$new_props.selectionFeedback);
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("filterable" in $$new_props) $$invalidate(5, filterable = $$new_props.filterable);
		if ("filterItem" in $$new_props) $$invalidate(39, filterItem = $$new_props.filterItem);
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("light" in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ("locale" in $$new_props) $$invalidate(40, locale = $$new_props.locale);
		if ("placeholder" in $$new_props) $$invalidate(7, placeholder = $$new_props.placeholder);
		if ("sortItem" in $$new_props) $$invalidate(41, sortItem = $$new_props.sortItem);
		if ("translateWithId" in $$new_props) $$invalidate(8, translateWithId = $$new_props.translateWithId);
		if ("titleText" in $$new_props) $$invalidate(9, titleText = $$new_props.titleText);
		if ("useTitleInItem" in $$new_props) $$invalidate(10, useTitleInItem = $$new_props.useTitleInItem);
		if ("invalid" in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ("warn" in $$new_props) $$invalidate(13, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(14, warnText = $$new_props.warnText);
		if ("helperText" in $$new_props) $$invalidate(15, helperText = $$new_props.helperText);
		if ("label" in $$new_props) $$invalidate(16, label = $$new_props.label);
		if ("id" in $$new_props) $$invalidate(17, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(18, name = $$new_props.name);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 131072) {
			 $$invalidate(27, menuId = `menu-${id}`);
		}

		if ($$self.$$.dirty[1] & /*type*/ 64) {
			 $$invalidate(28, inline = type === "inline");
		}

		 $$invalidate(29, ariaLabel = $$props["aria-label"] || "Choose an item");

		if ($$self.$$.dirty[1] & /*items, selectedIds*/ 24) {
			 $$invalidate(22, sortedItems = items.map(item => ({
				...item,
				checked: selectedIds.includes(item.id)
			})));
		}

		if ($$self.$$.dirty[0] & /*sortedItems*/ 4194304) {
			 $$invalidate(21, checked = sortedItems.filter(({ checked }) => checked));
		}

		if ($$self.$$.dirty[0] & /*sortedItems*/ 4194304) {
			 unchecked = sortedItems.filter(({ checked }) => !checked);
		}

		if ($$self.$$.dirty[0] & /*inputValue*/ 524288) {
			 $$invalidate(36, value = inputValue);
		}

		if ($$self.$$.dirty[0] & /*sortedItems*/ 4194304 | $$self.$$.dirty[1] & /*filterItem, value*/ 288) {
			 $$invalidate(30, filteredItems = sortedItems.filter(item => filterItem(item, value)));
		}

		if ($$self.$$.dirty[0] & /*sortedItems, highlightedIndex*/ 5242880) {
			 $$invalidate(31, highlightedId = sortedItems[highlightedIndex]
			? sortedItems[highlightedIndex].id
			: undefined);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		itemToString,
		size,
		direction,
		disabled,
		filterable,
		light,
		placeholder,
		translateWithId,
		titleText,
		useTitleInItem,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		label,
		id,
		name,
		inputValue,
		highlightedIndex,
		checked,
		sortedItems,
		multiSelectRef,
		fieldRef,
		selectionRef,
		inputRef,
		menuId,
		inline,
		ariaLabel,
		filteredItems,
		highlightedId,
		change,
		$$restProps,
		items,
		selectedIds,
		value,
		type,
		selectionFeedback,
		filterItem,
		locale,
		sortItem,
		keydown_handler,
		focus_handler,
		blur_handler,
		click_handler,
		clear_handler,
		clear_handler_1,
		input_binding,
		input_handler,
		keydown_handler_1,
		blur_handler_1,
		clear_handler_2,
		click_handler_1,
		click_handler_2,
		keydown_handler_2,
		blur_handler_2,
		click_handler_3,
		mouseenter_handler,
		div_binding
	];
}

class MultiSelect extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1C,
			create_fragment$1C,
			safe_not_equal,
			{
				items: 34,
				itemToString: 1,
				selectedIds: 35,
				value: 36,
				size: 2,
				type: 37,
				direction: 3,
				selectionFeedback: 38,
				disabled: 4,
				filterable: 5,
				filterItem: 39,
				open: 0,
				light: 6,
				locale: 40,
				placeholder: 7,
				sortItem: 41,
				translateWithId: 8,
				titleText: 9,
				useTitleInItem: 10,
				invalid: 11,
				invalidText: 12,
				warn: 13,
				warnText: 14,
				helperText: 15,
				label: 16,
				id: 17,
				name: 18
			},
			[-1, -1, -1]
		);
	}
}

/* src/Modal/Modal.svelte generated by Svelte v3.32.1 */
const get_heading_slot_changes = dirty => ({});
const get_heading_slot_context = ctx => ({});
const get_label_slot_changes = dirty => ({});
const get_label_slot_context = ctx => ({});

// (180:6) {#if passiveModal}
function create_if_block_4$8(ctx) {
	let button;
	let close20;
	let current;
	let mounted;
	let dispose;

	close20 = new Close20({
			props: {
				"aria-label": /*iconDescription*/ ctx[7],
				class: "bx--modal-close__icon"
			}
		});

	return {
		c() {
			button = element("button");
			create_component(close20.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			attr(button, "title", /*iconDescription*/ ctx[7]);
			toggle_class(button, "bx--modal-close", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(close20, button, null);
			/*button_binding*/ ctx[35](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_1*/ ctx[36]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			const close20_changes = {};
			if (dirty[0] & /*iconDescription*/ 128) close20_changes["aria-label"] = /*iconDescription*/ ctx[7];
			close20.$set(close20_changes);

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			}

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "title", /*iconDescription*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(close20);
			/*button_binding*/ ctx[35](null);
			mounted = false;
			dispose();
		}
	};
}

// (197:6) {#if modalLabel}
function create_if_block_3$a(ctx) {
	let h2;
	let current;
	const label_slot_template = /*#slots*/ ctx[29].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[47], get_label_slot_context);
	const label_slot_or_fallback = label_slot || fallback_block_1$4(ctx);

	return {
		c() {
			h2 = element("h2");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr(h2, "id", /*modalLabelId*/ ctx[21]);
			toggle_class(h2, "bx--modal-header__label", true);
		},
		m(target, anchor) {
			insert(target, h2, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(h2, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && dirty[1] & /*$$scope*/ 65536) {
					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[47], dirty, get_label_slot_changes, get_label_slot_context);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && dirty[0] & /*modalLabel*/ 64) {
					label_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*modalLabelId*/ 2097152) {
				attr(h2, "id", /*modalLabelId*/ ctx[21]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h2);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};
}

// (199:29) {modalLabel}
function fallback_block_1$4(ctx) {
	let t;

	return {
		c() {
			t = text(/*modalLabel*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*modalLabel*/ 64) set_data(t, /*modalLabel*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (203:29) {modalHeading}
function fallback_block$q(ctx) {
	let t;

	return {
		c() {
			t = text(/*modalHeading*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*modalHeading*/ 32) set_data(t, /*modalHeading*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (205:6) {#if !passiveModal}
function create_if_block_2$c(ctx) {
	let button;
	let close20;
	let current;
	let mounted;
	let dispose;

	close20 = new Close20({
			props: {
				"aria-label": /*iconDescription*/ ctx[7],
				class: "bx--modal-close__icon"
			}
		});

	return {
		c() {
			button = element("button");
			create_component(close20.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			attr(button, "title", /*iconDescription*/ ctx[7]);
			toggle_class(button, "bx--modal-close", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(close20, button, null);
			/*button_binding_1*/ ctx[37](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_2*/ ctx[38]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			const close20_changes = {};
			if (dirty[0] & /*iconDescription*/ 128) close20_changes["aria-label"] = /*iconDescription*/ ctx[7];
			close20.$set(close20_changes);

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			}

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "title", /*iconDescription*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(close20);
			/*button_binding_1*/ ctx[37](null);
			mounted = false;
			dispose();
		}
	};
}

// (235:4) {#if hasScrollingContent}
function create_if_block_1$j(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			toggle_class(div, "bx--modal-content--overflow-indicator", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (238:4) {#if !passiveModal}
function create_if_block$Y(ctx) {
	let div;
	let button0;
	let t;
	let button1;
	let current;

	button0 = new Button({
			props: {
				kind: "secondary",
				$$slots: { default: [create_default_slot_1$6] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*click_handler_3*/ ctx[39]);

	button1 = new Button({
			props: {
				kind: /*danger*/ ctx[3] ? "danger" : "primary",
				disabled: /*primaryButtonDisabled*/ ctx[11],
				$$slots: { default: [create_default_slot$f] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*click_handler_4*/ ctx[40]);

	return {
		c() {
			div = element("div");
			create_component(button0.$$.fragment);
			t = space();
			create_component(button1.$$.fragment);
			toggle_class(div, "bx--modal-footer", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(button0, div, null);
			append(div, t);
			mount_component(button1, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const button0_changes = {};

			if (dirty[0] & /*secondaryButtonText*/ 8192 | dirty[1] & /*$$scope*/ 65536) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty[0] & /*danger*/ 8) button1_changes.kind = /*danger*/ ctx[3] ? "danger" : "primary";
			if (dirty[0] & /*primaryButtonDisabled*/ 2048) button1_changes.disabled = /*primaryButtonDisabled*/ ctx[11];

			if (dirty[0] & /*primaryButtonText*/ 1024 | dirty[1] & /*$$scope*/ 65536) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(button0);
			destroy_component(button1);
		}
	};
}

// (240:8) <Button           kind="secondary"           on:click="{() => {             dispatch('click:button--secondary');           }}"         >
function create_default_slot_1$6(ctx) {
	let t;

	return {
		c() {
			t = text(/*secondaryButtonText*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*secondaryButtonText*/ 8192) set_data(t, /*secondaryButtonText*/ ctx[13]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (248:8) <Button           kind="{danger ? 'danger' : 'primary'}"           disabled="{primaryButtonDisabled}"           on:click="{() => {             dispatch('submit');           }}"         >
function create_default_slot$f(ctx) {
	let t;

	return {
		c() {
			t = text(/*primaryButtonText*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*primaryButtonText*/ 1024) set_data(t, /*primaryButtonText*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$1D(ctx) {
	let div3;
	let div2;
	let div0;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let div1;
	let div1_tabindex_value;
	let div1_role_value;
	let div1_aria_label_value;
	let div1_aria_labelledby_value;
	let t4;
	let t5;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*passiveModal*/ ctx[4] && create_if_block_4$8(ctx);
	let if_block1 = /*modalLabel*/ ctx[6] && create_if_block_3$a(ctx);
	const heading_slot_template = /*#slots*/ ctx[29].heading;
	const heading_slot = create_slot(heading_slot_template, ctx, /*$$scope*/ ctx[47], get_heading_slot_context);
	const heading_slot_or_fallback = heading_slot || fallback_block$q(ctx);
	let if_block2 = !/*passiveModal*/ ctx[4] && create_if_block_2$c(ctx);
	const default_slot_template = /*#slots*/ ctx[29].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[47], null);
	let if_block3 = /*hasScrollingContent*/ ctx[9] && create_if_block_1$j();
	let if_block4 = !/*passiveModal*/ ctx[4] && create_if_block$Y(ctx);

	let div2_levels = [
		{ role: "dialog" },
		{ tabindex: "-1" },
		/*alertDialogProps*/ ctx[20],
		{ "aria-modal": "true" },
		{ "aria-label": /*ariaLabel*/ ctx[23] }
	];

	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	let div3_levels = [{ role: "presentation" }, { id: /*id*/ ctx[15] }, /*$$restProps*/ ctx[25]];
	let div3_data = {};

	for (let i = 0; i < div3_levels.length; i += 1) {
		div3_data = assign(div3_data, div3_levels[i]);
	}

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			h3 = element("h3");
			if (heading_slot_or_fallback) heading_slot_or_fallback.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			attr(h3, "id", /*modalHeadingId*/ ctx[22]);
			toggle_class(h3, "bx--modal-header__heading", true);
			toggle_class(div0, "bx--modal-header", true);
			attr(div1, "id", /*modalBodyId*/ ctx[16]);
			attr(div1, "tabindex", div1_tabindex_value = /*hasScrollingContent*/ ctx[9] ? "0" : undefined);
			attr(div1, "role", div1_role_value = /*hasScrollingContent*/ ctx[9] ? "region" : undefined);

			attr(div1, "aria-label", div1_aria_label_value = /*hasScrollingContent*/ ctx[9]
			? /*ariaLabel*/ ctx[23]
			: undefined);

			attr(div1, "aria-labelledby", div1_aria_labelledby_value = /*modalLabel*/ ctx[6]
			? /*modalLabelId*/ ctx[21]
			: /*modalHeadingId*/ ctx[22]);

			toggle_class(div1, "bx--modal-content", true);
			toggle_class(div1, "bx--modal-content--with-form", /*hasForm*/ ctx[8]);
			toggle_class(div1, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[9]);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--modal-container", true);
			toggle_class(div2, "bx--modal-container--xs", /*size*/ ctx[2] === "xs");
			toggle_class(div2, "bx--modal-container--sm", /*size*/ ctx[2] === "sm");
			toggle_class(div2, "bx--modal-container--lg", /*size*/ ctx[2] === "lg");
			set_attributes(div3, div3_data);
			toggle_class(div3, "bx--modal", true);
			toggle_class(div3, "bx--modal-tall", !/*passiveModal*/ ctx[4]);
			toggle_class(div3, "is-visible", /*open*/ ctx[0]);
			toggle_class(div3, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, h3);

			if (heading_slot_or_fallback) {
				heading_slot_or_fallback.m(h3, null);
			}

			append(div0, t2);
			if (if_block2) if_block2.m(div0, null);
			append(div2, t3);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div2, t4);
			if (if_block3) if_block3.m(div2, null);
			append(div2, t5);
			if (if_block4) if_block4.m(div2, null);
			/*div2_binding*/ ctx[41](div2);
			/*div3_binding*/ ctx[43](div3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div2, "click", /*click_handler_5*/ ctx[42]),
					listen(div3, "keydown", /*keydown_handler*/ ctx[30]),
					listen(div3, "keydown", /*keydown_handler_1*/ ctx[44]),
					listen(div3, "click", /*click_handler*/ ctx[31]),
					listen(div3, "click", /*click_handler_6*/ ctx[45]),
					listen(div3, "mouseover", /*mouseover_handler*/ ctx[32]),
					listen(div3, "mouseenter", /*mouseenter_handler*/ ctx[33]),
					listen(div3, "mouseleave", /*mouseleave_handler*/ ctx[34]),
					listen(div3, "transitionend", /*transitionend_handler*/ ctx[46])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*passiveModal*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$8(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*modalLabel*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*modalLabel*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$a(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (heading_slot) {
				if (heading_slot.p && dirty[1] & /*$$scope*/ 65536) {
					update_slot(heading_slot, heading_slot_template, ctx, /*$$scope*/ ctx[47], dirty, get_heading_slot_changes, get_heading_slot_context);
				}
			} else {
				if (heading_slot_or_fallback && heading_slot_or_fallback.p && dirty[0] & /*modalHeading*/ 32) {
					heading_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*modalHeadingId*/ 4194304) {
				attr(h3, "id", /*modalHeadingId*/ ctx[22]);
			}

			if (!/*passiveModal*/ ctx[4]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 16) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2$c(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty[1] & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[47], dirty, null, null);
				}
			}

			if (!current || dirty[0] & /*modalBodyId*/ 65536) {
				attr(div1, "id", /*modalBodyId*/ ctx[16]);
			}

			if (!current || dirty[0] & /*hasScrollingContent*/ 512 && div1_tabindex_value !== (div1_tabindex_value = /*hasScrollingContent*/ ctx[9] ? "0" : undefined)) {
				attr(div1, "tabindex", div1_tabindex_value);
			}

			if (!current || dirty[0] & /*hasScrollingContent*/ 512 && div1_role_value !== (div1_role_value = /*hasScrollingContent*/ ctx[9] ? "region" : undefined)) {
				attr(div1, "role", div1_role_value);
			}

			if (!current || dirty[0] & /*hasScrollingContent, ariaLabel*/ 8389120 && div1_aria_label_value !== (div1_aria_label_value = /*hasScrollingContent*/ ctx[9]
			? /*ariaLabel*/ ctx[23]
			: undefined)) {
				attr(div1, "aria-label", div1_aria_label_value);
			}

			if (!current || dirty[0] & /*modalLabel, modalLabelId, modalHeadingId*/ 6291520 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = /*modalLabel*/ ctx[6]
			? /*modalLabelId*/ ctx[21]
			: /*modalHeadingId*/ ctx[22])) {
				attr(div1, "aria-labelledby", div1_aria_labelledby_value);
			}

			if (dirty[0] & /*hasForm*/ 256) {
				toggle_class(div1, "bx--modal-content--with-form", /*hasForm*/ ctx[8]);
			}

			if (dirty[0] & /*hasScrollingContent*/ 512) {
				toggle_class(div1, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[9]);
			}

			if (/*hasScrollingContent*/ ctx[9]) {
				if (if_block3) ; else {
					if_block3 = create_if_block_1$j();
					if_block3.c();
					if_block3.m(div2, t5);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!/*passiveModal*/ ctx[4]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 16) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block$Y(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div2, null);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				{ role: "dialog" },
				{ tabindex: "-1" },
				dirty[0] & /*alertDialogProps*/ 1048576 && /*alertDialogProps*/ ctx[20],
				{ "aria-modal": "true" },
				(!current || dirty[0] & /*ariaLabel*/ 8388608) && { "aria-label": /*ariaLabel*/ ctx[23] }
			]));

			toggle_class(div2, "bx--modal-container", true);
			toggle_class(div2, "bx--modal-container--xs", /*size*/ ctx[2] === "xs");
			toggle_class(div2, "bx--modal-container--sm", /*size*/ ctx[2] === "sm");
			toggle_class(div2, "bx--modal-container--lg", /*size*/ ctx[2] === "lg");

			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
				{ role: "presentation" },
				(!current || dirty[0] & /*id*/ 32768) && { id: /*id*/ ctx[15] },
				dirty[0] & /*$$restProps*/ 33554432 && /*$$restProps*/ ctx[25]
			]));

			toggle_class(div3, "bx--modal", true);
			toggle_class(div3, "bx--modal-tall", !/*passiveModal*/ ctx[4]);
			toggle_class(div3, "is-visible", /*open*/ ctx[0]);
			toggle_class(div3, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(heading_slot_or_fallback, local);
			transition_in(if_block2);
			transition_in(default_slot, local);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(heading_slot_or_fallback, local);
			transition_out(if_block2);
			transition_out(default_slot, local);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (heading_slot_or_fallback) heading_slot_or_fallback.d(detaching);
			if (if_block2) if_block2.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			/*div2_binding*/ ctx[41](null);
			/*div3_binding*/ ctx[43](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1D($$self, $$props, $$invalidate) {
	let modalLabelId;
	let modalHeadingId;
	let modalBodyId;
	let ariaLabel;

	const omit_props_names = [
		"size","open","danger","alert","passiveModal","modalHeading","modalLabel","modalAriaLabel","iconDescription","hasForm","hasScrollingContent","primaryButtonText","primaryButtonDisabled","shouldSubmitOnEnter","secondaryButtonText","selectorPrimaryFocus","preventCloseOnClickOutside","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { open = false } = $$props;
	let { danger = false } = $$props;
	let { alert = false } = $$props;
	let { passiveModal = false } = $$props;
	let { modalHeading = undefined } = $$props;
	let { modalLabel = undefined } = $$props;
	let { modalAriaLabel = undefined } = $$props;
	let { iconDescription = "Close the modal" } = $$props;
	let { hasForm = false } = $$props;
	let { hasScrollingContent = false } = $$props;
	let { primaryButtonText = "" } = $$props;
	let { primaryButtonDisabled = false } = $$props;
	let { shouldSubmitOnEnter = true } = $$props;
	let { secondaryButtonText = "" } = $$props;
	let { selectorPrimaryFocus = "[data-modal-primary-focus]" } = $$props;
	let { preventCloseOnClickOutside = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let buttonRef = null;
	let innerModal = null;
	let opened = false;
	let didClickInnerModal = false;

	function focus(element) {
		const node = (element || innerModal).querySelector(selectorPrimaryFocus) || buttonRef;
		node.focus();
	}

	onMount(() => {
		return () => {
			document.body.classList.remove("bx--body--with-modal-open");
		};
	});

	afterUpdate(() => {
		if (opened) {
			if (!open) {
				opened = false;
				dispatch("close");
				document.body.classList.remove("bx--body--with-modal-open");
			}
		} else if (open) {
			opened = true;
			focus();
			dispatch("open");
			document.body.classList.add("bx--body--with-modal-open");
		}
	});

	let alertDialogProps = {};

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			buttonRef = $$value;
			$$invalidate(17, buttonRef);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(0, open = false);
	};

	function button_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			buttonRef = $$value;
			$$invalidate(17, buttonRef);
		});
	}

	const click_handler_2 = () => {
		$$invalidate(0, open = false);
	};

	const click_handler_3 = () => {
		dispatch("click:button--secondary");
	};

	const click_handler_4 = () => {
		dispatch("submit");
	};

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			innerModal = $$value;
			$$invalidate(18, innerModal);
		});
	}

	const click_handler_5 = () => {
		$$invalidate(19, didClickInnerModal = true);
	};

	function div3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler_1 = ({ key }) => {
		if (open) {
			if (key === "Escape") {
				$$invalidate(0, open = false);
			} else if (shouldSubmitOnEnter && key === "Enter") {
				dispatch("submit");
			}
		}
	};

	const click_handler_6 = () => {
		if (!didClickInnerModal && !preventCloseOnClickOutside) $$invalidate(0, open = false);
		$$invalidate(19, didClickInnerModal = false);
	};

	const transitionend_handler = e => {
		if (e.propertyName === "transform") {
			dispatch("transitionend", { open });
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(50, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("danger" in $$new_props) $$invalidate(3, danger = $$new_props.danger);
		if ("alert" in $$new_props) $$invalidate(26, alert = $$new_props.alert);
		if ("passiveModal" in $$new_props) $$invalidate(4, passiveModal = $$new_props.passiveModal);
		if ("modalHeading" in $$new_props) $$invalidate(5, modalHeading = $$new_props.modalHeading);
		if ("modalLabel" in $$new_props) $$invalidate(6, modalLabel = $$new_props.modalLabel);
		if ("modalAriaLabel" in $$new_props) $$invalidate(27, modalAriaLabel = $$new_props.modalAriaLabel);
		if ("iconDescription" in $$new_props) $$invalidate(7, iconDescription = $$new_props.iconDescription);
		if ("hasForm" in $$new_props) $$invalidate(8, hasForm = $$new_props.hasForm);
		if ("hasScrollingContent" in $$new_props) $$invalidate(9, hasScrollingContent = $$new_props.hasScrollingContent);
		if ("primaryButtonText" in $$new_props) $$invalidate(10, primaryButtonText = $$new_props.primaryButtonText);
		if ("primaryButtonDisabled" in $$new_props) $$invalidate(11, primaryButtonDisabled = $$new_props.primaryButtonDisabled);
		if ("shouldSubmitOnEnter" in $$new_props) $$invalidate(12, shouldSubmitOnEnter = $$new_props.shouldSubmitOnEnter);
		if ("secondaryButtonText" in $$new_props) $$invalidate(13, secondaryButtonText = $$new_props.secondaryButtonText);
		if ("selectorPrimaryFocus" in $$new_props) $$invalidate(28, selectorPrimaryFocus = $$new_props.selectorPrimaryFocus);
		if ("preventCloseOnClickOutside" in $$new_props) $$invalidate(14, preventCloseOnClickOutside = $$new_props.preventCloseOnClickOutside);
		if ("id" in $$new_props) $$invalidate(15, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(47, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 32768) {
			 $$invalidate(21, modalLabelId = `bx--modal-header__label--modal-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 32768) {
			 $$invalidate(22, modalHeadingId = `bx--modal-header__heading--modal-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 32768) {
			 $$invalidate(16, modalBodyId = `bx--modal-body--${id}`);
		}

		 $$invalidate(23, ariaLabel = modalLabel || $$props["aria-label"] || modalAriaLabel || modalHeading);

		if ($$self.$$.dirty[0] & /*alert, passiveModal, modalBodyId*/ 67174416) {
			 if (alert) {
				if (passiveModal) {
					$$invalidate(20, alertDialogProps.role = "alert", alertDialogProps);
				}

				if (!passiveModal) {
					$$invalidate(20, alertDialogProps.role = "alertdialog", alertDialogProps);
					$$invalidate(20, alertDialogProps["aria-describedby"] = modalBodyId, alertDialogProps);
				}
			}
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		ref,
		size,
		danger,
		passiveModal,
		modalHeading,
		modalLabel,
		iconDescription,
		hasForm,
		hasScrollingContent,
		primaryButtonText,
		primaryButtonDisabled,
		shouldSubmitOnEnter,
		secondaryButtonText,
		preventCloseOnClickOutside,
		id,
		modalBodyId,
		buttonRef,
		innerModal,
		didClickInnerModal,
		alertDialogProps,
		modalLabelId,
		modalHeadingId,
		ariaLabel,
		dispatch,
		$$restProps,
		alert,
		modalAriaLabel,
		selectorPrimaryFocus,
		slots,
		keydown_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		button_binding,
		click_handler_1,
		button_binding_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		div2_binding,
		click_handler_5,
		div3_binding,
		keydown_handler_1,
		click_handler_6,
		transitionend_handler,
		$$scope
	];
}

class Modal extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1D,
			create_fragment$1D,
			safe_not_equal,
			{
				size: 2,
				open: 0,
				danger: 3,
				alert: 26,
				passiveModal: 4,
				modalHeading: 5,
				modalLabel: 6,
				modalAriaLabel: 27,
				iconDescription: 7,
				hasForm: 8,
				hasScrollingContent: 9,
				primaryButtonText: 10,
				primaryButtonDisabled: 11,
				shouldSubmitOnEnter: 12,
				secondaryButtonText: 13,
				selectorPrimaryFocus: 28,
				preventCloseOnClickOutside: 14,
				id: 15,
				ref: 1
			},
			[-1, -1]
		);
	}
}

/* src/Notification/NotificationButton.svelte generated by Svelte v3.32.1 */

function create_fragment$1E(ctx) {
	let button;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*icon*/ ctx[1];

	function switch_props(ctx) {
		return {
			props: {
				title: /*title*/ ctx[2],
				class: "bx--" + /*notificationType*/ ctx[0] + "-notification__close-icon"
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [
		{ type: "button" },
		{ "aria-label": /*iconDescription*/ ctx[3] },
		{ title: /*iconDescription*/ ctx[3] },
		/*$$restProps*/ ctx[4]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
			toggle_class(button, "bx--toast-notification__close-button", /*notificationType*/ ctx[0] === "toast");
			toggle_class(button, "bx--inline-notification__close-button", /*notificationType*/ ctx[0] === "inline");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[5]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*title*/ 4) switch_instance_changes.title = /*title*/ ctx[2];
			if (dirty & /*notificationType*/ 1) switch_instance_changes.class = "bx--" + /*notificationType*/ ctx[0] + "-notification__close-icon";

			if (switch_value !== (switch_value = /*icon*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*iconDescription*/ 8) && { "aria-label": /*iconDescription*/ ctx[3] },
				(!current || dirty & /*iconDescription*/ 8) && { title: /*iconDescription*/ ctx[3] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(button, "bx--toast-notification__close-button", /*notificationType*/ ctx[0] === "toast");
			toggle_class(button, "bx--inline-notification__close-button", /*notificationType*/ ctx[0] === "inline");
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (switch_instance) destroy_component(switch_instance);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1E($$self, $$props, $$invalidate) {
	const omit_props_names = ["notificationType","icon","title","iconDescription"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { notificationType = "toast" } = $$props;
	let { icon = Close20 } = $$props;
	let { title = undefined } = $$props;
	let { iconDescription = "Close icon" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("notificationType" in $$new_props) $$invalidate(0, notificationType = $$new_props.notificationType);
		if ("icon" in $$new_props) $$invalidate(1, icon = $$new_props.icon);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("iconDescription" in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
	};

	return [
		notificationType,
		icon,
		title,
		iconDescription,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class NotificationButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1E, create_fragment$1E, safe_not_equal, {
			notificationType: 0,
			icon: 1,
			title: 2,
			iconDescription: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/CheckmarkFilled20/CheckmarkFilled20.svelte generated by Svelte v3.32.1 */

function create_if_block$Z(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$r(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$Z(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$Z(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1F(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$r(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "CheckmarkFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M10,1c-4.9,0-9,4.1-9,9s4.1,9,9,9s9-4,9-9S15,1,10,1z M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
			attr(path1, "fill", "none");
			attr(path1, "d", "M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "CheckmarkFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1F($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class CheckmarkFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1F, create_fragment$1F, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/ErrorFilled20/ErrorFilled20.svelte generated by Svelte v3.32.1 */

function create_if_block$_(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$s(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$_(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$_(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1G(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$s(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ErrorFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
			attr(path1, "d", "M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ErrorFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1G($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ErrorFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1G, create_fragment$1G, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/InformationFilled20/InformationFilled20.svelte generated by Svelte v3.32.1 */

function create_if_block$$(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$t(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$$(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$$(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1H(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$t(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "InformationFilled20"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,13.875H17.125v-8H13v2.25h1.875v5.75H12v2.25h8Z");
			attr(path1, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,6a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,16.125H12v-2.25h2.875v-5.75H13v-2.25h4.125v8H20Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "InformationFilled20"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1H($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class InformationFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1H, create_fragment$1H, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/InformationSquareFilled20/InformationSquareFilled20.svelte generated by Svelte v3.32.1 */

function create_if_block$10(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$u(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$10(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$10(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1I(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$u(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "InformationSquareFilled20"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,13.875H17.125v-8H13v2.25h1.875v5.75H12v2.25h8Z");
			attr(path1, "d", "M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,16.125H12v-2.25h2.875v-5.75H13v-2.25h4.125v8H20Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "InformationSquareFilled20"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1I($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class InformationSquareFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1I, create_fragment$1I, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/WarningFilled20/WarningFilled20.svelte generated by Svelte v3.32.1 */

function create_if_block$11(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$v(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$11(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$11(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1J(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$v(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1\ts1,0.4,1,1S10.6,16,10,16z");
			attr(path1, "d", "M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1s1,0.4,1,1S10.6,16,10,16z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1J($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1J, create_fragment$1J, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/WarningAltFilled20/WarningAltFilled20.svelte generated by Svelte v3.32.1 */

function create_if_block$12(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$w(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$12(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$12(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1K(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$w(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningAltFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M14.875,11h2.25V21h-2.25ZM16,27a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,27Z");
			attr(path1, "d", "M29.8872,28.5386l-13-25a1,1,0,0,0-1.7744,0l-13,25A1,1,0,0,0,3,30H29a1,1,0,0,0,.8872-1.4614ZM14.875,11h2.25V21h-2.25ZM16,27a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,27Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningAltFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1K($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningAltFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1K, create_fragment$1K, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/Notification/NotificationIcon.svelte generated by Svelte v3.32.1 */

function create_fragment$1L(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icons*/ ctx[3][/*kind*/ ctx[0]];

	function switch_props(ctx) {
		return {
			props: {
				title: /*iconDescription*/ ctx[2],
				class: "bx--" + /*notificationType*/ ctx[1] + "-notification__icon"
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*iconDescription*/ 4) switch_instance_changes.title = /*iconDescription*/ ctx[2];
			if (dirty & /*notificationType*/ 2) switch_instance_changes.class = "bx--" + /*notificationType*/ ctx[1] + "-notification__icon";

			if (switch_value !== (switch_value = /*icons*/ ctx[3][/*kind*/ ctx[0]])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function instance$1L($$self, $$props, $$invalidate) {
	let { kind = "error" } = $$props;
	let { notificationType = "toast" } = $$props;
	let { iconDescription = "Closes notification" } = $$props;

	const icons = {
		error: ErrorFilled20,
		"info-square": InformationSquareFilled20,
		info: InformationFilled20,
		success: CheckmarkFilled20,
		warning: WarningFilled20,
		"warning-alt": WarningAltFilled20
	};

	$$self.$$set = $$props => {
		if ("kind" in $$props) $$invalidate(0, kind = $$props.kind);
		if ("notificationType" in $$props) $$invalidate(1, notificationType = $$props.notificationType);
		if ("iconDescription" in $$props) $$invalidate(2, iconDescription = $$props.iconDescription);
	};

	return [kind, notificationType, iconDescription, icons];
}

class NotificationIcon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1L, create_fragment$1L, safe_not_equal, {
			kind: 0,
			notificationType: 1,
			iconDescription: 2
		});
	}
}

/* src/Notification/NotificationTextDetails.svelte generated by Svelte v3.32.1 */

function create_if_block_1$k(ctx) {
	let div2;
	let h3;
	let t0;
	let t1;
	let div0;
	let t2;
	let t3;
	let div1;
	let t4;
	let t5;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			div2 = element("div");
			h3 = element("h3");
			t0 = text(/*title*/ ctx[1]);
			t1 = space();
			div0 = element("div");
			t2 = text(/*subtitle*/ ctx[2]);
			t3 = space();
			div1 = element("div");
			t4 = text(/*caption*/ ctx[3]);
			t5 = space();
			if (default_slot) default_slot.c();
			toggle_class(h3, "bx--toast-notification__title", true);
			toggle_class(div0, "bx--toast-notification__subtitle", true);
			toggle_class(div1, "bx--toast-notification__caption", true);
			toggle_class(div2, "bx--toast-notification__details", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, h3);
			append(h3, t0);
			append(div2, t1);
			append(div2, div0);
			append(div0, t2);
			append(div2, t3);
			append(div2, div1);
			append(div1, t4);
			append(div2, t5);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*title*/ 2) set_data(t0, /*title*/ ctx[1]);
			if (!current || dirty & /*subtitle*/ 4) set_data(t2, /*subtitle*/ ctx[2]);
			if (!current || dirty & /*caption*/ 8) set_data(t4, /*caption*/ ctx[3]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (27:0) {#if notificationType === "inline"}
function create_if_block$13(ctx) {
	let div1;
	let p;
	let t0;
	let t1;
	let div0;
	let t2;
	let t3;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			div1 = element("div");
			p = element("p");
			t0 = text(/*title*/ ctx[1]);
			t1 = space();
			div0 = element("div");
			t2 = text(/*subtitle*/ ctx[2]);
			t3 = space();
			if (default_slot) default_slot.c();
			toggle_class(p, "bx--inline-notification__title", true);
			toggle_class(div0, "bx--inline-notification__subtitle", true);
			toggle_class(div1, "bx--inline-notification__text-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, p);
			append(p, t0);
			append(div1, t1);
			append(div1, div0);
			append(div0, t2);
			append(div1, t3);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*title*/ 2) set_data(t0, /*title*/ ctx[1]);
			if (!current || dirty & /*subtitle*/ 4) set_data(t2, /*subtitle*/ ctx[2]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1M(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = /*notificationType*/ ctx[0] === "toast" && create_if_block_1$k(ctx);
	let if_block1 = /*notificationType*/ ctx[0] === "inline" && create_if_block$13(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*notificationType*/ ctx[0] === "toast") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*notificationType*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$k(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*notificationType*/ ctx[0] === "inline") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*notificationType*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$13(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

function instance$1M($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { notificationType = "toast" } = $$props;
	let { title = "Title" } = $$props;
	let { subtitle = "" } = $$props;
	let { caption = "Caption" } = $$props;

	$$self.$$set = $$props => {
		if ("notificationType" in $$props) $$invalidate(0, notificationType = $$props.notificationType);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
		if ("subtitle" in $$props) $$invalidate(2, subtitle = $$props.subtitle);
		if ("caption" in $$props) $$invalidate(3, caption = $$props.caption);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [notificationType, title, subtitle, caption, $$scope, slots];
}

class NotificationTextDetails extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1M, create_fragment$1M, safe_not_equal, {
			notificationType: 0,
			title: 1,
			subtitle: 2,
			caption: 3
		});
	}
}

/* src/Notification/ToastNotification.svelte generated by Svelte v3.32.1 */

function create_if_block$14(ctx) {
	let div;
	let notificationicon;
	let t0;
	let notificationtextdetails;
	let t1;
	let current;
	let mounted;
	let dispose;

	notificationicon = new NotificationIcon({
			props: {
				kind: /*kind*/ ctx[0],
				iconDescription: /*iconDescription*/ ctx[6]
			}
		});

	notificationtextdetails = new NotificationTextDetails({
			props: {
				title: /*title*/ ctx[3],
				subtitle: /*subtitle*/ ctx[4],
				caption: /*caption*/ ctx[5],
				$$slots: { default: [create_default_slot$g] },
				$$scope: { ctx }
			}
		});

	let if_block = !/*hideCloseButton*/ ctx[7] && create_if_block_1$l(ctx);
	let div_levels = [{ role: /*role*/ ctx[2] }, { kind: /*kind*/ ctx[0] }, /*$$restProps*/ ctx[10]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			create_component(notificationicon.$$.fragment);
			t0 = space();
			create_component(notificationtextdetails.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--toast-notification", true);
			toggle_class(div, "bx--toast-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div, "bx--toast-notification--error", /*kind*/ ctx[0] === "error");
			toggle_class(div, "bx--toast-notification--info", /*kind*/ ctx[0] === "info");
			toggle_class(div, "bx--toast-notification--info-square", /*kind*/ ctx[0] === "info-square");
			toggle_class(div, "bx--toast-notification--success", /*kind*/ ctx[0] === "success");
			toggle_class(div, "bx--toast-notification--warning", /*kind*/ ctx[0] === "warning");
			toggle_class(div, "bx--toast-notification--warning-alt", /*kind*/ ctx[0] === "warning-alt");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(notificationicon, div, null);
			append(div, t0);
			mount_component(notificationtextdetails, div, null);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[13]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const notificationicon_changes = {};
			if (dirty & /*kind*/ 1) notificationicon_changes.kind = /*kind*/ ctx[0];
			if (dirty & /*iconDescription*/ 64) notificationicon_changes.iconDescription = /*iconDescription*/ ctx[6];
			notificationicon.$set(notificationicon_changes);
			const notificationtextdetails_changes = {};
			if (dirty & /*title*/ 8) notificationtextdetails_changes.title = /*title*/ ctx[3];
			if (dirty & /*subtitle*/ 16) notificationtextdetails_changes.subtitle = /*subtitle*/ ctx[4];
			if (dirty & /*caption*/ 32) notificationtextdetails_changes.caption = /*caption*/ ctx[5];

			if (dirty & /*$$scope*/ 131072) {
				notificationtextdetails_changes.$$scope = { dirty, ctx };
			}

			notificationtextdetails.$set(notificationtextdetails_changes);

			if (!/*hideCloseButton*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*hideCloseButton*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$l(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*role*/ 4) && { role: /*role*/ ctx[2] },
				(!current || dirty & /*kind*/ 1) && { kind: /*kind*/ ctx[0] },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(div, "bx--toast-notification", true);
			toggle_class(div, "bx--toast-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div, "bx--toast-notification--error", /*kind*/ ctx[0] === "error");
			toggle_class(div, "bx--toast-notification--info", /*kind*/ ctx[0] === "info");
			toggle_class(div, "bx--toast-notification--info-square", /*kind*/ ctx[0] === "info-square");
			toggle_class(div, "bx--toast-notification--success", /*kind*/ ctx[0] === "success");
			toggle_class(div, "bx--toast-notification--warning", /*kind*/ ctx[0] === "warning");
			toggle_class(div, "bx--toast-notification--warning-alt", /*kind*/ ctx[0] === "warning-alt");
		},
		i(local) {
			if (current) return;
			transition_in(notificationicon.$$.fragment, local);
			transition_in(notificationtextdetails.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(notificationicon.$$.fragment, local);
			transition_out(notificationtextdetails.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(notificationicon);
			destroy_component(notificationtextdetails);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (81:4) <NotificationTextDetails       title="{title}"       subtitle="{subtitle}"       caption="{caption}"     >
function create_default_slot$g(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 131072) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[17], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (88:4) {#if !hideCloseButton}
function create_if_block_1$l(ctx) {
	let notificationbutton;
	let current;

	notificationbutton = new NotificationButton({
			props: {
				iconDescription: /*iconDescription*/ ctx[6]
			}
		});

	notificationbutton.$on("click", /*close*/ ctx[9]);

	return {
		c() {
			create_component(notificationbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(notificationbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const notificationbutton_changes = {};
			if (dirty & /*iconDescription*/ 64) notificationbutton_changes.iconDescription = /*iconDescription*/ ctx[6];
			notificationbutton.$set(notificationbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(notificationbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(notificationbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(notificationbutton, detaching);
		}
	};
}

function create_fragment$1N(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*open*/ ctx[8] && create_if_block$14(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$14(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1N($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"kind","lowContrast","timeout","role","title","subtitle","caption","iconDescription","hideCloseButton"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { kind = "error" } = $$props;
	let { lowContrast = false } = $$props;
	let { timeout = 0 } = $$props;
	let { role = "alert" } = $$props;
	let { title = "" } = $$props;
	let { subtitle = "" } = $$props;
	let { caption = "" } = $$props;
	let { iconDescription = "Closes notification" } = $$props;
	let { hideCloseButton = false } = $$props;
	const dispatch = createEventDispatcher();
	let open = true;
	let timeoutId = undefined;

	function close(closeFromTimeout) {
		$$invalidate(8, open = false);
		dispatch("close", { timeout: closeFromTimeout === true });
	}

	onMount(() => {
		if (timeout) {
			timeoutId = setTimeout(() => close(true), timeout);
		}

		return () => {
			clearTimeout(timeoutId);
		};
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("kind" in $$new_props) $$invalidate(0, kind = $$new_props.kind);
		if ("lowContrast" in $$new_props) $$invalidate(1, lowContrast = $$new_props.lowContrast);
		if ("timeout" in $$new_props) $$invalidate(11, timeout = $$new_props.timeout);
		if ("role" in $$new_props) $$invalidate(2, role = $$new_props.role);
		if ("title" in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ("subtitle" in $$new_props) $$invalidate(4, subtitle = $$new_props.subtitle);
		if ("caption" in $$new_props) $$invalidate(5, caption = $$new_props.caption);
		if ("iconDescription" in $$new_props) $$invalidate(6, iconDescription = $$new_props.iconDescription);
		if ("hideCloseButton" in $$new_props) $$invalidate(7, hideCloseButton = $$new_props.hideCloseButton);
		if ("$$scope" in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
	};

	return [
		kind,
		lowContrast,
		role,
		title,
		subtitle,
		caption,
		iconDescription,
		hideCloseButton,
		open,
		close,
		$$restProps,
		timeout,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class ToastNotification extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1N, create_fragment$1N, safe_not_equal, {
			kind: 0,
			lowContrast: 1,
			timeout: 11,
			role: 2,
			title: 3,
			subtitle: 4,
			caption: 5,
			iconDescription: 6,
			hideCloseButton: 7
		});
	}
}

/* src/Notification/InlineNotification.svelte generated by Svelte v3.32.1 */
const get_actions_slot_changes = dirty => ({});
const get_actions_slot_context = ctx => ({});

// (59:0) {#if open}
function create_if_block$15(ctx) {
	let div1;
	let div0;
	let notificationicon;
	let t0;
	let notificationtextdetails;
	let t1;
	let t2;
	let current;
	let mounted;
	let dispose;

	notificationicon = new NotificationIcon({
			props: {
				notificationType: "inline",
				kind: /*kind*/ ctx[0],
				iconDescription: /*iconDescription*/ ctx[6]
			}
		});

	notificationtextdetails = new NotificationTextDetails({
			props: {
				title: /*title*/ ctx[3],
				subtitle: /*subtitle*/ ctx[4],
				notificationType: "inline",
				$$slots: { default: [create_default_slot$h] },
				$$scope: { ctx }
			}
		});

	const actions_slot_template = /*#slots*/ ctx[11].actions;
	const actions_slot = create_slot(actions_slot_template, ctx, /*$$scope*/ ctx[16], get_actions_slot_context);
	let if_block = !/*hideCloseButton*/ ctx[5] && create_if_block_1$m(ctx);
	let div1_levels = [{ role: /*role*/ ctx[2] }, { kind: /*kind*/ ctx[0] }, /*$$restProps*/ ctx[9]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(notificationicon.$$.fragment);
			t0 = space();
			create_component(notificationtextdetails.$$.fragment);
			t1 = space();
			if (actions_slot) actions_slot.c();
			t2 = space();
			if (if_block) if_block.c();
			toggle_class(div0, "bx--inline-notification__details", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--inline-notification", true);
			toggle_class(div1, "bx--inline-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div1, "bx--inline-notification--hide-close-button", /*hideCloseButton*/ ctx[5]);
			toggle_class(div1, "bx--inline-notification--error", /*kind*/ ctx[0] === "error");
			toggle_class(div1, "bx--inline-notification--info", /*kind*/ ctx[0] === "info");
			toggle_class(div1, "bx--inline-notification--info-square", /*kind*/ ctx[0] === "info-square");
			toggle_class(div1, "bx--inline-notification--success", /*kind*/ ctx[0] === "success");
			toggle_class(div1, "bx--inline-notification--warning", /*kind*/ ctx[0] === "warning");
			toggle_class(div1, "bx--inline-notification--warning-alt", /*kind*/ ctx[0] === "warning-alt");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(notificationicon, div0, null);
			append(div0, t0);
			mount_component(notificationtextdetails, div0, null);
			append(div1, t1);

			if (actions_slot) {
				actions_slot.m(div1, null);
			}

			append(div1, t2);
			if (if_block) if_block.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[12]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const notificationicon_changes = {};
			if (dirty & /*kind*/ 1) notificationicon_changes.kind = /*kind*/ ctx[0];
			if (dirty & /*iconDescription*/ 64) notificationicon_changes.iconDescription = /*iconDescription*/ ctx[6];
			notificationicon.$set(notificationicon_changes);
			const notificationtextdetails_changes = {};
			if (dirty & /*title*/ 8) notificationtextdetails_changes.title = /*title*/ ctx[3];
			if (dirty & /*subtitle*/ 16) notificationtextdetails_changes.subtitle = /*subtitle*/ ctx[4];

			if (dirty & /*$$scope*/ 65536) {
				notificationtextdetails_changes.$$scope = { dirty, ctx };
			}

			notificationtextdetails.$set(notificationtextdetails_changes);

			if (actions_slot) {
				if (actions_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(actions_slot, actions_slot_template, ctx, /*$$scope*/ ctx[16], dirty, get_actions_slot_changes, get_actions_slot_context);
				}
			}

			if (!/*hideCloseButton*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*hideCloseButton*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$m(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				(!current || dirty & /*role*/ 4) && { role: /*role*/ ctx[2] },
				(!current || dirty & /*kind*/ 1) && { kind: /*kind*/ ctx[0] },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(div1, "bx--inline-notification", true);
			toggle_class(div1, "bx--inline-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div1, "bx--inline-notification--hide-close-button", /*hideCloseButton*/ ctx[5]);
			toggle_class(div1, "bx--inline-notification--error", /*kind*/ ctx[0] === "error");
			toggle_class(div1, "bx--inline-notification--info", /*kind*/ ctx[0] === "info");
			toggle_class(div1, "bx--inline-notification--info-square", /*kind*/ ctx[0] === "info-square");
			toggle_class(div1, "bx--inline-notification--success", /*kind*/ ctx[0] === "success");
			toggle_class(div1, "bx--inline-notification--warning", /*kind*/ ctx[0] === "warning");
			toggle_class(div1, "bx--inline-notification--warning-alt", /*kind*/ ctx[0] === "warning-alt");
		},
		i(local) {
			if (current) return;
			transition_in(notificationicon.$$.fragment, local);
			transition_in(notificationtextdetails.$$.fragment, local);
			transition_in(actions_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(notificationicon.$$.fragment, local);
			transition_out(notificationtextdetails.$$.fragment, local);
			transition_out(actions_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(notificationicon);
			destroy_component(notificationtextdetails);
			if (actions_slot) actions_slot.d(detaching);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (84:6) <NotificationTextDetails         title="{title}"         subtitle="{subtitle}"         notificationType="inline"       >
function create_default_slot$h(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (93:4) {#if !hideCloseButton}
function create_if_block_1$m(ctx) {
	let notificationbutton;
	let current;

	notificationbutton = new NotificationButton({
			props: {
				iconDescription: /*iconDescription*/ ctx[6],
				notificationType: "inline"
			}
		});

	notificationbutton.$on("click", /*close*/ ctx[8]);

	return {
		c() {
			create_component(notificationbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(notificationbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const notificationbutton_changes = {};
			if (dirty & /*iconDescription*/ 64) notificationbutton_changes.iconDescription = /*iconDescription*/ ctx[6];
			notificationbutton.$set(notificationbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(notificationbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(notificationbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(notificationbutton, detaching);
		}
	};
}

function create_fragment$1O(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*open*/ ctx[7] && create_if_block$15(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$15(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1O($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"kind","lowContrast","timeout","role","title","subtitle","hideCloseButton","iconDescription"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { kind = "error" } = $$props;
	let { lowContrast = false } = $$props;
	let { timeout = 0 } = $$props;
	let { role = "alert" } = $$props;
	let { title = "" } = $$props;
	let { subtitle = "" } = $$props;
	let { hideCloseButton = false } = $$props;
	let { iconDescription = "Closes notification" } = $$props;
	const dispatch = createEventDispatcher();
	let open = true;
	let timeoutId = undefined;

	function close(closeFromTimeout) {
		$$invalidate(7, open = false);
		dispatch("close", { timeout: closeFromTimeout === true });
	}

	onMount(() => {
		if (timeout) {
			timeoutId = setTimeout(() => close(true), timeout);
		}

		return () => {
			clearTimeout(timeoutId);
		};
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("kind" in $$new_props) $$invalidate(0, kind = $$new_props.kind);
		if ("lowContrast" in $$new_props) $$invalidate(1, lowContrast = $$new_props.lowContrast);
		if ("timeout" in $$new_props) $$invalidate(10, timeout = $$new_props.timeout);
		if ("role" in $$new_props) $$invalidate(2, role = $$new_props.role);
		if ("title" in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ("subtitle" in $$new_props) $$invalidate(4, subtitle = $$new_props.subtitle);
		if ("hideCloseButton" in $$new_props) $$invalidate(5, hideCloseButton = $$new_props.hideCloseButton);
		if ("iconDescription" in $$new_props) $$invalidate(6, iconDescription = $$new_props.iconDescription);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	return [
		kind,
		lowContrast,
		role,
		title,
		subtitle,
		hideCloseButton,
		iconDescription,
		open,
		close,
		$$restProps,
		timeout,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class InlineNotification extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1O, create_fragment$1O, safe_not_equal, {
			kind: 0,
			lowContrast: 1,
			timeout: 10,
			role: 2,
			title: 3,
			subtitle: 4,
			hideCloseButton: 5,
			iconDescription: 6
		});
	}
}

/* src/Notification/NotificationActionButton.svelte generated by Svelte v3.32.1 */

function create_default_slot$i(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1P(ctx) {
	let button;
	let current;

	const button_spread_levels = [
		{ kind: "ghost" },
		{ size: "small" },
		/*$$restProps*/ ctx[0],
		{
			class: "bx--inline-notification__action-button " + /*$$restProps*/ ctx[0].class
		}
	];

	let button_props = {
		$$slots: { default: [create_default_slot$i] },
		$$scope: { ctx }
	};

	for (let i = 0; i < button_spread_levels.length; i += 1) {
		button_props = assign(button_props, button_spread_levels[i]);
	}

	button = new Button({ props: button_props });
	button.$on("click", /*click_handler*/ ctx[2]);
	button.$on("mouseover", /*mouseover_handler*/ ctx[3]);
	button.$on("mouseenter", /*mouseenter_handler*/ ctx[4]);
	button.$on("mouseleave", /*mouseleave_handler*/ ctx[5]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const button_changes = (dirty & /*$$restProps*/ 1)
			? get_spread_update(button_spread_levels, [
					button_spread_levels[0],
					button_spread_levels[1],
					get_spread_object(/*$$restProps*/ ctx[0]),
					{
						class: "bx--inline-notification__action-button " + /*$$restProps*/ ctx[0].class
					}
				])
			: {};

			if (dirty & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

function instance$1P($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class NotificationActionButton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1P, create_fragment$1P, safe_not_equal, {});
	}
}

/* node_modules/carbon-icons-svelte/lib/Add16/Add16.svelte generated by Svelte v3.32.1 */

function create_if_block$16(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$x(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$16(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$16(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1Q(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$x(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Add16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Add16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1Q($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Add16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1Q, create_fragment$1Q, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/Subtract16/Subtract16.svelte generated by Svelte v3.32.1 */

function create_if_block$17(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$y(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$17(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$17(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1R(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$y(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Subtract16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M8 15H24V17H8z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Subtract16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1R($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Subtract16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1R, create_fragment$1R, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/NumberInput/NumberInput.svelte generated by Svelte v3.32.1 */
const get_label_slot_changes_1 = dirty => ({});
const get_label_slot_context_1 = ctx => ({});
const get_label_slot_changes$1 = dirty => ({});
const get_label_slot_context$1 = ctx => ({});

// (227:4) {:else}
function create_else_block$n(ctx) {
	let t0;
	let div3;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_aria_label_value;
	let t1;
	let t2;
	let t3;
	let div2;
	let button0;
	let subtract16;
	let button0_title_value;
	let button0_aria_label_value;
	let t4;
	let div0;
	let t5;
	let button1;
	let add16;
	let button1_title_value;
	let button1_aria_label_value;
	let t6;
	let div1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*label*/ ctx[16] && create_if_block_7$2(ctx);

	let input_levels = [
		{ type: "number" },
		{ pattern: "[0-9]*" },
		{ "aria-describedby": /*errorId*/ ctx[24] },
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{
			"aria-invalid": input_aria_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{
			"aria-label": input_aria_label_value = /*label*/ ctx[16] ? undefined : /*ariaLabel*/ ctx[25]
		},
		{ disabled: /*disabled*/ ctx[9] },
		{ id: /*id*/ ctx[18] },
		{ name: /*name*/ ctx[19] },
		{ max: /*max*/ ctx[4] },
		{ min: /*min*/ ctx[5] },
		{ step: /*step*/ ctx[3] },
		{ value: /*value*/ ctx[0] },
		{ readOnly: /*readonly*/ ctx[7] },
		/*$$restProps*/ ctx[27]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block1 = /*invalid*/ ctx[11] && create_if_block_6$4();
	let if_block2 = !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block_5$6();
	subtract16 = new Subtract16({ props: { class: "down-icon" } });
	add16 = new Add16({ props: { class: "up-icon" } });

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div3 = element("div");
			input = element("input");
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			div2 = element("div");
			button0 = element("button");
			create_component(subtract16.$$.fragment);
			t4 = space();
			div0 = element("div");
			t5 = space();
			button1 = element("button");
			create_component(add16.$$.fragment);
			t6 = space();
			div1 = element("div");
			set_attributes(input, input_data);
			attr(button0, "type", "button");
			attr(button0, "tabindex", "-1");
			attr(button0, "title", button0_title_value = /*decrementLabel*/ ctx[22] || /*iconDescription*/ ctx[10]);
			attr(button0, "aria-label", button0_aria_label_value = /*decrementLabel*/ ctx[22] || /*iconDescription*/ ctx[10]);
			button0.disabled = /*disabled*/ ctx[9];
			toggle_class(button0, "bx--number__control-btn", true);
			toggle_class(button0, "down-icon", true);
			toggle_class(div0, "bx--number__rule-divider", true);
			attr(button1, "type", "button");
			attr(button1, "tabindex", "-1");
			attr(button1, "title", button1_title_value = /*incrementLabel*/ ctx[21] || /*iconDescription*/ ctx[10]);
			attr(button1, "aria-label", button1_aria_label_value = /*incrementLabel*/ ctx[21] || /*iconDescription*/ ctx[10]);
			button1.disabled = /*disabled*/ ctx[9];
			toggle_class(button1, "bx--number__control-btn", true);
			toggle_class(button1, "up-icon", true);
			toggle_class(div1, "bx--number__rule-divider", true);
			toggle_class(div2, "bx--number__controls", true);
			toggle_class(div3, "bx--number__input-wrapper", true);
			toggle_class(div3, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div3, anchor);
			append(div3, input);
			/*input_binding_1*/ ctx[43](input);
			append(div3, t1);
			if (if_block1) if_block1.m(div3, null);
			append(div3, t2);
			if (if_block2) if_block2.m(div3, null);
			append(div3, t3);
			append(div3, div2);
			append(div2, button0);
			mount_component(subtract16, button0, null);
			append(div2, t4);
			append(div2, div0);
			append(div2, t5);
			append(div2, button1);
			mount_component(add16, button1, null);
			append(div2, t6);
			append(div2, div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_handler_1*/ ctx[38]),
					listen(input, "input", /*input_handler_3*/ ctx[44]),
					listen(button0, "click", /*click_handler_3*/ ctx[45]),
					listen(button1, "click", /*click_handler_4*/ ctx[46])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*label*/ ctx[16]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*label*/ 65536) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_7$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "number" },
				{ pattern: "[0-9]*" },
				(!current || dirty[0] & /*errorId*/ 16777216) && { "aria-describedby": /*errorId*/ ctx[24] },
				(!current || dirty[0] & /*invalid*/ 2048 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*invalid*/ 2048 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "aria-invalid": input_aria_invalid_value },
				(!current || dirty[0] & /*label, ariaLabel*/ 33619968 && input_aria_label_value !== (input_aria_label_value = /*label*/ ctx[16] ? undefined : /*ariaLabel*/ ctx[25])) && { "aria-label": input_aria_label_value },
				(!current || dirty[0] & /*disabled*/ 512) && { disabled: /*disabled*/ ctx[9] },
				(!current || dirty[0] & /*id*/ 262144) && { id: /*id*/ ctx[18] },
				(!current || dirty[0] & /*name*/ 524288) && { name: /*name*/ ctx[19] },
				(!current || dirty[0] & /*max*/ 16) && { max: /*max*/ ctx[4] },
				(!current || dirty[0] & /*min*/ 32) && { min: /*min*/ ctx[5] },
				(!current || dirty[0] & /*step*/ 8) && { step: /*step*/ ctx[3] },
				(!current || dirty[0] & /*value*/ 1) && { value: /*value*/ ctx[0] },
				(!current || dirty[0] & /*readonly*/ 128) && { readOnly: /*readonly*/ ctx[7] },
				dirty[0] & /*$$restProps*/ 134217728 && /*$$restProps*/ ctx[27]
			]));

			if (/*invalid*/ ctx[11]) {
				if (if_block1) {
					if (dirty[0] & /*invalid*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_6$4();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div3, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block2) {
					if (dirty[0] & /*invalid, warn*/ 10240) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_5$6();
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div3, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*decrementLabel, iconDescription*/ 4195328 && button0_title_value !== (button0_title_value = /*decrementLabel*/ ctx[22] || /*iconDescription*/ ctx[10])) {
				attr(button0, "title", button0_title_value);
			}

			if (!current || dirty[0] & /*decrementLabel, iconDescription*/ 4195328 && button0_aria_label_value !== (button0_aria_label_value = /*decrementLabel*/ ctx[22] || /*iconDescription*/ ctx[10])) {
				attr(button0, "aria-label", button0_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				button0.disabled = /*disabled*/ ctx[9];
			}

			if (!current || dirty[0] & /*incrementLabel, iconDescription*/ 2098176 && button1_title_value !== (button1_title_value = /*incrementLabel*/ ctx[21] || /*iconDescription*/ ctx[10])) {
				attr(button1, "title", button1_title_value);
			}

			if (!current || dirty[0] & /*incrementLabel, iconDescription*/ 2098176 && button1_aria_label_value !== (button1_aria_label_value = /*incrementLabel*/ ctx[21] || /*iconDescription*/ ctx[10])) {
				attr(button1, "aria-label", button1_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				button1.disabled = /*disabled*/ ctx[9];
			}

			if (dirty[0] & /*invalid, warn*/ 10240) {
				toggle_class(div3, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(subtract16.$$.fragment, local);
			transition_in(add16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(subtract16.$$.fragment, local);
			transition_out(add16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div3);
			/*input_binding_1*/ ctx[43](null);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			destroy_component(subtract16);
			destroy_component(add16);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (162:4) {#if mobile}
function create_if_block_3$b(ctx) {
	let t0;
	let div;
	let button0;
	let subtract16;
	let button0_aria_label_value;
	let t1;
	let input;
	let input_aria_label_value;
	let t2;
	let button1;
	let add16;
	let button1_aria_label_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*label*/ ctx[16] && create_if_block_4$9(ctx);
	subtract16 = new Subtract16({ props: { class: "down-icon" } });

	let input_levels = [
		{ type: "number" },
		{ pattern: "[0-9]*" },
		{
			"aria-label": input_aria_label_value = /*label*/ ctx[16] ? undefined : /*ariaLabel*/ ctx[25]
		},
		{ disabled: /*disabled*/ ctx[9] },
		{ id: /*id*/ ctx[18] },
		{ name: /*name*/ ctx[19] },
		{ max: /*max*/ ctx[4] },
		{ min: /*min*/ ctx[5] },
		{ step: /*step*/ ctx[3] },
		{ value: /*value*/ ctx[0] },
		{ readOnly: /*readonly*/ ctx[7] },
		/*$$restProps*/ ctx[27]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	add16 = new Add16({ props: { class: "up-icon" } });

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			div = element("div");
			button0 = element("button");
			create_component(subtract16.$$.fragment);
			t1 = space();
			input = element("input");
			t2 = space();
			button1 = element("button");
			create_component(add16.$$.fragment);
			attr(button0, "type", "button");
			attr(button0, "aria-live", "polite");
			attr(button0, "aria-atomic", "true");
			attr(button0, "title", /*decrementLabel*/ ctx[22]);
			attr(button0, "aria-label", button0_aria_label_value = /*decrementLabel*/ ctx[22] || /*iconDescription*/ ctx[10]);
			button0.disabled = /*disabled*/ ctx[9];
			toggle_class(button0, "bx--number__control-btn", true);
			toggle_class(button0, "down-icon", true);
			set_attributes(input, input_data);
			attr(button1, "type", "button");
			attr(button1, "aria-live", "polite");
			attr(button1, "aria-atomic", "true");
			attr(button1, "title", /*incrementLabel*/ ctx[21]);
			attr(button1, "aria-label", button1_aria_label_value = /*incrementLabel*/ ctx[21] || /*iconDescription*/ ctx[10]);
			button1.disabled = /*disabled*/ ctx[9];
			toggle_class(button1, "bx--number__control-btn", true);
			toggle_class(button1, "up-icon", true);
			toggle_class(div, "bx--number__input-wrapper", true);
			toggle_class(div, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, button0);
			mount_component(subtract16, button0, null);
			append(div, t1);
			append(div, input);
			/*input_binding*/ ctx[40](input);
			append(div, t2);
			append(div, button1);
			mount_component(add16, button1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler_1*/ ctx[39]),
					listen(input, "input", /*input_handler*/ ctx[37]),
					listen(input, "input", /*input_handler_2*/ ctx[41]),
					listen(button1, "click", /*click_handler_2*/ ctx[42])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*label*/ ctx[16]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*label*/ 65536) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_4$9(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*decrementLabel*/ 4194304) {
				attr(button0, "title", /*decrementLabel*/ ctx[22]);
			}

			if (!current || dirty[0] & /*decrementLabel, iconDescription*/ 4195328 && button0_aria_label_value !== (button0_aria_label_value = /*decrementLabel*/ ctx[22] || /*iconDescription*/ ctx[10])) {
				attr(button0, "aria-label", button0_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				button0.disabled = /*disabled*/ ctx[9];
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "number" },
				{ pattern: "[0-9]*" },
				(!current || dirty[0] & /*label, ariaLabel*/ 33619968 && input_aria_label_value !== (input_aria_label_value = /*label*/ ctx[16] ? undefined : /*ariaLabel*/ ctx[25])) && { "aria-label": input_aria_label_value },
				(!current || dirty[0] & /*disabled*/ 512) && { disabled: /*disabled*/ ctx[9] },
				(!current || dirty[0] & /*id*/ 262144) && { id: /*id*/ ctx[18] },
				(!current || dirty[0] & /*name*/ 524288) && { name: /*name*/ ctx[19] },
				(!current || dirty[0] & /*max*/ 16) && { max: /*max*/ ctx[4] },
				(!current || dirty[0] & /*min*/ 32) && { min: /*min*/ ctx[5] },
				(!current || dirty[0] & /*step*/ 8) && { step: /*step*/ ctx[3] },
				(!current || dirty[0] & /*value*/ 1) && { value: /*value*/ ctx[0] },
				(!current || dirty[0] & /*readonly*/ 128) && { readOnly: /*readonly*/ ctx[7] },
				dirty[0] & /*$$restProps*/ 134217728 && /*$$restProps*/ ctx[27]
			]));

			if (!current || dirty[0] & /*incrementLabel*/ 2097152) {
				attr(button1, "title", /*incrementLabel*/ ctx[21]);
			}

			if (!current || dirty[0] & /*incrementLabel, iconDescription*/ 2098176 && button1_aria_label_value !== (button1_aria_label_value = /*incrementLabel*/ ctx[21] || /*iconDescription*/ ctx[10])) {
				attr(button1, "aria-label", button1_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				button1.disabled = /*disabled*/ ctx[9];
			}

			if (dirty[0] & /*invalid, warn*/ 10240) {
				toggle_class(div, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(subtract16.$$.fragment, local);
			transition_in(add16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(subtract16.$$.fragment, local);
			transition_out(add16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			destroy_component(subtract16);
			/*input_binding*/ ctx[40](null);
			destroy_component(add16);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (228:6) {#if label}
function create_if_block_7$2(ctx) {
	let label_1;
	let current;
	const label_slot_template = /*#slots*/ ctx[32].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[31], get_label_slot_context_1);
	const label_slot_or_fallback = label_slot || fallback_block_1$5(ctx);

	return {
		c() {
			label_1 = element("label");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr(label_1, "for", /*id*/ ctx[18]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(label_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && dirty[1] & /*$$scope*/ 1) {
					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[31], dirty, get_label_slot_changes_1, get_label_slot_context_1);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && dirty[0] & /*label*/ 65536) {
					label_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 262144) {
				attr(label_1, "for", /*id*/ ctx[18]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			}

			if (dirty[0] & /*hideLabel*/ 131072) {
				toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[17]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label_1);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};
}

// (235:29) {label}
function fallback_block_1$5(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*label*/ 65536) set_data(t, /*label*/ ctx[16]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (264:8) {#if invalid}
function create_if_block_6$4(ctx) {
	let warningfilled16;
	let current;
	warningfilled16 = new WarningFilled16({ props: { class: "bx--number__invalid" } });

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (267:8) {#if !invalid && warn}
function create_if_block_5$6(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--number__invalid bx--number__invalid--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (163:6) {#if label}
function create_if_block_4$9(ctx) {
	let label_1;
	let current;
	const label_slot_template = /*#slots*/ ctx[32].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[31], get_label_slot_context$1);
	const label_slot_or_fallback = label_slot || fallback_block$z(ctx);

	return {
		c() {
			label_1 = element("label");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr(label_1, "for", /*id*/ ctx[18]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(label_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && dirty[1] & /*$$scope*/ 1) {
					update_slot(label_slot, label_slot_template, ctx, /*$$scope*/ ctx[31], dirty, get_label_slot_changes$1, get_label_slot_context$1);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && dirty[0] & /*label*/ 65536) {
					label_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 262144) {
				attr(label_1, "for", /*id*/ ctx[18]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			}

			if (dirty[0] & /*hideLabel*/ 131072) {
				toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[17]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label_1);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};
}

// (170:29) {label}
function fallback_block$z(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*label*/ 65536) set_data(t, /*label*/ ctx[16]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (306:4) {#if !error && !warn && helperText}
function create_if_block_2$d(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[15]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 32768) set_data(t, /*helperText*/ ctx[15]);

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[9]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (314:4) {#if error}
function create_if_block_1$n(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[12]);
			attr(div, "id", /*errorId*/ ctx[24]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 4096) set_data(t, /*invalidText*/ ctx[12]);

			if (dirty[0] & /*errorId*/ 16777216) {
				attr(div, "id", /*errorId*/ ctx[24]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (319:4) {#if !error && warn}
function create_if_block$18(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[14]);
			attr(div, "id", /*errorId*/ ctx[24]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 16384) set_data(t, /*warnText*/ ctx[14]);

			if (dirty[0] & /*errorId*/ 16777216) {
				attr(div, "id", /*errorId*/ ctx[24]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1S(ctx) {
	let div1;
	let div0;
	let current_block_type_index;
	let if_block0;
	let t0;
	let t1;
	let t2;
	let div0_data_invalid_value;
	let div0_class_value;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_3$b, create_else_block$n];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*mobile*/ ctx[8]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = !/*error*/ ctx[23] && !/*warn*/ ctx[13] && /*helperText*/ ctx[15] && create_if_block_2$d(ctx);
	let if_block2 = /*error*/ ctx[23] && create_if_block_1$n(ctx);
	let if_block3 = !/*error*/ ctx[23] && /*warn*/ ctx[13] && create_if_block$18(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			attr(div0, "data-invalid", div0_data_invalid_value = /*error*/ ctx[23] || undefined);
			attr(div0, "class", div0_class_value = /*size*/ ctx[2] && `bx--number--${/*size*/ ctx[2]}`);
			toggle_class(div0, "bx--number", true);
			toggle_class(div0, "bx--number--helpertext", true);
			toggle_class(div0, "bx--number--readonly", /*readonly*/ ctx[7]);
			toggle_class(div0, "bx--number--light", /*light*/ ctx[6]);
			toggle_class(div0, "bx--number--nolabel", /*hideLabel*/ ctx[17]);
			toggle_class(div0, "bx--number--mobile", /*mobile*/ ctx[8]);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			append(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			if (if_block2) if_block2.m(div0, null);
			append(div0, t2);
			if (if_block3) if_block3.m(div0, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[33]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[34]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[35]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[36])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div0, t0);
			}

			if (!/*error*/ ctx[23] && !/*warn*/ ctx[13] && /*helperText*/ ctx[15]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2$d(ctx);
					if_block1.c();
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*error*/ ctx[23]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1$n(ctx);
					if_block2.c();
					if_block2.m(div0, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (!/*error*/ ctx[23] && /*warn*/ ctx[13]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block$18(ctx);
					if_block3.c();
					if_block3.m(div0, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!current || dirty[0] & /*error*/ 8388608 && div0_data_invalid_value !== (div0_data_invalid_value = /*error*/ ctx[23] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!current || dirty[0] & /*size*/ 4 && div0_class_value !== (div0_class_value = /*size*/ ctx[2] && `bx--number--${/*size*/ ctx[2]}`)) {
				attr(div0, "class", div0_class_value);
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(div0, "bx--number", true);
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(div0, "bx--number--helpertext", true);
			}

			if (dirty[0] & /*size, readonly*/ 132) {
				toggle_class(div0, "bx--number--readonly", /*readonly*/ ctx[7]);
			}

			if (dirty[0] & /*size, light*/ 68) {
				toggle_class(div0, "bx--number--light", /*light*/ ctx[6]);
			}

			if (dirty[0] & /*size, hideLabel*/ 131076) {
				toggle_class(div0, "bx--number--nolabel", /*hideLabel*/ ctx[17]);
			}

			if (dirty[0] & /*size, mobile*/ 260) {
				toggle_class(div0, "bx--number--mobile", /*mobile*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1S($$self, $$props, $$invalidate) {
	let incrementLabel;
	let decrementLabel;
	let error;
	let errorId;
	let ariaLabel;

	const omit_props_names = [
		"size","value","step","max","min","light","readonly","mobile","allowEmpty","disabled","iconDescription","invalid","invalidText","warn","warnText","helperText","label","hideLabel","translateWithId","translationIds","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { step = 1 } = $$props;
	let { max = undefined } = $$props;
	let { min = undefined } = $$props;
	let { light = false } = $$props;
	let { readonly = false } = $$props;
	let { mobile = false } = $$props;
	let { allowEmpty = false } = $$props;
	let { disabled = false } = $$props;
	let { iconDescription = "" } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { label = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { translateWithId = id => defaultTranslations[id] } = $$props;

	const translationIds = {
		increment: "increment",
		decrement: "decrement"
	};

	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;

	const defaultTranslations = {
		[translationIds.increment]: "Increment number",
		[translationIds.decrement]: "Decrement number"
	};

	const dispatch = createEventDispatcher();

	function updateValue(direction) {
		const nextValue = $$invalidate(0, value += direction * step);

		if (nextValue < min) {
			$$invalidate(0, value = min);
		} else if (nextValue > max) {
			$$invalidate(0, value = max);
		} else {
			$$invalidate(0, value = nextValue);
		}
	}

	afterUpdate(() => {
		dispatch("change", value);
	});

	let inputValue = value;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function input_handler_1(event) {
		bubble($$self, event);
	}

	const click_handler_1 = () => {
		updateValue(-1);
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_2 = ({ target }) => {
		$$invalidate(20, inputValue = target.value);
	};

	const click_handler_2 = () => {
		updateValue(1);
	};

	function input_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_3 = ({ target }) => {
		$$invalidate(20, inputValue = target.value);
	};

	const click_handler_3 = () => {
		updateValue(-1);
	};

	const click_handler_4 = () => {
		updateValue(1);
	};

	$$self.$$set = $$new_props => {
		$$invalidate(49, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(27, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("step" in $$new_props) $$invalidate(3, step = $$new_props.step);
		if ("max" in $$new_props) $$invalidate(4, max = $$new_props.max);
		if ("min" in $$new_props) $$invalidate(5, min = $$new_props.min);
		if ("light" in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ("readonly" in $$new_props) $$invalidate(7, readonly = $$new_props.readonly);
		if ("mobile" in $$new_props) $$invalidate(8, mobile = $$new_props.mobile);
		if ("allowEmpty" in $$new_props) $$invalidate(28, allowEmpty = $$new_props.allowEmpty);
		if ("disabled" in $$new_props) $$invalidate(9, disabled = $$new_props.disabled);
		if ("iconDescription" in $$new_props) $$invalidate(10, iconDescription = $$new_props.iconDescription);
		if ("invalid" in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ("warn" in $$new_props) $$invalidate(13, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(14, warnText = $$new_props.warnText);
		if ("helperText" in $$new_props) $$invalidate(15, helperText = $$new_props.helperText);
		if ("label" in $$new_props) $$invalidate(16, label = $$new_props.label);
		if ("hideLabel" in $$new_props) $$invalidate(17, hideLabel = $$new_props.hideLabel);
		if ("translateWithId" in $$new_props) $$invalidate(29, translateWithId = $$new_props.translateWithId);
		if ("id" in $$new_props) $$invalidate(18, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(19, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(31, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*translateWithId*/ 536870912) {
			 $$invalidate(21, incrementLabel = translateWithId("increment"));
		}

		if ($$self.$$.dirty[0] & /*translateWithId*/ 536870912) {
			 $$invalidate(22, decrementLabel = translateWithId("decrement"));
		}

		if ($$self.$$.dirty[0] & /*inputValue*/ 1048576) {
			 $$invalidate(0, value = Number(inputValue));
		}

		if ($$self.$$.dirty[0] & /*invalid, allowEmpty, value, max, min*/ 268437553) {
			 $$invalidate(23, error = invalid || !allowEmpty && value === "" || value > max || value < min);
		}

		if ($$self.$$.dirty[0] & /*id*/ 262144) {
			 $$invalidate(24, errorId = `error-${id}`);
		}

		 $$invalidate(25, ariaLabel = $$props["aria-label"] || "Numeric input field with increment and decrement buttons");
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		ref,
		size,
		step,
		max,
		min,
		light,
		readonly,
		mobile,
		disabled,
		iconDescription,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		label,
		hideLabel,
		id,
		name,
		inputValue,
		incrementLabel,
		decrementLabel,
		error,
		errorId,
		ariaLabel,
		updateValue,
		$$restProps,
		allowEmpty,
		translateWithId,
		translationIds,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		input_handler,
		input_handler_1,
		click_handler_1,
		input_binding,
		input_handler_2,
		click_handler_2,
		input_binding_1,
		input_handler_3,
		click_handler_3,
		click_handler_4
	];
}

class NumberInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1S,
			create_fragment$1S,
			safe_not_equal,
			{
				size: 2,
				value: 0,
				step: 3,
				max: 4,
				min: 5,
				light: 6,
				readonly: 7,
				mobile: 8,
				allowEmpty: 28,
				disabled: 9,
				iconDescription: 10,
				invalid: 11,
				invalidText: 12,
				warn: 13,
				warnText: 14,
				helperText: 15,
				label: 16,
				hideLabel: 17,
				translateWithId: 29,
				translationIds: 30,
				id: 18,
				name: 19,
				ref: 1
			},
			[-1, -1]
		);
	}

	get translationIds() {
		return this.$$.ctx[30];
	}
}

/* src/NumberInput/NumberInputSkeleton.svelte generated by Svelte v3.32.1 */

function create_if_block$19(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$1T(ctx) {
	let div1;
	let t;
	let div0;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$19();
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t = space();
			div0 = element("div");
			toggle_class(div0, "bx--number", true);
			toggle_class(div0, "bx--skeleton", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$19();
					if_block.c();
					if_block.m(div1, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1T($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("hideLabel" in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class NumberInputSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1T, create_fragment$1T, safe_not_equal, { hideLabel: 0 });
	}
}

/* src/OrderedList/OrderedList.svelte generated by Svelte v3.32.1 */

function create_fragment$1U(ctx) {
	let ol;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let ol_levels = [/*$$restProps*/ ctx[2]];
	let ol_data = {};

	for (let i = 0; i < ol_levels.length; i += 1) {
		ol_data = assign(ol_data, ol_levels[i]);
	}

	return {
		c() {
			ol = element("ol");
			if (default_slot) default_slot.c();
			set_attributes(ol, ol_data);
			toggle_class(ol, "bx--list--ordered", !/*native*/ ctx[1]);
			toggle_class(ol, "bx--list--ordered--native", /*native*/ ctx[1]);
			toggle_class(ol, "bx--list--nested", /*nested*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, ol, anchor);

			if (default_slot) {
				default_slot.m(ol, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ol, "click", /*click_handler*/ ctx[5]),
					listen(ol, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(ol, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(ol, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(ol, ol_data = get_spread_update(ol_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(ol, "bx--list--ordered", !/*native*/ ctx[1]);
			toggle_class(ol, "bx--list--ordered--native", /*native*/ ctx[1]);
			toggle_class(ol, "bx--list--nested", /*nested*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ol);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1U($$self, $$props, $$invalidate) {
	const omit_props_names = ["nested","native"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { nested = false } = $$props;
	let { native = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("nested" in $$new_props) $$invalidate(0, nested = $$new_props.nested);
		if ("native" in $$new_props) $$invalidate(1, native = $$new_props.native);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [
		nested,
		native,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class OrderedList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1U, create_fragment$1U, safe_not_equal, { nested: 0, native: 1 });
	}
}

/* node_modules/carbon-icons-svelte/lib/CaretLeft16/CaretLeft16.svelte generated by Svelte v3.32.1 */

function create_if_block$1a(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$A(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1a(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1a(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1V(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$A(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "CaretLeft16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M20 24L10 16 20 8z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "CaretLeft16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1V($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class CaretLeft16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1V, create_fragment$1V, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/Select/Select.svelte generated by Svelte v3.32.1 */

function create_if_block_10(ctx) {
	let label;
	let t;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[13]);
			attr(label, "for", /*id*/ ctx[5]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[14]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 8192) set_data(t, /*labelText*/ ctx[13]);

			if (dirty & /*id*/ 32) {
				attr(label, "for", /*id*/ ctx[5]);
			}

			if (dirty & /*hideLabel*/ 16384) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[14]);
			}

			if (dirty & /*disabled*/ 16) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (102:4) {#if inline}
function create_if_block_6$5(ctx) {
	let div1;
	let div0;
	let select;
	let select_aria_describedby_value;
	let select_aria_invalid_value;
	let select_disabled_value;
	let select_class_value;
	let t0;
	let chevrondown16;
	let t1;
	let div0_data_invalid_value;
	let t2;
	let t3;
	let if_block2_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
	chevrondown16 = new ChevronDown16({ props: { class: "bx--select__arrow" } });
	let if_block0 = /*invalid*/ ctx[7] && create_if_block_9$2();
	let if_block1 = /*invalid*/ ctx[7] && create_if_block_8$2(ctx);
	let if_block2 = /*helperText*/ ctx[11] && create_if_block_7$3(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			select = element("select");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(chevrondown16.$$.fragment);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			attr(select, "aria-describedby", select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[15] : undefined);
			attr(select, "aria-invalid", select_aria_invalid_value = /*invalid*/ ctx[7] || undefined);
			select.disabled = select_disabled_value = /*disabled*/ ctx[4] || undefined;
			attr(select, "id", /*id*/ ctx[5]);
			attr(select, "name", /*name*/ ctx[6]);
			attr(select, "class", select_class_value = /*size*/ ctx[1] && `bx--select-input--${/*size*/ ctx[1]}`);
			toggle_class(select, "bx--select-input", true);
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[7] || undefined);
			toggle_class(div0, "bx--select-input__wrapper", true);
			toggle_class(div1, "bx--select-input--inline__wrapper", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, select);

			if (default_slot) {
				default_slot.m(select, null);
			}

			/*select_binding*/ ctx[23](select);
			append(div0, t0);
			mount_component(chevrondown16, div0, null);
			append(div0, t1);
			if (if_block0) if_block0.m(div0, null);
			append(div1, t2);
			if (if_block1) if_block1.m(div1, null);
			insert(target, t3, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*change_handler*/ ctx[24]),
					listen(select, "blur", /*blur_handler*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 524288) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}

			if (!current || dirty & /*invalid, errorId*/ 32896 && select_aria_describedby_value !== (select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[15] : undefined)) {
				attr(select, "aria-describedby", select_aria_describedby_value);
			}

			if (!current || dirty & /*invalid*/ 128 && select_aria_invalid_value !== (select_aria_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr(select, "aria-invalid", select_aria_invalid_value);
			}

			if (!current || dirty & /*disabled*/ 16 && select_disabled_value !== (select_disabled_value = /*disabled*/ ctx[4] || undefined)) {
				select.disabled = select_disabled_value;
			}

			if (!current || dirty & /*id*/ 32) {
				attr(select, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty & /*name*/ 64) {
				attr(select, "name", /*name*/ ctx[6]);
			}

			if (!current || dirty & /*size*/ 2 && select_class_value !== (select_class_value = /*size*/ ctx[1] && `bx--select-input--${/*size*/ ctx[1]}`)) {
				attr(select, "class", select_class_value);
			}

			if (dirty & /*size*/ 2) {
				toggle_class(select, "bx--select-input", true);
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block0) {
					if (dirty & /*invalid*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_9$2();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*invalid*/ 128 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_8$2(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*helperText*/ ctx[11]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_7$3(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(chevrondown16.$$.fragment, local);
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(chevrondown16.$$.fragment, local);
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*select_binding*/ ctx[23](null);
			destroy_component(chevrondown16);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach(t3);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (125:10) {#if invalid}
function create_if_block_9$2(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--select__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (129:8) {#if invalid}
function create_if_block_8$2(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[8]);
			attr(div, "id", /*errorId*/ ctx[15]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*invalidText*/ 256) set_data(t, /*invalidText*/ ctx[8]);

			if (dirty & /*errorId*/ 32768) {
				attr(div, "id", /*errorId*/ ctx[15]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (135:6) {#if helperText}
function create_if_block_7$3(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*helperText*/ 2048) set_data(t, /*helperText*/ ctx[11]);

			if (dirty & /*disabled*/ 16) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (144:4) {#if !inline}
function create_if_block$1b(ctx) {
	let div;
	let select;
	let select_aria_describedby_value;
	let select_disabled_value;
	let select_aria_invalid_value;
	let select_class_value;
	let t0;
	let chevrondown16;
	let t1;
	let t2;
	let div_data_invalid_value;
	let t3;
	let t4;
	let t5;
	let if_block4_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
	chevrondown16 = new ChevronDown16({ props: { class: "bx--select__arrow" } });
	let if_block0 = /*invalid*/ ctx[7] && create_if_block_5$7();
	let if_block1 = !/*invalid*/ ctx[7] && /*warn*/ ctx[9] && create_if_block_4$a();
	let if_block2 = !/*invalid*/ ctx[7] && /*helperText*/ ctx[11] && create_if_block_3$c(ctx);
	let if_block3 = /*invalid*/ ctx[7] && create_if_block_2$e(ctx);
	let if_block4 = !/*invalid*/ ctx[7] && /*warn*/ ctx[9] && create_if_block_1$o(ctx);

	return {
		c() {
			div = element("div");
			select = element("select");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(chevrondown16.$$.fragment);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
			attr(select, "id", /*id*/ ctx[5]);
			attr(select, "name", /*name*/ ctx[6]);
			attr(select, "aria-describedby", select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[15] : undefined);
			select.disabled = select_disabled_value = /*disabled*/ ctx[4] || undefined;
			attr(select, "aria-invalid", select_aria_invalid_value = /*invalid*/ ctx[7] || undefined);
			attr(select, "class", select_class_value = /*size*/ ctx[1] && `bx--select-input--${/*size*/ ctx[1]}`);
			toggle_class(select, "bx--select-input", true);
			attr(div, "data-invalid", div_data_invalid_value = /*invalid*/ ctx[7] || undefined);
			toggle_class(div, "bx--select-input__wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, select);

			if (default_slot) {
				default_slot.m(select, null);
			}

			/*select_binding_1*/ ctx[25](select);
			append(div, t0);
			mount_component(chevrondown16, div, null);
			append(div, t1);
			if (if_block0) if_block0.m(div, null);
			append(div, t2);
			if (if_block1) if_block1.m(div, null);
			insert(target, t3, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert(target, t5, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert(target, if_block4_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*change_handler_1*/ ctx[26]),
					listen(select, "blur", /*blur_handler_1*/ ctx[21])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 524288) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}

			if (!current || dirty & /*id*/ 32) {
				attr(select, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty & /*name*/ 64) {
				attr(select, "name", /*name*/ ctx[6]);
			}

			if (!current || dirty & /*invalid, errorId*/ 32896 && select_aria_describedby_value !== (select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[15] : undefined)) {
				attr(select, "aria-describedby", select_aria_describedby_value);
			}

			if (!current || dirty & /*disabled*/ 16 && select_disabled_value !== (select_disabled_value = /*disabled*/ ctx[4] || undefined)) {
				select.disabled = select_disabled_value;
			}

			if (!current || dirty & /*invalid*/ 128 && select_aria_invalid_value !== (select_aria_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr(select, "aria-invalid", select_aria_invalid_value);
			}

			if (!current || dirty & /*size*/ 2 && select_class_value !== (select_class_value = /*size*/ ctx[1] && `bx--select-input--${/*size*/ ctx[1]}`)) {
				attr(select, "class", select_class_value);
			}

			if (dirty & /*size*/ 2) {
				toggle_class(select, "bx--select-input", true);
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block0) {
					if (dirty & /*invalid*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5$7();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t2);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[7] && /*warn*/ ctx[9]) {
				if (if_block1) {
					if (dirty & /*invalid, warn*/ 640) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$a();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*invalid*/ 128 && div_data_invalid_value !== (div_data_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr(div, "data-invalid", div_data_invalid_value);
			}

			if (!/*invalid*/ ctx[7] && /*helperText*/ ctx[11]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3$c(ctx);
					if_block2.c();
					if_block2.m(t4.parentNode, t4);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_2$e(ctx);
					if_block3.c();
					if_block3.m(t5.parentNode, t5);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!/*invalid*/ ctx[7] && /*warn*/ ctx[9]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_1$o(ctx);
					if_block4.c();
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(chevrondown16.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(chevrondown16.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*select_binding_1*/ ctx[25](null);
			destroy_component(chevrondown16);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach(t3);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t5);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(if_block4_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (166:8) {#if invalid}
function create_if_block_5$7(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--select__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (169:8) {#if !invalid && warn}
function create_if_block_4$a(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--select__invalid-icon bx--select__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (175:6) {#if !invalid && helperText}
function create_if_block_3$c(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*helperText*/ 2048) set_data(t, /*helperText*/ ctx[11]);

			if (dirty & /*disabled*/ 16) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (183:6) {#if invalid}
function create_if_block_2$e(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[8]);
			attr(div, "id", /*errorId*/ ctx[15]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*invalidText*/ 256) set_data(t, /*invalidText*/ ctx[8]);

			if (dirty & /*errorId*/ 32768) {
				attr(div, "id", /*errorId*/ ctx[15]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (188:6) {#if !invalid && warn}
function create_if_block_1$o(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[10]);
			attr(div, "id", /*errorId*/ ctx[15]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*warnText*/ 1024) set_data(t, /*warnText*/ ctx[10]);

			if (dirty & /*errorId*/ 32768) {
				attr(div, "id", /*errorId*/ ctx[15]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1W(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let current;
	let if_block0 = !/*noLabel*/ ctx[12] && create_if_block_10(ctx);
	let if_block1 = /*inline*/ ctx[2] && create_if_block_6$5(ctx);
	let if_block2 = !/*inline*/ ctx[2] && create_if_block$1b(ctx);
	let div1_levels = [/*$$restProps*/ ctx[17]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			toggle_class(div0, "bx--select", true);
			toggle_class(div0, "bx--select--inline", /*inline*/ ctx[2]);
			toggle_class(div0, "bx--select--light", /*light*/ ctx[3]);
			toggle_class(div0, "bx--select--invalid", /*invalid*/ ctx[7]);
			toggle_class(div0, "bx--select--disabled", /*disabled*/ ctx[4]);
			toggle_class(div0, "bx--select--warning", /*warn*/ ctx[9]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			if (if_block2) if_block2.m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*noLabel*/ ctx[12]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_10(ctx);
					if_block0.c();
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*inline*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*inline*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_6$5(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!/*inline*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*inline*/ 4) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$1b(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty & /*inline*/ 4) {
				toggle_class(div0, "bx--select--inline", /*inline*/ ctx[2]);
			}

			if (dirty & /*light*/ 8) {
				toggle_class(div0, "bx--select--light", /*light*/ ctx[3]);
			}

			if (dirty & /*invalid*/ 128) {
				toggle_class(div0, "bx--select--invalid", /*invalid*/ ctx[7]);
			}

			if (dirty & /*disabled*/ 16) {
				toggle_class(div0, "bx--select--disabled", /*disabled*/ ctx[4]);
			}

			if (dirty & /*warn*/ 512) {
				toggle_class(div0, "bx--select--warning", /*warn*/ ctx[9]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 131072 && /*$$restProps*/ ctx[17]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};
}

function instance$1W($$self, $$props, $$invalidate) {
	let errorId;

	const omit_props_names = [
		"selected","size","inline","light","disabled","id","name","invalid","invalidText","warn","warnText","helperText","noLabel","labelText","hideLabel","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = undefined } = $$props;
	let { size = undefined } = $$props;
	let { inline = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { noLabel = false } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	const selectedValue = writable(selected);
	component_subscribe($$self, selectedValue, value => $$invalidate(27, $selectedValue = value));
	setContext("Select", { selectedValue });

	afterUpdate(() => {
		$$invalidate(18, selected = $selectedValue);
		dispatch("change", $selectedValue);
	});

	function blur_handler_1(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function select_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const change_handler = ({ target }) => {
		selectedValue.set(target.value);
	};

	function select_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const change_handler_1 = ({ target }) => {
		selectedValue.set(target.value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(17, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("selected" in $$new_props) $$invalidate(18, selected = $$new_props.selected);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("inline" in $$new_props) $$invalidate(2, inline = $$new_props.inline);
		if ("light" in $$new_props) $$invalidate(3, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ("id" in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(6, name = $$new_props.name);
		if ("invalid" in $$new_props) $$invalidate(7, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(8, invalidText = $$new_props.invalidText);
		if ("warn" in $$new_props) $$invalidate(9, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(10, warnText = $$new_props.warnText);
		if ("helperText" in $$new_props) $$invalidate(11, helperText = $$new_props.helperText);
		if ("noLabel" in $$new_props) $$invalidate(12, noLabel = $$new_props.noLabel);
		if ("labelText" in $$new_props) $$invalidate(13, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(14, hideLabel = $$new_props.hideLabel);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id*/ 32) {
			 $$invalidate(15, errorId = `error-${id}`);
		}

		if ($$self.$$.dirty & /*selected*/ 262144) {
			 selectedValue.set(selected);
		}
	};

	return [
		ref,
		size,
		inline,
		light,
		disabled,
		id,
		name,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		noLabel,
		labelText,
		hideLabel,
		errorId,
		selectedValue,
		$$restProps,
		selected,
		$$scope,
		slots,
		blur_handler_1,
		blur_handler,
		select_binding,
		change_handler,
		select_binding_1,
		change_handler_1
	];
}

class Select extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1W, create_fragment$1W, safe_not_equal, {
			selected: 18,
			size: 1,
			inline: 2,
			light: 3,
			disabled: 4,
			id: 5,
			name: 6,
			invalid: 7,
			invalidText: 8,
			warn: 9,
			warnText: 10,
			helperText: 11,
			noLabel: 12,
			labelText: 13,
			hideLabel: 14,
			ref: 0
		});
	}
}

/* src/Select/SelectItem.svelte generated by Svelte v3.32.1 */

function create_fragment$1X(ctx) {
	let option;
	let t_value = (/*text*/ ctx[1] || /*value*/ ctx[0]) + "";
	let t;
	let option_class_value;
	let option_style_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = /*value*/ ctx[0];
			option.value = option.__value;
			option.disabled = /*disabled*/ ctx[3];
			option.hidden = /*hidden*/ ctx[2];
			option.selected = /*selected*/ ctx[4];
			attr(option, "class", option_class_value = /*$$restProps*/ ctx[5].class);
			attr(option, "style", option_style_value = /*$$restProps*/ ctx[5].style);
			toggle_class(option, "bx--select-option", true);
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, [dirty]) {
			if (dirty & /*text, value*/ 3 && t_value !== (t_value = (/*text*/ ctx[1] || /*value*/ ctx[0]) + "")) set_data(t, t_value);

			if (dirty & /*value*/ 1) {
				option.__value = /*value*/ ctx[0];
				option.value = option.__value;
			}

			if (dirty & /*disabled*/ 8) {
				option.disabled = /*disabled*/ ctx[3];
			}

			if (dirty & /*hidden*/ 4) {
				option.hidden = /*hidden*/ ctx[2];
			}

			if (dirty & /*selected*/ 16) {
				option.selected = /*selected*/ ctx[4];
			}

			if (dirty & /*$$restProps*/ 32 && option_class_value !== (option_class_value = /*$$restProps*/ ctx[5].class)) {
				attr(option, "class", option_class_value);
			}

			if (dirty & /*$$restProps*/ 32 && option_style_value !== (option_style_value = /*$$restProps*/ ctx[5].style)) {
				attr(option, "style", option_style_value);
			}

			if (dirty & /*$$restProps*/ 32) {
				toggle_class(option, "bx--select-option", true);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function instance$1X($$self, $$props, $$invalidate) {
	const omit_props_names = ["value","text","hidden","disabled"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { value = "" } = $$props;
	let { text = "" } = $$props;
	let { hidden = false } = $$props;
	let { disabled = false } = $$props;
	const ctx = getContext("Select") || getContext("TimePickerSelect");
	let selected = false;

	const unsubscribe = ctx.selectedValue.subscribe(currentValue => {
		$$invalidate(4, selected = currentValue === value);
	});

	onDestroy(() => {
		unsubscribe();
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("text" in $$new_props) $$invalidate(1, text = $$new_props.text);
		if ("hidden" in $$new_props) $$invalidate(2, hidden = $$new_props.hidden);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
	};

	return [value, text, hidden, disabled, selected, $$restProps];
}

class SelectItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1X, create_fragment$1X, safe_not_equal, {
			value: 0,
			text: 1,
			hidden: 2,
			disabled: 3
		});
	}
}

/* src/Pagination/Pagination.svelte generated by Svelte v3.32.1 */

function get_each_context$a(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[26] = list[i];
	child_ctx[28] = i;
	return child_ctx;
}

function get_each_context_1$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[26] = list[i];
	child_ctx[28] = i;
	return child_ctx;
}

// (101:4) {#if !pageSizeInputDisabled}
function create_if_block_3$d(ctx) {
	let label;
	let t0;
	let label_id_value;
	let label_for_value;
	let t1;
	let select;
	let updating_selected;
	let current;

	function select_selected_binding(value) {
		/*select_selected_binding*/ ctx[22].call(null, value);
	}

	let select_props = {
		id: "bx--pagination-select-" + /*id*/ ctx[14],
		class: "bx--select__item-count",
		hideLabel: true,
		noLabel: true,
		inline: true,
		$$slots: { default: [create_default_slot_1$7] },
		$$scope: { ctx }
	};

	if (/*pageSize*/ ctx[1] !== void 0) {
		select_props.selected = /*pageSize*/ ctx[1];
	}

	select = new Select({ props: select_props });
	binding_callbacks.push(() => bind(select, "selected", select_selected_binding));

	return {
		c() {
			label = element("label");
			t0 = text(/*itemsPerPageText*/ ctx[5]);
			t1 = space();
			create_component(select.$$.fragment);
			attr(label, "id", label_id_value = "bx--pagination-select-" + /*id*/ ctx[14] + "-count-label");
			attr(label, "for", label_for_value = "bx--pagination-select-" + /*id*/ ctx[14]);
			toggle_class(label, "bx--pagination__text", true);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t0);
			insert(target, t1, anchor);
			mount_component(select, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*itemsPerPageText*/ 32) set_data(t0, /*itemsPerPageText*/ ctx[5]);

			if (!current || dirty & /*id*/ 16384 && label_id_value !== (label_id_value = "bx--pagination-select-" + /*id*/ ctx[14] + "-count-label")) {
				attr(label, "id", label_id_value);
			}

			if (!current || dirty & /*id*/ 16384 && label_for_value !== (label_for_value = "bx--pagination-select-" + /*id*/ ctx[14])) {
				attr(label, "for", label_for_value);
			}

			const select_changes = {};
			if (dirty & /*id*/ 16384) select_changes.id = "bx--pagination-select-" + /*id*/ ctx[14];

			if (dirty & /*$$scope, pageSizes*/ 1073742848) {
				select_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selected && dirty & /*pageSize*/ 2) {
				updating_selected = true;
				select_changes.selected = /*pageSize*/ ctx[1];
				add_flush_callback(() => updating_selected = false);
			}

			select.$set(select_changes);
		},
		i(local) {
			if (current) return;
			transition_in(select.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(select.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (detaching) detach(t1);
			destroy_component(select, detaching);
		}
	};
}

// (117:8) {#each pageSizes as size, i (size)}
function create_each_block_1$2(key_1, ctx) {
	let first;
	let selectitem;
	let current;

	selectitem = new SelectItem({
			props: {
				value: /*size*/ ctx[26],
				text: /*size*/ ctx[26].toString()
			}
		});

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(selectitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(selectitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const selectitem_changes = {};
			if (dirty & /*pageSizes*/ 1024) selectitem_changes.value = /*size*/ ctx[26];
			if (dirty & /*pageSizes*/ 1024) selectitem_changes.text = /*size*/ ctx[26].toString();
			selectitem.$set(selectitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(selectitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(selectitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(selectitem, detaching);
		}
	};
}

// (109:6) <Select         id="bx--pagination-select-{id}"         class="bx--select__item-count"         hideLabel         noLabel         inline         bind:selected="{pageSize}"       >
function create_default_slot_1$7(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value_1 = /*pageSizes*/ ctx[10];
	const get_key = ctx => /*size*/ ctx[26];

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1$2(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$2(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*pageSizes*/ 1024) {
				each_value_1 = /*pageSizes*/ ctx[10];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_1$2, each_1_anchor, get_each_context_1$2);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (125:6) {:else}
function create_else_block_1$2(ctx) {
	let t_value = /*itemRangeText*/ ctx[7](Math.min(/*pageSize*/ ctx[1] * (/*page*/ ctx[0] - 1) + 1, /*totalItems*/ ctx[2]), Math.min(/*page*/ ctx[0] * /*pageSize*/ ctx[1], /*totalItems*/ ctx[2]), /*totalItems*/ ctx[2]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*itemRangeText, pageSize, page, totalItems*/ 135 && t_value !== (t_value = /*itemRangeText*/ ctx[7](Math.min(/*pageSize*/ ctx[1] * (/*page*/ ctx[0] - 1) + 1, /*totalItems*/ ctx[2]), Math.min(/*page*/ ctx[0] * /*pageSize*/ ctx[1], /*totalItems*/ ctx[2]), /*totalItems*/ ctx[2]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (123:6) {#if pagesUnknown}
function create_if_block_2$f(ctx) {
	let t_value = /*itemText*/ ctx[6](/*pageSize*/ ctx[1] * (/*page*/ ctx[0] - 1) + 1, /*page*/ ctx[0] * /*pageSize*/ ctx[1]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*itemText, pageSize, page*/ 67 && t_value !== (t_value = /*itemText*/ ctx[6](/*pageSize*/ ctx[1] * (/*page*/ ctx[0] - 1) + 1, /*page*/ ctx[0] * /*pageSize*/ ctx[1]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (135:4) {#if !pageInputDisabled}
function create_if_block$1c(ctx) {
	let select;
	let updating_selected;
	let t;
	let span;
	let current;

	function select_selected_binding_1(value) {
		/*select_selected_binding_1*/ ctx[23].call(null, value);
	}

	let select_props = {
		id: "bx--pagination-select-" + (/*id*/ ctx[14] + 2),
		class: "bx--select__page-number",
		labelText: "Page number, of " + /*totalPages*/ ctx[15] + " pages",
		inline: true,
		hideLabel: true,
		$$slots: { default: [create_default_slot$j] },
		$$scope: { ctx }
	};

	if (/*page*/ ctx[0] !== void 0) {
		select_props.selected = /*page*/ ctx[0];
	}

	select = new Select({ props: select_props });
	binding_callbacks.push(() => bind(select, "selected", select_selected_binding_1));

	function select_block_type_1(ctx, dirty) {
		if (/*pagesUnknown*/ ctx[11]) return create_if_block_1$p;
		return create_else_block$o;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			create_component(select.$$.fragment);
			t = space();
			span = element("span");
			if_block.c();
			toggle_class(span, "bx--pagination__text", true);
		},
		m(target, anchor) {
			mount_component(select, target, anchor);
			insert(target, t, anchor);
			insert(target, span, anchor);
			if_block.m(span, null);
			current = true;
		},
		p(ctx, dirty) {
			const select_changes = {};
			if (dirty & /*id*/ 16384) select_changes.id = "bx--pagination-select-" + (/*id*/ ctx[14] + 2);
			if (dirty & /*totalPages*/ 32768) select_changes.labelText = "Page number, of " + /*totalPages*/ ctx[15] + " pages";

			if (dirty & /*$$scope, selectItems*/ 1073807360) {
				select_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selected && dirty & /*page*/ 1) {
				updating_selected = true;
				select_changes.selected = /*page*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			select.$set(select_changes);

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(select.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(select.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(select, detaching);
			if (detaching) detach(t);
			if (detaching) detach(span);
			if_block.d();
		}
	};
}

// (144:8) {#each selectItems as size, i (size)}
function create_each_block$a(key_1, ctx) {
	let first;
	let selectitem;
	let current;

	selectitem = new SelectItem({
			props: {
				value: /*size*/ ctx[26] + 1,
				text: (/*size*/ ctx[26] + 1).toString()
			}
		});

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(selectitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(selectitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const selectitem_changes = {};
			if (dirty & /*selectItems*/ 65536) selectitem_changes.value = /*size*/ ctx[26] + 1;
			if (dirty & /*selectItems*/ 65536) selectitem_changes.text = (/*size*/ ctx[26] + 1).toString();
			selectitem.$set(selectitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(selectitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(selectitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(selectitem, detaching);
		}
	};
}

// (136:6) <Select         id="bx--pagination-select-{id + 2}"         class="bx--select__page-number"         labelText="Page number, of {totalPages} pages"         inline         hideLabel         bind:selected="{page}"       >
function create_default_slot$j(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*selectItems*/ ctx[16];
	const get_key = ctx => /*size*/ ctx[26];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$a(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$a(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*selectItems*/ 65536) {
				each_value = /*selectItems*/ ctx[16];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$a, each_1_anchor, get_each_context$a);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (151:8) {:else}
function create_else_block$o(ctx) {
	let t_value = /*pageRangeText*/ ctx[13](/*page*/ ctx[0], /*totalPages*/ ctx[15]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*pageRangeText, page, totalPages*/ 40961 && t_value !== (t_value = /*pageRangeText*/ ctx[13](/*page*/ ctx[0], /*totalPages*/ ctx[15]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (149:8) {#if pagesUnknown}
function create_if_block_1$p(ctx) {
	let t_value = /*pageText*/ ctx[12](/*page*/ ctx[0]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*pageText, page*/ 4097 && t_value !== (t_value = /*pageText*/ ctx[12](/*page*/ ctx[0]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$1Y(ctx) {
	let div2;
	let div0;
	let t0;
	let span;
	let t1;
	let div1;
	let t2;
	let button0;
	let t3;
	let button1;
	let current;
	let if_block0 = !/*pageSizeInputDisabled*/ ctx[9] && create_if_block_3$d(ctx);

	function select_block_type(ctx, dirty) {
		if (/*pagesUnknown*/ ctx[11]) return create_if_block_2$f;
		return create_else_block_1$2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);
	let if_block2 = !/*pageInputDisabled*/ ctx[8] && create_if_block$1c(ctx);

	button0 = new Button({
			props: {
				hasIconOnly: true,
				kind: "ghost",
				tooltipAlignment: "center",
				tooltipPosition: "top",
				icon: CaretLeft16,
				iconDescription: /*backwardText*/ ctx[4],
				disabled: /*backButtonDisabled*/ ctx[17],
				class: "bx--pagination__button bx--pagination__button--backward " + (/*backButtonDisabled*/ ctx[17]
				? "bx--pagination__button--no-index"
				: "")
			}
		});

	button0.$on("click", /*click_handler*/ ctx[24]);

	button1 = new Button({
			props: {
				hasIconOnly: true,
				kind: "ghost",
				tooltipAlignment: "end",
				tooltipPosition: "top",
				icon: CaretRight16,
				iconDescription: /*forwardText*/ ctx[3],
				disabled: /*forwardButtonDisabled*/ ctx[18],
				class: "bx--pagination__button bx--pagination__button--forward " + (/*forwardButtonDisabled*/ ctx[18]
				? "bx--pagination__button--no-index"
				: "")
			}
		});

	button1.$on("click", /*click_handler_1*/ ctx[25]);
	let div2_levels = [{ id: /*id*/ ctx[14] }, /*$$restProps*/ ctx[20]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			span = element("span");
			if_block1.c();
			t1 = space();
			div1 = element("div");
			if (if_block2) if_block2.c();
			t2 = space();
			create_component(button0.$$.fragment);
			t3 = space();
			create_component(button1.$$.fragment);
			toggle_class(span, "bx--pagination__text", !/*pageSizeInputDisabled*/ ctx[9]);
			toggle_class(div0, "bx--pagination__left", true);
			toggle_class(div1, "bx--pagination__right", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--pagination", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			append(div0, span);
			if_block1.m(span, null);
			append(div2, t1);
			append(div2, div1);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t2);
			mount_component(button0, div1, null);
			append(div1, t3);
			mount_component(button1, div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*pageSizeInputDisabled*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*pageSizeInputDisabled*/ 512) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$d(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(span, null);
				}
			}

			if (dirty & /*pageSizeInputDisabled*/ 512) {
				toggle_class(span, "bx--pagination__text", !/*pageSizeInputDisabled*/ ctx[9]);
			}

			if (!/*pageInputDisabled*/ ctx[8]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*pageInputDisabled*/ 256) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$1c(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			const button0_changes = {};
			if (dirty & /*backwardText*/ 16) button0_changes.iconDescription = /*backwardText*/ ctx[4];
			if (dirty & /*backButtonDisabled*/ 131072) button0_changes.disabled = /*backButtonDisabled*/ ctx[17];

			if (dirty & /*backButtonDisabled*/ 131072) button0_changes.class = "bx--pagination__button bx--pagination__button--backward " + (/*backButtonDisabled*/ ctx[17]
			? "bx--pagination__button--no-index"
			: "");

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty & /*forwardText*/ 8) button1_changes.iconDescription = /*forwardText*/ ctx[3];
			if (dirty & /*forwardButtonDisabled*/ 262144) button1_changes.disabled = /*forwardButtonDisabled*/ ctx[18];

			if (dirty & /*forwardButtonDisabled*/ 262144) button1_changes.class = "bx--pagination__button bx--pagination__button--forward " + (/*forwardButtonDisabled*/ ctx[18]
			? "bx--pagination__button--no-index"
			: "");

			button1.$set(button1_changes);

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				(!current || dirty & /*id*/ 16384) && { id: /*id*/ ctx[14] },
				dirty & /*$$restProps*/ 1048576 && /*$$restProps*/ ctx[20]
			]));

			toggle_class(div2, "bx--pagination", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block2);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block2);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if_block1.d();
			if (if_block2) if_block2.d();
			destroy_component(button0);
			destroy_component(button1);
		}
	};
}

function instance$1Y($$self, $$props, $$invalidate) {
	let totalPages;
	let selectItems;
	let backButtonDisabled;
	let forwardButtonDisabled;

	const omit_props_names = [
		"page","totalItems","disabled","forwardText","backwardText","itemsPerPageText","itemText","itemRangeText","pageInputDisabled","pageSizeInputDisabled","pageSize","pageSizes","pagesUnknown","pageText","pageRangeText","id"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { page = 1 } = $$props;
	let { totalItems = 0 } = $$props;
	let { disabled = false } = $$props;
	let { forwardText = "Next page" } = $$props;
	let { backwardText = "Previous page" } = $$props;
	let { itemsPerPageText = "Items per page:" } = $$props;
	let { itemText = (min, max) => `${min}–${max} items` } = $$props;
	let { itemRangeText = (min, max, total) => `${min}–${max} of ${total} items` } = $$props;
	let { pageInputDisabled = false } = $$props;
	let { pageSizeInputDisabled = false } = $$props;
	let { pageSize = 10 } = $$props;
	let { pageSizes = [10] } = $$props;
	let { pagesUnknown = false } = $$props;
	let { pageText = page => `page ${page}` } = $$props;
	let { pageRangeText = (current, total) => `of ${total} page${total === 1 ? "" : "s"}` } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const dispatch = createEventDispatcher();

	function select_selected_binding(value) {
		pageSize = value;
		($$invalidate(1, pageSize), $$invalidate(0, page));
	}

	function select_selected_binding_1(value) {
		page = value;
		($$invalidate(0, page), $$invalidate(1, pageSize));
	}

	const click_handler = () => {
		$$invalidate(0, page--, page);
		dispatch("click:button--previous", { page });
	};

	const click_handler_1 = () => {
		$$invalidate(0, page++, page);
		dispatch("click:button--next", { page });
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("page" in $$new_props) $$invalidate(0, page = $$new_props.page);
		if ("totalItems" in $$new_props) $$invalidate(2, totalItems = $$new_props.totalItems);
		if ("disabled" in $$new_props) $$invalidate(21, disabled = $$new_props.disabled);
		if ("forwardText" in $$new_props) $$invalidate(3, forwardText = $$new_props.forwardText);
		if ("backwardText" in $$new_props) $$invalidate(4, backwardText = $$new_props.backwardText);
		if ("itemsPerPageText" in $$new_props) $$invalidate(5, itemsPerPageText = $$new_props.itemsPerPageText);
		if ("itemText" in $$new_props) $$invalidate(6, itemText = $$new_props.itemText);
		if ("itemRangeText" in $$new_props) $$invalidate(7, itemRangeText = $$new_props.itemRangeText);
		if ("pageInputDisabled" in $$new_props) $$invalidate(8, pageInputDisabled = $$new_props.pageInputDisabled);
		if ("pageSizeInputDisabled" in $$new_props) $$invalidate(9, pageSizeInputDisabled = $$new_props.pageSizeInputDisabled);
		if ("pageSize" in $$new_props) $$invalidate(1, pageSize = $$new_props.pageSize);
		if ("pageSizes" in $$new_props) $$invalidate(10, pageSizes = $$new_props.pageSizes);
		if ("pagesUnknown" in $$new_props) $$invalidate(11, pagesUnknown = $$new_props.pagesUnknown);
		if ("pageText" in $$new_props) $$invalidate(12, pageText = $$new_props.pageText);
		if ("pageRangeText" in $$new_props) $$invalidate(13, pageRangeText = $$new_props.pageRangeText);
		if ("id" in $$new_props) $$invalidate(14, id = $$new_props.id);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*page, pageSize*/ 3) {
			 {
				if (typeof page !== "number") {
					$$invalidate(0, page = Number(page));
				}

				if (typeof pageSize !== "number") {
					$$invalidate(1, pageSize = Number(pageSize));
				}

				dispatch("update", { pageSize, page });
			}
		}

		if ($$self.$$.dirty & /*totalItems, pageSize*/ 6) {
			 $$invalidate(15, totalPages = Math.max(Math.ceil(totalItems / pageSize), 1));
		}

		if ($$self.$$.dirty & /*totalPages*/ 32768) {
			 $$invalidate(16, selectItems = Array.from({ length: totalPages }, (_, i) => i));
		}

		if ($$self.$$.dirty & /*disabled, page*/ 2097153) {
			 $$invalidate(17, backButtonDisabled = disabled || page === 1);
		}

		if ($$self.$$.dirty & /*disabled, page, totalPages*/ 2129921) {
			 $$invalidate(18, forwardButtonDisabled = disabled || page === totalPages);
		}
	};

	return [
		page,
		pageSize,
		totalItems,
		forwardText,
		backwardText,
		itemsPerPageText,
		itemText,
		itemRangeText,
		pageInputDisabled,
		pageSizeInputDisabled,
		pageSizes,
		pagesUnknown,
		pageText,
		pageRangeText,
		id,
		totalPages,
		selectItems,
		backButtonDisabled,
		forwardButtonDisabled,
		dispatch,
		$$restProps,
		disabled,
		select_selected_binding,
		select_selected_binding_1,
		click_handler,
		click_handler_1
	];
}

class Pagination extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1Y, create_fragment$1Y, safe_not_equal, {
			page: 0,
			totalItems: 2,
			disabled: 21,
			forwardText: 3,
			backwardText: 4,
			itemsPerPageText: 5,
			itemText: 6,
			itemRangeText: 7,
			pageInputDisabled: 8,
			pageSizeInputDisabled: 9,
			pageSize: 1,
			pageSizes: 10,
			pagesUnknown: 11,
			pageText: 12,
			pageRangeText: 13,
			id: 14
		});
	}
}

/* src/Pagination/PaginationSkeleton.svelte generated by Svelte v3.32.1 */

function create_fragment$1Z(ctx) {
	let div2;
	let div0;
	let skeletontext0;
	let t0;
	let skeletontext1;
	let t1;
	let skeletontext2;
	let t2;
	let div1;
	let skeletontext3;
	let current;
	let mounted;
	let dispose;
	skeletontext0 = new SkeletonText({ props: { width: "70px" } });
	skeletontext1 = new SkeletonText({ props: { width: "35px" } });
	skeletontext2 = new SkeletonText({ props: { width: "105px" } });
	skeletontext3 = new SkeletonText({ props: { width: "70px" } });
	let div2_levels = [/*$$restProps*/ ctx[0]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			create_component(skeletontext0.$$.fragment);
			t0 = space();
			create_component(skeletontext1.$$.fragment);
			t1 = space();
			create_component(skeletontext2.$$.fragment);
			t2 = space();
			div1 = element("div");
			create_component(skeletontext3.$$.fragment);
			toggle_class(div0, "bx--pagination__left", true);
			toggle_class(div1, "bx--pagination__right", true);
			toggle_class(div1, "bx--pagination--inline", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--pagination", true);
			toggle_class(div2, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			mount_component(skeletontext0, div0, null);
			append(div0, t0);
			mount_component(skeletontext1, div0, null);
			append(div0, t1);
			mount_component(skeletontext2, div0, null);
			append(div2, t2);
			append(div2, div1);
			mount_component(skeletontext3, div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div2, "click", /*click_handler*/ ctx[1]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div2, "bx--pagination", true);
			toggle_class(div2, "bx--skeleton", true);
		},
		i(local) {
			if (current) return;
			transition_in(skeletontext0.$$.fragment, local);
			transition_in(skeletontext1.$$.fragment, local);
			transition_in(skeletontext2.$$.fragment, local);
			transition_in(skeletontext3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(skeletontext0.$$.fragment, local);
			transition_out(skeletontext1.$$.fragment, local);
			transition_out(skeletontext2.$$.fragment, local);
			transition_out(skeletontext3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(skeletontext0);
			destroy_component(skeletontext1);
			destroy_component(skeletontext2);
			destroy_component(skeletontext3);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1Z($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class PaginationSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1Z, create_fragment$1Z, safe_not_equal, {});
	}
}

/* src/PaginationNav/PaginationItem.svelte generated by Svelte v3.32.1 */

function create_fragment$1_(ctx) {
	let li;
	let button;
	let span;
	let t0;
	let t1;
	let button_aria_current_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	return {
		c() {
			li = element("li");
			button = element("button");
			span = element("span");
			if (default_slot) default_slot.c();
			t0 = space();
			t1 = text(/*page*/ ctx[0]);
			toggle_class(span, "bx--pagination-nav__accessibility-label", true);
			attr(button, "data-page", /*page*/ ctx[0]);
			attr(button, "aria-current", button_aria_current_value = /*active*/ ctx[1] ? "page" : undefined);
			toggle_class(button, "bx--pagination-nav__page", true);
			toggle_class(button, "bx--pagination-nav__page--active", /*active*/ ctx[1]);
			toggle_class(li, "bx--pagination-nav__list-item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			append(button, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			append(button, t0);
			append(button, t1);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (!current || dirty & /*page*/ 1) set_data(t1, /*page*/ ctx[0]);

			if (!current || dirty & /*page*/ 1) {
				attr(button, "data-page", /*page*/ ctx[0]);
			}

			if (!current || dirty & /*active*/ 2 && button_aria_current_value !== (button_aria_current_value = /*active*/ ctx[1] ? "page" : undefined)) {
				attr(button, "aria-current", button_aria_current_value);
			}

			if (dirty & /*active*/ 2) {
				toggle_class(button, "bx--pagination-nav__page--active", /*active*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$1_($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { page = 0 } = $$props;
	let { active = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("page" in $$props) $$invalidate(0, page = $$props.page);
		if ("active" in $$props) $$invalidate(1, active = $$props.active);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	return [page, active, $$scope, slots, click_handler];
}

class PaginationItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1_, create_fragment$1_, safe_not_equal, { page: 0, active: 1 });
	}
}

/* node_modules/carbon-icons-svelte/lib/OverflowMenuHorizontal16/OverflowMenuHorizontal16.svelte generated by Svelte v3.32.1 */

function create_if_block$1d(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$B(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1d(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1d(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1$(ctx) {
	let svg;
	let circle0;
	let circle1;
	let circle2;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$B(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "OverflowMenuHorizontal16"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			circle2 = svg_element("circle");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(circle0, "cx", "8");
			attr(circle0, "cy", "16");
			attr(circle0, "r", "2");
			attr(circle1, "cx", "16");
			attr(circle1, "cy", "16");
			attr(circle1, "r", "2");
			attr(circle2, "cx", "24");
			attr(circle2, "cy", "16");
			attr(circle2, "r", "2");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, circle0);
			append(svg, circle1);
			append(svg, circle2);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "OverflowMenuHorizontal16"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1$($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class OverflowMenuHorizontal16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1$, create_fragment$1$, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/PaginationNav/PaginationOverflow.svelte generated by Svelte v3.32.1 */

function get_each_context$b(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (47:22) 
function create_if_block_1$q(ctx) {
	let paginationitem;
	let current;

	paginationitem = new PaginationItem({
			props: {
				page: /*fromIndex*/ ctx[0] + 1,
				$$slots: { default: [create_default_slot$k] },
				$$scope: { ctx }
			}
		});

	paginationitem.$on("click", /*click_handler*/ ctx[5]);

	return {
		c() {
			create_component(paginationitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationitem_changes = {};
			if (dirty & /*fromIndex*/ 1) paginationitem_changes.page = /*fromIndex*/ ctx[0] + 1;

			if (dirty & /*$$scope*/ 512) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};
}

// (21:0) {#if count > 1}
function create_if_block$1e(ctx) {
	let li;
	let div1;
	let select;
	let option;
	let t;
	let div0;
	let overflowmenuhorizontal16;
	let current;
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*count*/ ctx[1] }, func$4);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
	}

	overflowmenuhorizontal16 = new OverflowMenuHorizontal16({
			props: { class: "bx--pagination-nav__select-icon" }
		});

	return {
		c() {
			li = element("li");
			div1 = element("div");
			select = element("select");
			option = element("option");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			div0 = element("div");
			create_component(overflowmenuhorizontal16.$$.fragment);
			option.__value = "";
			option.value = option.__value;
			option.hidden = true;
			attr(select, "aria-label", "Select Page number");
			toggle_class(select, "bx--pagination-nav__page", true);
			toggle_class(select, "bx--pagination-nav__page--select", true);
			toggle_class(div0, "bx--pagination-nav__select-icon-wrapper", true);
			toggle_class(div1, "bx--pagination-nav__select", true);
			toggle_class(li, "bx--pagination-nav__list-item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div1);
			append(div1, select);
			append(select, option);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*value*/ ctx[2]);
			append(div1, t);
			append(div1, div0);
			mount_component(overflowmenuhorizontal16, div0, null);
			current = true;

			if (!mounted) {
				dispose = listen(select, "change", /*change_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*fromIndex, Array, count*/ 3) {
				each_value = Array.from({ length: /*count*/ ctx[1] }, func$4);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$b(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$b(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*value, fromIndex, Array, count*/ 7) {
				select_option(select, /*value*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(overflowmenuhorizontal16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overflowmenuhorizontal16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_each(each_blocks, detaching);
			destroy_component(overflowmenuhorizontal16);
			mounted = false;
			dispose();
		}
	};
}

// (48:2) <PaginationItem     page="{fromIndex + 1}"     on:click="{() => {       dispatch('select', { index: fromIndex });     }}"   >
function create_default_slot$k(ctx) {
	let t;

	return {
		c() {
			t = text("Page");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (36:8) {#each Array.from({ length: count }, (_, i) => i) as i}
function create_each_block$b(ctx) {
	let option;
	let t0_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1 + "";
	let t0;
	let t1;
	let option_value_value;
	let option_data_page_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			option.__value = option_value_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6];
			option.value = option.__value;
			attr(option, "data-page", option_data_page_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1);
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*fromIndex, count*/ 3 && t0_value !== (t0_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1 + "")) set_data(t0, t0_value);

			if (dirty & /*fromIndex, count*/ 3 && option_value_value !== (option_value_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}

			if (dirty & /*fromIndex, count*/ 3 && option_data_page_value !== (option_data_page_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1)) {
				attr(option, "data-page", option_data_page_value);
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment$20(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1e, create_if_block_1$q];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*count*/ ctx[1] > 1) return 0;
		if (/*count*/ ctx[1] === 1) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

const func$4 = (_, i) => i;

function instance$20($$self, $$props, $$invalidate) {
	let { fromIndex = 0 } = $$props;
	let { count = 0 } = $$props;
	const dispatch = createEventDispatcher();
	let value = "";

	const change_handler = ({ target }) => {
		$$invalidate(2, value = "");
		dispatch("select", { index: Number(target.value) });
	};

	const click_handler = () => {
		dispatch("select", { index: fromIndex });
	};

	$$self.$$set = $$props => {
		if ("fromIndex" in $$props) $$invalidate(0, fromIndex = $$props.fromIndex);
		if ("count" in $$props) $$invalidate(1, count = $$props.count);
	};

	return [fromIndex, count, value, dispatch, change_handler, click_handler];
}

class PaginationOverflow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$20, create_fragment$20, safe_not_equal, { fromIndex: 0, count: 1 });
	}
}

/* src/PaginationNav/PaginationNav.svelte generated by Svelte v3.32.1 */

function get_each_context$c(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

// (91:4) {#if fit > MIN || (fit <= MIN && page <= 1)}
function create_if_block_1$r(ctx) {
	let paginationitem;
	let current;

	paginationitem = new PaginationItem({
			props: {
				page: 1,
				active: /*page*/ ctx[0] === 0,
				$$slots: { default: [create_default_slot_2$4] },
				$$scope: { ctx }
			}
		});

	paginationitem.$on("click", /*click_handler_1*/ ctx[14]);

	return {
		c() {
			create_component(paginationitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationitem_changes = {};
			if (dirty & /*page*/ 1) paginationitem_changes.active = /*page*/ ctx[0] === 0;

			if (dirty & /*$$scope, page*/ 8388609) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};
}

// (92:6) <PaginationItem         page="{1}"         active="{page === 0}"         on:click="{() => (page = 0)}"       >
function create_default_slot_2$4(ctx) {
	let t_value = (/*page*/ ctx[0] === 0 ? "Active, Page" : "Page") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*page*/ 1 && t_value !== (t_value = (/*page*/ ctx[0] === 0 ? "Active, Page" : "Page") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (106:6) <PaginationItem         page="{item + 1}"         active="{page === item}"         on:click="{() => (page = item)}"       >
function create_default_slot_1$8(ctx) {
	let t_value = (/*page*/ ctx[0] === /*item*/ ctx[20]
	? "Active, Page"
	: "Page") + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*page, items*/ 513 && t_value !== (t_value = (/*page*/ ctx[0] === /*item*/ ctx[20]
			? "Active, Page"
			: "Page") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (105:4) {#each items as item}
function create_each_block$c(ctx) {
	let paginationitem;
	let current;

	function click_handler_2() {
		return /*click_handler_2*/ ctx[16](/*item*/ ctx[20]);
	}

	paginationitem = new PaginationItem({
			props: {
				page: /*item*/ ctx[20] + 1,
				active: /*page*/ ctx[0] === /*item*/ ctx[20],
				$$slots: { default: [create_default_slot_1$8] },
				$$scope: { ctx }
			}
		});

	paginationitem.$on("click", click_handler_2);

	return {
		c() {
			create_component(paginationitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const paginationitem_changes = {};
			if (dirty & /*items*/ 512) paginationitem_changes.page = /*item*/ ctx[20] + 1;
			if (dirty & /*page, items*/ 513) paginationitem_changes.active = /*page*/ ctx[0] === /*item*/ ctx[20];

			if (dirty & /*$$scope, page, items*/ 8389121) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};
}

// (121:4) {#if total > 1}
function create_if_block$1f(ctx) {
	let paginationitem;
	let current;

	paginationitem = new PaginationItem({
			props: {
				page: /*total*/ ctx[1],
				active: /*page*/ ctx[0] === /*total*/ ctx[1] - 1,
				$$slots: { default: [create_default_slot$l] },
				$$scope: { ctx }
			}
		});

	paginationitem.$on("click", /*click_handler_3*/ ctx[18]);

	return {
		c() {
			create_component(paginationitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationitem_changes = {};
			if (dirty & /*total*/ 2) paginationitem_changes.page = /*total*/ ctx[1];
			if (dirty & /*page, total*/ 3) paginationitem_changes.active = /*page*/ ctx[0] === /*total*/ ctx[1] - 1;

			if (dirty & /*$$scope, page, total*/ 8388611) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};
}

// (122:6) <PaginationItem         page="{total}"         active="{page === total - 1}"         on:click="{() => (page = total - 1)}"       >
function create_default_slot$l(ctx) {
	let t_value = (/*page*/ ctx[0] === /*total*/ ctx[1] - 1
	? "Active, Page"
	: "Page") + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*page, total*/ 3 && t_value !== (t_value = (/*page*/ ctx[0] === /*total*/ ctx[1] - 1
			? "Active, Page"
			: "Page") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$21(ctx) {
	let nav;
	let ul;
	let li0;
	let button0;
	let t0;
	let t1;
	let paginationoverflow0;
	let t2;
	let t3;
	let paginationoverflow1;
	let t4;
	let t5;
	let li1;
	let button1;
	let t6;
	let div;
	let t7;
	let t8_value = /*page*/ ctx[0] + 1 + "";
	let t8;
	let t9;
	let t10;
	let current;

	button0 = new Button({
			props: {
				hasIconOnly: true,
				kind: "ghost",
				tooltipAlignment: "center",
				tooltipPosition: "bottom",
				iconDescription: /*backwardText*/ ctx[4],
				disabled: !/*loop*/ ctx[2] && /*page*/ ctx[0] === 0,
				icon: CaretLeft16
			}
		});

	button0.$on("click", /*click_handler*/ ctx[13]);
	let if_block0 = (/*fit*/ ctx[7] > MIN || /*fit*/ ctx[7] <= MIN && /*page*/ ctx[0] <= 1) && create_if_block_1$r(ctx);

	paginationoverflow0 = new PaginationOverflow({
			props: {
				fromIndex: /*startOffset*/ ctx[8],
				count: /*front*/ ctx[5]
			}
		});

	paginationoverflow0.$on("select", /*select_handler*/ ctx[15]);
	let each_value = /*items*/ ctx[9];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	paginationoverflow1 = new PaginationOverflow({
			props: {
				fromIndex: /*total*/ ctx[1] - /*back*/ ctx[6] - 1,
				count: /*back*/ ctx[6]
			}
		});

	paginationoverflow1.$on("select", /*select_handler_1*/ ctx[17]);
	let if_block1 = /*total*/ ctx[1] > 1 && create_if_block$1f(ctx);

	button1 = new Button({
			props: {
				hasIconOnly: true,
				kind: "ghost",
				tooltipAlignment: "center",
				tooltipPosition: "bottom",
				iconDescription: /*forwardText*/ ctx[3],
				disabled: !/*loop*/ ctx[2] && /*page*/ ctx[0] === /*total*/ ctx[1] - 1,
				icon: CaretRight16
			}
		});

	button1.$on("click", /*click_handler_4*/ ctx[19]);
	let nav_levels = [{ "aria-label": "pagination" }, /*$$restProps*/ ctx[11]];
	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	return {
		c() {
			nav = element("nav");
			ul = element("ul");
			li0 = element("li");
			create_component(button0.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			create_component(paginationoverflow0.$$.fragment);
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			create_component(paginationoverflow1.$$.fragment);
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			li1 = element("li");
			create_component(button1.$$.fragment);
			t6 = space();
			div = element("div");
			t7 = text("Page\n    ");
			t8 = text(t8_value);
			t9 = text("\n    of\n    ");
			t10 = text(/*total*/ ctx[1]);
			toggle_class(li0, "bx--pagination-nav__list-item", true);
			toggle_class(li1, "bx--pagination-nav__list-item", true);
			toggle_class(ul, "bx--pagination-nav__list", true);
			attr(div, "aria-live", "polite");
			attr(div, "aria-atomic", "true");
			toggle_class(div, "bx--pagination-nav__accessibility-label", true);
			set_attributes(nav, nav_data);
			toggle_class(nav, "bx--pagination-nav", true);
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ul);
			append(ul, li0);
			mount_component(button0, li0, null);
			append(ul, t0);
			if (if_block0) if_block0.m(ul, null);
			append(ul, t1);
			mount_component(paginationoverflow0, ul, null);
			append(ul, t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append(ul, t3);
			mount_component(paginationoverflow1, ul, null);
			append(ul, t4);
			if (if_block1) if_block1.m(ul, null);
			append(ul, t5);
			append(ul, li1);
			mount_component(button1, li1, null);
			append(nav, t6);
			append(nav, div);
			append(div, t7);
			append(div, t8);
			append(div, t9);
			append(div, t10);
			current = true;
		},
		p(ctx, [dirty]) {
			const button0_changes = {};
			if (dirty & /*backwardText*/ 16) button0_changes.iconDescription = /*backwardText*/ ctx[4];
			if (dirty & /*loop, page*/ 5) button0_changes.disabled = !/*loop*/ ctx[2] && /*page*/ ctx[0] === 0;
			button0.$set(button0_changes);

			if (/*fit*/ ctx[7] > MIN || /*fit*/ ctx[7] <= MIN && /*page*/ ctx[0] <= 1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*fit, page*/ 129) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$r(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(ul, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			const paginationoverflow0_changes = {};
			if (dirty & /*startOffset*/ 256) paginationoverflow0_changes.fromIndex = /*startOffset*/ ctx[8];
			if (dirty & /*front*/ 32) paginationoverflow0_changes.count = /*front*/ ctx[5];
			paginationoverflow0.$set(paginationoverflow0_changes);

			if (dirty & /*items, page*/ 513) {
				each_value = /*items*/ ctx[9];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$c(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$c(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, t3);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const paginationoverflow1_changes = {};
			if (dirty & /*total, back*/ 66) paginationoverflow1_changes.fromIndex = /*total*/ ctx[1] - /*back*/ ctx[6] - 1;
			if (dirty & /*back*/ 64) paginationoverflow1_changes.count = /*back*/ ctx[6];
			paginationoverflow1.$set(paginationoverflow1_changes);

			if (/*total*/ ctx[1] > 1) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*total*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$1f(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(ul, t5);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const button1_changes = {};
			if (dirty & /*forwardText*/ 8) button1_changes.iconDescription = /*forwardText*/ ctx[3];
			if (dirty & /*loop, page, total*/ 7) button1_changes.disabled = !/*loop*/ ctx[2] && /*page*/ ctx[0] === /*total*/ ctx[1] - 1;
			button1.$set(button1_changes);
			if ((!current || dirty & /*page*/ 1) && t8_value !== (t8_value = /*page*/ ctx[0] + 1 + "")) set_data(t8, t8_value);
			if (!current || dirty & /*total*/ 2) set_data(t10, /*total*/ ctx[1]);

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				{ "aria-label": "pagination" },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
			]));

			toggle_class(nav, "bx--pagination-nav", true);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(if_block0);
			transition_in(paginationoverflow0.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(paginationoverflow1.$$.fragment, local);
			transition_in(if_block1);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(if_block0);
			transition_out(paginationoverflow0.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(paginationoverflow1.$$.fragment, local);
			transition_out(if_block1);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			destroy_component(button0);
			if (if_block0) if_block0.d();
			destroy_component(paginationoverflow0);
			destroy_each(each_blocks, detaching);
			destroy_component(paginationoverflow1);
			if (if_block1) if_block1.d();
			destroy_component(button1);
		}
	};
}

const MIN = 4;

function instance$21($$self, $$props, $$invalidate) {
	let fit;
	let startOffset;
	let items;
	const omit_props_names = ["page","total","shown","loop","forwardText","backwardText"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { page = 0 } = $$props;
	let { total = 10 } = $$props;
	let { shown = 10 } = $$props;
	let { loop = false } = $$props;
	let { forwardText = "Next page" } = $$props;
	let { backwardText = "Previous page" } = $$props;
	const dispatch = createEventDispatcher();

	afterUpdate(() => {
		dispatch("change", { page });
	});

	let front = 0;
	let back = 0;

	const click_handler = () => {
		if (page - 1 < 0) {
			if (loop) $$invalidate(0, page = total - 1);
		} else {
			$$invalidate(0, page--, page);
		}

		dispatch("click:button--previous", { page });
	};

	const click_handler_1 = () => $$invalidate(0, page = 0);
	const select_handler = ({ detail }) => $$invalidate(0, page = detail.index);
	const click_handler_2 = item => $$invalidate(0, page = item);

	const select_handler_1 = ({ detail }) => {
		$$invalidate(0, page = detail.index);
	};

	const click_handler_3 = () => $$invalidate(0, page = total - 1);

	const click_handler_4 = () => {
		if (page + 1 >= total) {
			if (loop) $$invalidate(0, page = 0);
		} else {
			$$invalidate(0, page++, page);
		}

		dispatch("click:button--next", { page });
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("page" in $$new_props) $$invalidate(0, page = $$new_props.page);
		if ("total" in $$new_props) $$invalidate(1, total = $$new_props.total);
		if ("shown" in $$new_props) $$invalidate(12, shown = $$new_props.shown);
		if ("loop" in $$new_props) $$invalidate(2, loop = $$new_props.loop);
		if ("forwardText" in $$new_props) $$invalidate(3, forwardText = $$new_props.forwardText);
		if ("backwardText" in $$new_props) $$invalidate(4, backwardText = $$new_props.backwardText);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*shown*/ 4096) {
			 $$invalidate(7, fit = shown >= MIN ? shown : MIN);
		}

		if ($$self.$$.dirty & /*fit, page*/ 129) {
			 $$invalidate(8, startOffset = fit <= MIN && page > 1 ? 0 : 1);
		}

		if ($$self.$$.dirty & /*fit, total*/ 130) {
			 if (fit >= total) {
				$$invalidate(5, front = 0);
				$$invalidate(6, back = 0);
			}
		}

		if ($$self.$$.dirty & /*fit, total, page, front, back*/ 227) {
			 if (fit < total) {
				const split = Math.ceil(fit / 2) - 1;
				$$invalidate(5, front = page - split + 1);
				$$invalidate(6, back = total - page - (fit - split) + 1);

				if (front <= 1) {
					$$invalidate(6, back -= front <= 0 ? Math.abs(front) + 1 : 0);
					$$invalidate(5, front = 0);
				}

				if (back <= 1) {
					$$invalidate(5, front -= back <= 0 ? Math.abs(back) + 1 : 0);
					$$invalidate(6, back = 0);
				}
			}
		}

		if ($$self.$$.dirty & /*total, startOffset, front, back*/ 354) {
			 $$invalidate(9, items = Array.from({ length: total }).map((e, i) => i).slice(startOffset + front, (back + 1) * -1));
		}
	};

	return [
		page,
		total,
		loop,
		forwardText,
		backwardText,
		front,
		back,
		fit,
		startOffset,
		items,
		dispatch,
		$$restProps,
		shown,
		click_handler,
		click_handler_1,
		select_handler,
		click_handler_2,
		select_handler_1,
		click_handler_3,
		click_handler_4
	];
}

class PaginationNav extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$21, create_fragment$21, safe_not_equal, {
			page: 0,
			total: 1,
			shown: 12,
			loop: 2,
			forwardText: 3,
			backwardText: 4
		});
	}
}

/* src/Popover/Popover.svelte generated by Svelte v3.32.1 */

function create_fragment$22(ctx) {
	let div1;
	let div0;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	let div1_levels = [/*$$restProps*/ ctx[9]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div0, "bx--popover-contents", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--popover", true);
			toggle_class(div1, "bx--popover--caret", /*caret*/ ctx[2]);
			toggle_class(div1, "bx--popover--light", /*light*/ ctx[4]);
			toggle_class(div1, "bx--popover--high-contrast", /*highContrast*/ ctx[5]);
			toggle_class(div1, "bx--popover--top", /*align*/ ctx[3] === "top");
			toggle_class(div1, "bx--popover--top-left", /*align*/ ctx[3] === "top-left");
			toggle_class(div1, "bx--popover--top-right", /*align*/ ctx[3] === "top-right");
			toggle_class(div1, "bx--popover--bottom", /*align*/ ctx[3] === "bottom");
			toggle_class(div1, "bx--popover--bottom-left", /*align*/ ctx[3] === "bottom-left");
			toggle_class(div1, "bx--popover--bottom-right", /*align*/ ctx[3] === "bottom-right");
			toggle_class(div1, "bx--popover--left", /*align*/ ctx[3] === "left");
			toggle_class(div1, "bx--popover--left-bottom", /*align*/ ctx[3] === "left-bottom");
			toggle_class(div1, "bx--popover--left-top", /*align*/ ctx[3] === "left-top");
			toggle_class(div1, "bx--popover--right", /*align*/ ctx[3] === "right");
			toggle_class(div1, "bx--popover--right-bottom", /*align*/ ctx[3] === "right-bottom");
			toggle_class(div1, "bx--popover--right-top", /*align*/ ctx[3] === "right-top");
			toggle_class(div1, "bx--popover--open", /*open*/ ctx[0]);
			toggle_class(div1, "bx--popover--relative", /*relative*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div1_binding*/ ctx[13](div1);
			current = true;

			if (!mounted) {
				dispose = listen(window, "click", /*click_handler*/ ctx[12]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]]));
			toggle_class(div1, "bx--popover", true);
			toggle_class(div1, "bx--popover--caret", /*caret*/ ctx[2]);
			toggle_class(div1, "bx--popover--light", /*light*/ ctx[4]);
			toggle_class(div1, "bx--popover--high-contrast", /*highContrast*/ ctx[5]);
			toggle_class(div1, "bx--popover--top", /*align*/ ctx[3] === "top");
			toggle_class(div1, "bx--popover--top-left", /*align*/ ctx[3] === "top-left");
			toggle_class(div1, "bx--popover--top-right", /*align*/ ctx[3] === "top-right");
			toggle_class(div1, "bx--popover--bottom", /*align*/ ctx[3] === "bottom");
			toggle_class(div1, "bx--popover--bottom-left", /*align*/ ctx[3] === "bottom-left");
			toggle_class(div1, "bx--popover--bottom-right", /*align*/ ctx[3] === "bottom-right");
			toggle_class(div1, "bx--popover--left", /*align*/ ctx[3] === "left");
			toggle_class(div1, "bx--popover--left-bottom", /*align*/ ctx[3] === "left-bottom");
			toggle_class(div1, "bx--popover--left-top", /*align*/ ctx[3] === "left-top");
			toggle_class(div1, "bx--popover--right", /*align*/ ctx[3] === "right");
			toggle_class(div1, "bx--popover--right-bottom", /*align*/ ctx[3] === "right-bottom");
			toggle_class(div1, "bx--popover--right-top", /*align*/ ctx[3] === "right-top");
			toggle_class(div1, "bx--popover--open", /*open*/ ctx[0]);
			toggle_class(div1, "bx--popover--relative", /*relative*/ ctx[6]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div1_binding*/ ctx[13](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$22($$self, $$props, $$invalidate) {
	const omit_props_names = ["open","closeOnOutsideClick","caret","align","light","highContrast","relative"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { open = false } = $$props;
	let { closeOnOutsideClick = false } = $$props;
	let { caret = false } = $$props;
	let { align = "top" } = $$props;
	let { light = false } = $$props;
	let { highContrast = false } = $$props;
	let { relative = false } = $$props;
	const dispatch = createEventDispatcher();
	let ref = null;

	const click_handler = e => {
		if (!open) return;

		if (e.target.contains(ref)) {
			dispatch("click:outside");
			if (closeOnOutsideClick) $$invalidate(0, open = false);
		}
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(7, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("closeOnOutsideClick" in $$new_props) $$invalidate(1, closeOnOutsideClick = $$new_props.closeOnOutsideClick);
		if ("caret" in $$new_props) $$invalidate(2, caret = $$new_props.caret);
		if ("align" in $$new_props) $$invalidate(3, align = $$new_props.align);
		if ("light" in $$new_props) $$invalidate(4, light = $$new_props.light);
		if ("highContrast" in $$new_props) $$invalidate(5, highContrast = $$new_props.highContrast);
		if ("relative" in $$new_props) $$invalidate(6, relative = $$new_props.relative);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	return [
		open,
		closeOnOutsideClick,
		caret,
		align,
		light,
		highContrast,
		relative,
		ref,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		div1_binding
	];
}

class Popover extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$22, create_fragment$22, safe_not_equal, {
			open: 0,
			closeOnOutsideClick: 1,
			caret: 2,
			align: 3,
			light: 4,
			highContrast: 5,
			relative: 6
		});
	}
}

/* src/ProgressIndicator/ProgressIndicator.svelte generated by Svelte v3.32.1 */

function create_fragment$23(ctx) {
	let ul;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let ul_levels = [/*$$restProps*/ ctx[3]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--progress", true);
			toggle_class(ul, "bx--progress--vertical", /*vertical*/ ctx[0]);
			toggle_class(ul, "bx--progress--space-equal", /*spaceEqually*/ ctx[1] && !/*vertical*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler*/ ctx[8]),
					listen(ul, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(ul, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(ul, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(ul, "bx--progress", true);
			toggle_class(ul, "bx--progress--vertical", /*vertical*/ ctx[0]);
			toggle_class(ul, "bx--progress--space-equal", /*spaceEqually*/ ctx[1] && !/*vertical*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$23($$self, $$props, $$invalidate) {
	const omit_props_names = ["currentIndex","vertical","spaceEqually","preventChangeOnClick"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $stepsById;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { currentIndex = 0 } = $$props;
	let { vertical = false } = $$props;
	let { spaceEqually = false } = $$props;
	let { preventChangeOnClick = false } = $$props;
	const dispatch = createEventDispatcher();
	const steps = writable([]);
	const stepsById = derived(steps, $ => $.reduce((a, c) => ({ ...a, [c.id]: c }), {}));
	component_subscribe($$self, stepsById, value => $$invalidate(12, $stepsById = value));

	setContext("ProgressIndicator", {
		steps,
		stepsById,
		add: step => {
			steps.update(_ => {
				if (step.id in $stepsById) {
					return _.map(_step => {
						if (_step.id === step.id) return { ..._step, ...step };
						return _step;
					});
				}

				return [
					..._,
					{
						...step,
						index: _.length,
						current: _.length === currentIndex,
						complete: step.complete
					}
				];
			});
		},
		change: index => {
			if (preventChangeOnClick) return;
			$$invalidate(4, currentIndex = index);

			/** @event {number} change */
			dispatch("change", index);
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("currentIndex" in $$new_props) $$invalidate(4, currentIndex = $$new_props.currentIndex);
		if ("vertical" in $$new_props) $$invalidate(0, vertical = $$new_props.vertical);
		if ("spaceEqually" in $$new_props) $$invalidate(1, spaceEqually = $$new_props.spaceEqually);
		if ("preventChangeOnClick" in $$new_props) $$invalidate(5, preventChangeOnClick = $$new_props.preventChangeOnClick);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*currentIndex*/ 16) {
			 steps.update(_ => _.map((step, i) => ({ ...step, current: i === currentIndex })));
		}
	};

	return [
		vertical,
		spaceEqually,
		stepsById,
		$$restProps,
		currentIndex,
		preventChangeOnClick,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ProgressIndicator extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$23, create_fragment$23, safe_not_equal, {
			currentIndex: 4,
			vertical: 0,
			spaceEqually: 1,
			preventChangeOnClick: 5
		});
	}
}

/* src/ProgressIndicator/ProgressIndicatorSkeleton.svelte generated by Svelte v3.32.1 */

function get_each_context$d(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (19:2) {#each Array.from({ length: count }, (_, i) => i) as item, i (item)}
function create_each_block$d(key_1, ctx) {
	let li;
	let div;
	let svg;
	let path;
	let t0;
	let p;
	let t1;
	let span;
	let t2;

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			div = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			p = element("p");
			t1 = space();
			span = element("span");
			t2 = space();
			attr(path, "d", "M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0");
			toggle_class(p, "bx--progress-label", true);
			toggle_class(span, "bx--progress-line", true);
			toggle_class(div, "bx--progress-step-button", true);
			toggle_class(div, "bx--progress-step-button--unclickable", true);
			toggle_class(li, "bx--progress-step", true);
			toggle_class(li, "bx--progress-step--incomplete", true);
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);
			append(div, svg);
			append(svg, path);
			append(div, t0);
			append(div, p);
			append(div, t1);
			append(div, span);
			append(li, t2);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment$24(ctx) {
	let ul;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*count*/ ctx[1] }, func$5);
	const get_key = ctx => /*item*/ ctx[7];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$d(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$d(key));
	}

	let ul_levels = [/*$$restProps*/ ctx[2]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--progress", true);
			toggle_class(ul, "bx--progress--vertical", /*vertical*/ ctx[0]);
			toggle_class(ul, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler*/ ctx[3]),
					listen(ul, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(ul, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(ul, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 2) {
				each_value = Array.from({ length: /*count*/ ctx[1] }, func$5);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, destroy_block, create_each_block$d, null, get_each_context$d);
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(ul, "bx--progress", true);
			toggle_class(ul, "bx--progress--vertical", /*vertical*/ ctx[0]);
			toggle_class(ul, "bx--skeleton", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$5 = (_, i) => i;

function instance$24($$self, $$props, $$invalidate) {
	const omit_props_names = ["vertical","count"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { vertical = false } = $$props;
	let { count = 4 } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("vertical" in $$new_props) $$invalidate(0, vertical = $$new_props.vertical);
		if ("count" in $$new_props) $$invalidate(1, count = $$new_props.count);
	};

	return [
		vertical,
		count,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ProgressIndicatorSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$24, create_fragment$24, safe_not_equal, { vertical: 0, count: 1 });
	}
}

/* node_modules/carbon-icons-svelte/lib/CheckmarkOutline16/CheckmarkOutline16.svelte generated by Svelte v3.32.1 */

function create_if_block$1g(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$C(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1g(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1g(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$25(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$C(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "CheckmarkOutline16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M14 21.414L9 16.413 10.413 15 14 18.586 21.585 11 23 12.415 14 21.414z");
			attr(path1, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,26A12,12,0,1,1,28,16,12,12,0,0,1,16,28Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "CheckmarkOutline16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$25($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class CheckmarkOutline16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$25, create_fragment$25, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/Warning16/Warning16.svelte generated by Svelte v3.32.1 */

function create_if_block$1h(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$D(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1h(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1h(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$26(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$D(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Warning16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M8,1C4.1,1,1,4.1,1,8s3.1,7,7,7s7-3.1,7-7S11.9,1,8,1z M8,14c-3.3,0-6-2.7-6-6s2.7-6,6-6s6,2.7,6,6S11.3,14,8,14z");
			attr(path1, "d", "M7.5 4H8.5V9H7.5zM8 10.2c-.4 0-.8.3-.8.8s.3.8.8.8c.4 0 .8-.3.8-.8S8.4 10.2 8 10.2z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Warning16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$26($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Warning16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$26, create_fragment$26, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/ProgressIndicator/ProgressStep.svelte generated by Svelte v3.32.1 */
const get_default_slot_changes$5 = dirty => ({});
const get_default_slot_context$5 = ctx => ({ props: { class: "bx--progress-label" } });

// (91:4) {:else}
function create_else_block$p(ctx) {
	let svg;
	let title;
	let t;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			title = svg_element("title");
			t = text(/*description*/ ctx[4]);
			path = svg_element("path");
			attr(path, "d", "M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 13c-3.3\n          0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, title);
			append(title, t);
			append(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 16) set_data(t, /*description*/ ctx[4]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (89:23) 
function create_if_block_3$e(ctx) {
	let checkmarkoutline16;
	let current;
	checkmarkoutline16 = new CheckmarkOutline16({ props: { title: /*description*/ ctx[4] } });

	return {
		c() {
			create_component(checkmarkoutline16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkmarkoutline16, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkmarkoutline16_changes = {};
			if (dirty & /*description*/ 16) checkmarkoutline16_changes.title = /*description*/ ctx[4];
			checkmarkoutline16.$set(checkmarkoutline16_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkmarkoutline16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkoutline16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkmarkoutline16, detaching);
		}
	};
}

// (84:22) 
function create_if_block_2$g(ctx) {
	let svg;
	let path;
	let title;
	let t;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			title = svg_element("title");
			t = text(/*description*/ ctx[4]);
			attr(path, "d", "M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
			append(svg, title);
			append(title, t);
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 16) set_data(t, /*description*/ ctx[4]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (82:4) {#if invalid}
function create_if_block_1$s(ctx) {
	let warning16;
	let current;

	warning16 = new Warning16({
			props: {
				class: "bx--progress__warning",
				title: /*description*/ ctx[4]
			}
		});

	return {
		c() {
			create_component(warning16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warning16, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const warning16_changes = {};
			if (dirty & /*description*/ 16) warning16_changes.title = /*description*/ ctx[4];
			warning16.$set(warning16_changes);
		},
		i(local) {
			if (current) return;
			transition_in(warning16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warning16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warning16, detaching);
		}
	};
}

// (100:52)        
function fallback_block$E(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*label*/ ctx[5]);
			toggle_class(p, "bx--progress-label", true);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 32) set_data(t, /*label*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (103:4) {#if secondaryLabel}
function create_if_block$1i(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*secondaryLabel*/ ctx[6]);
			toggle_class(p, "bx--progress-optional", true);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*secondaryLabel*/ 64) set_data(t, /*secondaryLabel*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment$27(ctx) {
	let li;
	let button;
	let current_block_type_index;
	let if_block0;
	let t0;
	let t1;
	let t2;
	let span;
	let button_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1$s, create_if_block_2$g, create_if_block_3$e, create_else_block$p];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*invalid*/ ctx[3]) return 0;
		if (/*current*/ ctx[1]) return 1;
		if (/*complete*/ ctx[0]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], get_default_slot_context$5);
	const default_slot_or_fallback = default_slot || fallback_block$E(ctx);
	let if_block1 = /*secondaryLabel*/ ctx[6] && create_if_block$1i(ctx);

	let li_levels = [
		{ "aria-disabled": /*disabled*/ ctx[2] },
		{ id: /*id*/ ctx[7] },
		/*$$restProps*/ ctx[10]
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			button = element("button");
			if_block0.c();
			t0 = space();
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			span = element("span");
			toggle_class(span, "bx--progress-line", true);
			button.disabled = /*disabled*/ ctx[2];
			attr(button, "aria-disabled", /*disabled*/ ctx[2]);
			attr(button, "tabindex", button_tabindex_value = !/*current*/ ctx[1] && !/*disabled*/ ctx[2] ? "0" : "-1");
			toggle_class(button, "bx--progress-step-button", true);
			toggle_class(button, "bx--progress-step-button--unclickable", /*current*/ ctx[1]);
			set_attributes(li, li_data);
			toggle_class(li, "bx--progress-step", true);
			toggle_class(li, "bx--progress-step--current", /*current*/ ctx[1]);
			toggle_class(li, "bx--progress-step--complete", /*complete*/ ctx[0]);
			toggle_class(li, "bx--progress-step--incomplete", !/*complete*/ ctx[0] && !/*current*/ ctx[1]);
			toggle_class(li, "bx--progress-step--disabled", /*disabled*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			if_blocks[current_block_type_index].m(button, null);
			append(button, t0);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			append(button, t1);
			if (if_block1) if_block1.m(button, null);
			append(button, t2);
			append(button, span);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[13]),
					listen(button, "click", /*click_handler_1*/ ctx[18]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[16]),
					listen(button, "keydown", /*keydown_handler*/ ctx[17]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(button, t0);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, get_default_slot_changes$5, get_default_slot_context$5);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*label*/ 32) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (/*secondaryLabel*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1i(ctx);
					if_block1.c();
					if_block1.m(button, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty & /*disabled*/ 4) {
				button.disabled = /*disabled*/ ctx[2];
			}

			if (!current || dirty & /*disabled*/ 4) {
				attr(button, "aria-disabled", /*disabled*/ ctx[2]);
			}

			if (!current || dirty & /*current, disabled*/ 6 && button_tabindex_value !== (button_tabindex_value = !/*current*/ ctx[1] && !/*disabled*/ ctx[2] ? "0" : "-1")) {
				attr(button, "tabindex", button_tabindex_value);
			}

			if (dirty & /*current*/ 2) {
				toggle_class(button, "bx--progress-step-button--unclickable", /*current*/ ctx[1]);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty & /*disabled*/ 4) && { "aria-disabled": /*disabled*/ ctx[2] },
				(!current || dirty & /*id*/ 128) && { id: /*id*/ ctx[7] },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(li, "bx--progress-step", true);
			toggle_class(li, "bx--progress-step--current", /*current*/ ctx[1]);
			toggle_class(li, "bx--progress-step--complete", /*complete*/ ctx[0]);
			toggle_class(li, "bx--progress-step--incomplete", !/*complete*/ ctx[0] && !/*current*/ ctx[1]);
			toggle_class(li, "bx--progress-step--disabled", /*disabled*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$27($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"complete","current","disabled","invalid","description","label","secondaryLabel","id"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { complete = false } = $$props;
	let { current = false } = $$props;
	let { disabled = false } = $$props;
	let { invalid = false } = $$props;
	let { description = "" } = $$props;
	let { label = "" } = $$props;
	let { secondaryLabel = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let step = {};
	const { stepsById, add, change } = getContext("ProgressIndicator");

	const unsubscribe = stepsById.subscribe(value => {
		if (value[id]) {
			$$invalidate(8, step = value[id]);
			$$invalidate(1, current = step.current);
			$$invalidate(0, complete = step.complete);
		}
	});

	onMount(() => {
		return () => {
			unsubscribe();
		};
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	const click_handler_1 = () => {
		if (!step.complete) return;
		change(step.index);
	};

	const keydown_handler_1 = e => {
		if (e.key === " " || e.key === "Enter") {
			change(step.index);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("complete" in $$new_props) $$invalidate(0, complete = $$new_props.complete);
		if ("current" in $$new_props) $$invalidate(1, current = $$new_props.current);
		if ("disabled" in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ("invalid" in $$new_props) $$invalidate(3, invalid = $$new_props.invalid);
		if ("description" in $$new_props) $$invalidate(4, description = $$new_props.description);
		if ("label" in $$new_props) $$invalidate(5, label = $$new_props.label);
		if ("secondaryLabel" in $$new_props) $$invalidate(6, secondaryLabel = $$new_props.secondaryLabel);
		if ("id" in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id, complete, disabled*/ 133) {
			 add({ id, complete, disabled });
		}
	};

	return [
		complete,
		current,
		disabled,
		invalid,
		description,
		label,
		secondaryLabel,
		id,
		step,
		change,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler_1,
		keydown_handler_1
	];
}

class ProgressStep extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$27, create_fragment$27, safe_not_equal, {
			complete: 0,
			current: 1,
			disabled: 2,
			invalid: 3,
			description: 4,
			label: 5,
			secondaryLabel: 6,
			id: 7
		});
	}
}

/* src/RadioButtonGroup/RadioButtonGroup.svelte generated by Svelte v3.32.1 */
const get_legendText_slot_changes = dirty => ({});
const get_legendText_slot_context = ctx => ({});

// (85:4) {#if legendText || $$slots.legendText}
function create_if_block$1j(ctx) {
	let legend;
	let current;
	const legendText_slot_template = /*#slots*/ ctx[10].legendText;
	const legendText_slot = create_slot(legendText_slot_template, ctx, /*$$scope*/ ctx[9], get_legendText_slot_context);
	const legendText_slot_or_fallback = legendText_slot || fallback_block$F(ctx);

	return {
		c() {
			legend = element("legend");
			if (legendText_slot_or_fallback) legendText_slot_or_fallback.c();
			toggle_class(legend, "bx--label", true);
		},
		m(target, anchor) {
			insert(target, legend, anchor);

			if (legendText_slot_or_fallback) {
				legendText_slot_or_fallback.m(legend, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (legendText_slot) {
				if (legendText_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(legendText_slot, legendText_slot_template, ctx, /*$$scope*/ ctx[9], dirty, get_legendText_slot_changes, get_legendText_slot_context);
				}
			} else {
				if (legendText_slot_or_fallback && legendText_slot_or_fallback.p && dirty & /*legendText*/ 2) {
					legendText_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(legendText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(legendText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(legend);
			if (legendText_slot_or_fallback) legendText_slot_or_fallback.d(detaching);
		}
	};
}

// (87:32) {legendText}
function fallback_block$F(ctx) {
	let t;

	return {
		c() {
			t = text(/*legendText*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*legendText*/ 2) set_data(t, /*legendText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$28(ctx) {
	let div;
	let fieldset;
	let t;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*legendText*/ ctx[1] || /*$$slots*/ ctx[7].legendText) && create_if_block$1j(ctx);
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let div_levels = [{ id: /*id*/ ctx[4] }, /*$$restProps*/ ctx[6]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			fieldset = element("fieldset");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			fieldset.disabled = /*disabled*/ ctx[0];
			toggle_class(fieldset, "bx--radio-button-group", true);
			toggle_class(fieldset, "bx--radio-button-group--vertical", /*orientation*/ ctx[3] === "vertical");
			toggle_class(fieldset, "bx--radio-button-group--label-left", /*labelPosition*/ ctx[2] === "left");
			toggle_class(fieldset, "bx--radio-button-group--label-right", /*labelPosition*/ ctx[2] === "right");
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, fieldset);
			if (if_block) if_block.m(fieldset, null);
			append(fieldset, t);

			if (default_slot) {
				default_slot.m(fieldset, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[11]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[12]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[13]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*legendText*/ ctx[1] || /*$$slots*/ ctx[7].legendText) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*legendText, $$slots*/ 130) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1j(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(fieldset, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*disabled*/ 1) {
				fieldset.disabled = /*disabled*/ ctx[0];
			}

			if (dirty & /*orientation*/ 8) {
				toggle_class(fieldset, "bx--radio-button-group--vertical", /*orientation*/ ctx[3] === "vertical");
			}

			if (dirty & /*labelPosition*/ 4) {
				toggle_class(fieldset, "bx--radio-button-group--label-left", /*labelPosition*/ ctx[2] === "left");
			}

			if (dirty & /*labelPosition*/ 4) {
				toggle_class(fieldset, "bx--radio-button-group--label-right", /*labelPosition*/ ctx[2] === "right");
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*id*/ 16) && { id: /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(div, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$28($$self, $$props, $$invalidate) {
	const omit_props_names = ["selected","disabled","legendText","labelPosition","orientation","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { selected = undefined } = $$props;
	let { disabled = false } = $$props;
	let { legendText = "" } = $$props;
	let { labelPosition = "right" } = $$props;
	let { orientation = "horizontal" } = $$props;
	let { id = undefined } = $$props;
	const dispatch = createEventDispatcher();
	const selectedValue = writable(selected);
	component_subscribe($$self, selectedValue, value => $$invalidate(15, $selectedValue = value));

	setContext("RadioButtonGroup", {
		selectedValue,
		add: ({ checked, value }) => {
			if (checked) {
				selectedValue.set(value);
			}
		},
		update: value => {
			$$invalidate(8, selected = value);
		}
	});

	onMount(() => {
		set_store_value(selectedValue, $selectedValue = selected, $selectedValue);
	});

	beforeUpdate(() => {
		set_store_value(selectedValue, $selectedValue = selected, $selectedValue);
	});

	selectedValue.subscribe(value => {
		$$invalidate(8, selected = value);
		dispatch("change", value);
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("selected" in $$new_props) $$invalidate(8, selected = $$new_props.selected);
		if ("disabled" in $$new_props) $$invalidate(0, disabled = $$new_props.disabled);
		if ("legendText" in $$new_props) $$invalidate(1, legendText = $$new_props.legendText);
		if ("labelPosition" in $$new_props) $$invalidate(2, labelPosition = $$new_props.labelPosition);
		if ("orientation" in $$new_props) $$invalidate(3, orientation = $$new_props.orientation);
		if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	return [
		disabled,
		legendText,
		labelPosition,
		orientation,
		id,
		selectedValue,
		$$restProps,
		$$slots,
		selected,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class RadioButtonGroup extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$28, create_fragment$28, safe_not_equal, {
			selected: 8,
			disabled: 0,
			legendText: 1,
			labelPosition: 2,
			orientation: 3,
			id: 4
		});
	}
}

/* src/Select/SelectSkeleton.svelte generated by Svelte v3.32.1 */

function create_if_block$1k(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$29(ctx) {
	let div2;
	let t;
	let div1;
	let div0;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$1k();
	let div2_levels = [/*$$restProps*/ ctx[1]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			if (if_block) if_block.c();
			t = space();
			div1 = element("div");
			div0 = element("div");
			toggle_class(div0, "bx--select-input", true);
			toggle_class(div1, "bx--select", true);
			toggle_class(div1, "bx--skeleton", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if (if_block) if_block.m(div2, null);
			append(div2, t);
			append(div2, div1);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div2, "click", /*click_handler*/ ctx[2]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$1k();
					if_block.c();
					if_block.m(div2, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div2, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$29($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("hideLabel" in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class SelectSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$29, create_fragment$29, safe_not_equal, { hideLabel: 0 });
	}
}

/* src/Select/SelectItemGroup.svelte generated by Svelte v3.32.1 */

function create_fragment$2a(ctx) {
	let optgroup;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let optgroup_levels = [
		{ label: /*label*/ ctx[1] },
		{ disabled: /*disabled*/ ctx[0] },
		/*$$restProps*/ ctx[2]
	];

	let optgroup_data = {};

	for (let i = 0; i < optgroup_levels.length; i += 1) {
		optgroup_data = assign(optgroup_data, optgroup_levels[i]);
	}

	return {
		c() {
			optgroup = element("optgroup");
			if (default_slot) default_slot.c();
			set_attributes(optgroup, optgroup_data);
			toggle_class(optgroup, "bx--select-optgroup", true);
		},
		m(target, anchor) {
			insert(target, optgroup, anchor);

			if (default_slot) {
				default_slot.m(optgroup, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(optgroup, optgroup_data = get_spread_update(optgroup_levels, [
				(!current || dirty & /*label*/ 2) && { label: /*label*/ ctx[1] },
				(!current || dirty & /*disabled*/ 1) && { disabled: /*disabled*/ ctx[0] },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(optgroup, "bx--select-optgroup", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(optgroup);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2a($$self, $$props, $$invalidate) {
	const omit_props_names = ["disabled","label"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { disabled = false } = $$props;
	let { label = "Provide label" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("disabled" in $$new_props) $$invalidate(0, disabled = $$new_props.disabled);
		if ("label" in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [disabled, label, $$restProps, $$scope, slots];
}

class SelectItemGroup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2a, create_fragment$2a, safe_not_equal, { disabled: 0, label: 1 });
	}
}

/* src/SkeletonPlaceholder/SkeletonPlaceholder.svelte generated by Svelte v3.32.1 */

function create_fragment$2b(ctx) {
	let div;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton__placeholder", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[1]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--skeleton__placeholder", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2b($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class SkeletonPlaceholder extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2b, create_fragment$2b, safe_not_equal, {});
	}
}

/* src/Slider/Slider.svelte generated by Svelte v3.32.1 */

function create_fragment$2c(ctx) {
	let t0;
	let div5;
	let label;
	let t1;
	let t2;
	let div4;
	let span0;
	let t3_value = (/*minLabel*/ ctx[5] || /*min*/ ctx[4]) + "";
	let t3;
	let t4;
	let div3;
	let div0;
	let t5;
	let div1;
	let t6;
	let div2;
	let t7;
	let input0;
	let t8;
	let span1;
	let t9_value = (/*maxLabel*/ ctx[3] || /*max*/ ctx[2]) + "";
	let t9;
	let t10;
	let input1;
	let input1_type_value;
	let input1_style_value;
	let input1_id_value;
	let input1_aria_label_value;
	let input1_data_invalid_value;
	let input1_aria_invalid_value;
	let mounted;
	let dispose;
	let div5_levels = [/*$$restProps*/ ctx[25]];
	let div5_data = {};

	for (let i = 0; i < div5_levels.length; i += 1) {
		div5_data = assign(div5_data, div5_levels[i]);
	}

	return {
		c() {
			t0 = space();
			div5 = element("div");
			label = element("label");
			t1 = text(/*labelText*/ ctx[15]);
			t2 = space();
			div4 = element("div");
			span0 = element("span");
			t3 = text(t3_value);
			t4 = space();
			div3 = element("div");
			div0 = element("div");
			t5 = space();
			div1 = element("div");
			t6 = space();
			div2 = element("div");
			t7 = space();
			input0 = element("input");
			t8 = space();
			span1 = element("span");
			t9 = text(t9_value);
			t10 = space();
			input1 = element("input");
			attr(label, "for", /*id*/ ctx[13]);
			attr(label, "id", /*labelId*/ ctx[19]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
			toggle_class(span0, "bx--slider__range-label", true);
			attr(div0, "role", "slider");
			attr(div0, "tabindex", "0");
			set_style(div0, "left", /*left*/ ctx[20] + "%");
			attr(div0, "aria-labelledby", /*labelId*/ ctx[19]);
			attr(div0, "aria-valuemax", /*max*/ ctx[2]);
			attr(div0, "aria-valuemin", /*min*/ ctx[4]);
			attr(div0, "aria-valuenow", /*value*/ ctx[0]);
			attr(div0, "id", /*id*/ ctx[13]);
			toggle_class(div0, "bx--slider__thumb", true);
			toggle_class(div1, "bx--slider__track", true);
			set_style(div2, "transform", "translate(0, -50%) scaleX(" + /*left*/ ctx[20] / 100 + ")");
			toggle_class(div2, "bx--slider__filled-track", true);
			attr(input0, "type", "hidden");
			attr(input0, "name", /*name*/ ctx[16]);
			input0.value = /*value*/ ctx[0];
			input0.required = /*required*/ ctx[8];
			attr(input0, "min", /*min*/ ctx[4]);
			attr(input0, "max", /*max*/ ctx[2]);
			attr(input0, "step", /*step*/ ctx[6]);
			toggle_class(input0, "bx--slider__input", true);
			attr(div3, "role", "presentation");
			attr(div3, "tabindex", "-1");
			toggle_class(div3, "bx--slider", true);
			toggle_class(div3, "bx--slider--disabled", /*disabled*/ ctx[10]);
			toggle_class(span1, "bx--slider__range-label", true);

			attr(input1, "type", input1_type_value = /*hideTextInput*/ ctx[12]
			? "hidden"
			: /*inputType*/ ctx[9]);

			attr(input1, "style", input1_style_value = /*hideTextInput*/ ctx[12] ? "display: none" : undefined);
			attr(input1, "id", input1_id_value = "input-" + /*id*/ ctx[13]);
			attr(input1, "name", /*name*/ ctx[16]);
			input1.value = /*value*/ ctx[0];
			attr(input1, "aria-label", input1_aria_label_value = /*$$props*/ ctx[26]["aria-label"] || "Slider number input");
			input1.disabled = /*disabled*/ ctx[10];
			input1.required = /*required*/ ctx[8];
			attr(input1, "min", /*min*/ ctx[4]);
			attr(input1, "max", /*max*/ ctx[2]);
			attr(input1, "step", /*step*/ ctx[6]);
			attr(input1, "data-invalid", input1_data_invalid_value = /*invalid*/ ctx[14] || null);
			attr(input1, "aria-invalid", input1_aria_invalid_value = /*invalid*/ ctx[14] || null);
			toggle_class(input1, "bx--text-input", true);
			toggle_class(input1, "bx--slider-text-input", true);
			toggle_class(input1, "bx--text-input--light", /*light*/ ctx[11]);
			toggle_class(input1, "bx--text-input--invalid", /*invalid*/ ctx[14]);
			toggle_class(div4, "bx--slider-container", true);
			set_attributes(div5, div5_data);
			toggle_class(div5, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div5, anchor);
			append(div5, label);
			append(label, t1);
			append(div5, t2);
			append(div5, div4);
			append(div4, span0);
			append(span0, t3);
			append(div4, t4);
			append(div4, div3);
			append(div3, div0);
			append(div3, t5);
			append(div3, div1);
			/*div1_binding*/ ctx[33](div1);
			append(div3, t6);
			append(div3, div2);
			append(div3, t7);
			append(div3, input0);
			/*div3_binding*/ ctx[34](div3);
			append(div4, t8);
			append(div4, span1);
			append(span1, t9);
			append(div4, t10);
			append(div4, input1);

			if (!mounted) {
				dispose = [
					listen(document.body, "mousemove", /*move*/ ctx[24]),
					listen(document.body, "touchmove", /*move*/ ctx[24]),
					listen(document.body, "mouseup", /*stopHolding*/ ctx[23]),
					listen(document.body, "touchend", /*stopHolding*/ ctx[23]),
					listen(document.body, "touchcancel", /*stopHolding*/ ctx[23]),
					listen(div3, "mousedown", /*startDragging*/ ctx[21]),
					listen(div3, "mousedown", /*startHolding*/ ctx[22]),
					listen(div3, "touchstart", /*startHolding*/ ctx[22], { passive: true }),
					listen(div3, "keydown", /*keydown_handler*/ ctx[35]),
					listen(input1, "change", /*change_handler*/ ctx[36]),
					listen(div5, "click", /*click_handler*/ ctx[29]),
					listen(div5, "mouseover", /*mouseover_handler*/ ctx[30]),
					listen(div5, "mouseenter", /*mouseenter_handler*/ ctx[31]),
					listen(div5, "mouseleave", /*mouseleave_handler*/ ctx[32])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 32768) set_data(t1, /*labelText*/ ctx[15]);

			if (dirty[0] & /*id*/ 8192) {
				attr(label, "for", /*id*/ ctx[13]);
			}

			if (dirty[0] & /*labelId*/ 524288) {
				attr(label, "id", /*labelId*/ ctx[19]);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*minLabel, min*/ 48 && t3_value !== (t3_value = (/*minLabel*/ ctx[5] || /*min*/ ctx[4]) + "")) set_data(t3, t3_value);

			if (dirty[0] & /*left*/ 1048576) {
				set_style(div0, "left", /*left*/ ctx[20] + "%");
			}

			if (dirty[0] & /*labelId*/ 524288) {
				attr(div0, "aria-labelledby", /*labelId*/ ctx[19]);
			}

			if (dirty[0] & /*max*/ 4) {
				attr(div0, "aria-valuemax", /*max*/ ctx[2]);
			}

			if (dirty[0] & /*min*/ 16) {
				attr(div0, "aria-valuemin", /*min*/ ctx[4]);
			}

			if (dirty[0] & /*value*/ 1) {
				attr(div0, "aria-valuenow", /*value*/ ctx[0]);
			}

			if (dirty[0] & /*id*/ 8192) {
				attr(div0, "id", /*id*/ ctx[13]);
			}

			if (dirty[0] & /*left*/ 1048576) {
				set_style(div2, "transform", "translate(0, -50%) scaleX(" + /*left*/ ctx[20] / 100 + ")");
			}

			if (dirty[0] & /*name*/ 65536) {
				attr(input0, "name", /*name*/ ctx[16]);
			}

			if (dirty[0] & /*value*/ 1) {
				input0.value = /*value*/ ctx[0];
			}

			if (dirty[0] & /*required*/ 256) {
				input0.required = /*required*/ ctx[8];
			}

			if (dirty[0] & /*min*/ 16) {
				attr(input0, "min", /*min*/ ctx[4]);
			}

			if (dirty[0] & /*max*/ 4) {
				attr(input0, "max", /*max*/ ctx[2]);
			}

			if (dirty[0] & /*step*/ 64) {
				attr(input0, "step", /*step*/ ctx[6]);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(div3, "bx--slider--disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*maxLabel, max*/ 12 && t9_value !== (t9_value = (/*maxLabel*/ ctx[3] || /*max*/ ctx[2]) + "")) set_data(t9, t9_value);

			if (dirty[0] & /*hideTextInput, inputType*/ 4608 && input1_type_value !== (input1_type_value = /*hideTextInput*/ ctx[12]
			? "hidden"
			: /*inputType*/ ctx[9])) {
				attr(input1, "type", input1_type_value);
			}

			if (dirty[0] & /*hideTextInput*/ 4096 && input1_style_value !== (input1_style_value = /*hideTextInput*/ ctx[12] ? "display: none" : undefined)) {
				attr(input1, "style", input1_style_value);
			}

			if (dirty[0] & /*id*/ 8192 && input1_id_value !== (input1_id_value = "input-" + /*id*/ ctx[13])) {
				attr(input1, "id", input1_id_value);
			}

			if (dirty[0] & /*name*/ 65536) {
				attr(input1, "name", /*name*/ ctx[16]);
			}

			if (dirty[0] & /*value*/ 1 && input1.value !== /*value*/ ctx[0]) {
				input1.value = /*value*/ ctx[0];
			}

			if (dirty[0] & /*$$props*/ 67108864 && input1_aria_label_value !== (input1_aria_label_value = /*$$props*/ ctx[26]["aria-label"] || "Slider number input")) {
				attr(input1, "aria-label", input1_aria_label_value);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				input1.disabled = /*disabled*/ ctx[10];
			}

			if (dirty[0] & /*required*/ 256) {
				input1.required = /*required*/ ctx[8];
			}

			if (dirty[0] & /*min*/ 16) {
				attr(input1, "min", /*min*/ ctx[4]);
			}

			if (dirty[0] & /*max*/ 4) {
				attr(input1, "max", /*max*/ ctx[2]);
			}

			if (dirty[0] & /*step*/ 64) {
				attr(input1, "step", /*step*/ ctx[6]);
			}

			if (dirty[0] & /*invalid*/ 16384 && input1_data_invalid_value !== (input1_data_invalid_value = /*invalid*/ ctx[14] || null)) {
				attr(input1, "data-invalid", input1_data_invalid_value);
			}

			if (dirty[0] & /*invalid*/ 16384 && input1_aria_invalid_value !== (input1_aria_invalid_value = /*invalid*/ ctx[14] || null)) {
				attr(input1, "aria-invalid", input1_aria_invalid_value);
			}

			if (dirty[0] & /*light*/ 2048) {
				toggle_class(input1, "bx--text-input--light", /*light*/ ctx[11]);
			}

			if (dirty[0] & /*invalid*/ 16384) {
				toggle_class(input1, "bx--text-input--invalid", /*invalid*/ ctx[14]);
			}

			set_attributes(div5, div5_data = get_spread_update(div5_levels, [dirty[0] & /*$$restProps*/ 33554432 && /*$$restProps*/ ctx[25]]));
			toggle_class(div5, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(div5);
			/*div1_binding*/ ctx[33](null);
			/*div3_binding*/ ctx[34](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2c($$self, $$props, $$invalidate) {
	let labelId;
	let range;
	let left;

	const omit_props_names = [
		"value","max","maxLabel","min","minLabel","step","stepMultiplier","required","inputType","disabled","light","hideTextInput","id","invalid","labelText","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { value = 0 } = $$props;
	let { max = 100 } = $$props;
	let { maxLabel = "" } = $$props;
	let { min = 0 } = $$props;
	let { minLabel = "" } = $$props;
	let { step = 1 } = $$props;
	let { stepMultiplier = 4 } = $$props;
	let { required = false } = $$props;
	let { inputType = "number" } = $$props;
	let { disabled = false } = $$props;
	let { light = false } = $$props;
	let { hideTextInput = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { invalid = false } = $$props;
	let { labelText = "" } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let trackRef = null;
	let dragging = false;
	let holding = false;

	function startDragging() {
		$$invalidate(27, dragging = true);
	}

	function startHolding() {
		$$invalidate(28, holding = true);
	}

	function stopHolding() {
		$$invalidate(28, holding = false);
		$$invalidate(27, dragging = false);
	}

	function move() {
		if (holding) {
			startDragging();
		}
	}

	function calcValue(e) {
		if (disabled) return;
		const offsetX = e.touches ? e.touches[0].clientX : e.clientX;
		const { left, width } = trackRef.getBoundingClientRect();
		let nextValue = min + Math.round((max - min) * ((offsetX - left) / width) / step) * step;

		if (nextValue <= min) {
			nextValue = min;
		} else if (nextValue >= max) {
			nextValue = max;
		}

		$$invalidate(0, value = nextValue);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			trackRef = $$value;
			$$invalidate(18, trackRef);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler = ({ shiftKey, key }) => {
		const keys = {
			ArrowDown: -1,
			ArrowLeft: -1,
			ArrowRight: 1,
			ArrowUp: 1
		};

		if (keys[key]) {
			$$invalidate(0, value += step * (shiftKey ? range / step / stepMultiplier : 1) * keys[key]);
		}
	};

	const change_handler = ({ target }) => {
		$$invalidate(0, value = Number(target.value));
	};

	$$self.$$set = $$new_props => {
		$$invalidate(26, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("max" in $$new_props) $$invalidate(2, max = $$new_props.max);
		if ("maxLabel" in $$new_props) $$invalidate(3, maxLabel = $$new_props.maxLabel);
		if ("min" in $$new_props) $$invalidate(4, min = $$new_props.min);
		if ("minLabel" in $$new_props) $$invalidate(5, minLabel = $$new_props.minLabel);
		if ("step" in $$new_props) $$invalidate(6, step = $$new_props.step);
		if ("stepMultiplier" in $$new_props) $$invalidate(7, stepMultiplier = $$new_props.stepMultiplier);
		if ("required" in $$new_props) $$invalidate(8, required = $$new_props.required);
		if ("inputType" in $$new_props) $$invalidate(9, inputType = $$new_props.inputType);
		if ("disabled" in $$new_props) $$invalidate(10, disabled = $$new_props.disabled);
		if ("light" in $$new_props) $$invalidate(11, light = $$new_props.light);
		if ("hideTextInput" in $$new_props) $$invalidate(12, hideTextInput = $$new_props.hideTextInput);
		if ("id" in $$new_props) $$invalidate(13, id = $$new_props.id);
		if ("invalid" in $$new_props) $$invalidate(14, invalid = $$new_props.invalid);
		if ("labelText" in $$new_props) $$invalidate(15, labelText = $$new_props.labelText);
		if ("name" in $$new_props) $$invalidate(16, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 8192) {
			 $$invalidate(19, labelId = `label-${id}`);
		}

		if ($$self.$$.dirty[0] & /*max, min*/ 20) {
			 $$invalidate(17, range = max - min);
		}

		if ($$self.$$.dirty[0] & /*value, min, max, dragging, holding, disabled*/ 402654229) {
			 {
				if (value <= min) {
					$$invalidate(0, value = min);
				} else if (value >= max) {
					$$invalidate(0, value = max);
				}

				if (dragging) {
					calcValue(event);
					$$invalidate(27, dragging = false);
				}

				if (!holding && !disabled) {
					dispatch("change", value);
				}
			}
		}

		if ($$self.$$.dirty[0] & /*value, min, range*/ 131089) {
			 $$invalidate(20, left = (value - min) / range * 100);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		ref,
		max,
		maxLabel,
		min,
		minLabel,
		step,
		stepMultiplier,
		required,
		inputType,
		disabled,
		light,
		hideTextInput,
		id,
		invalid,
		labelText,
		name,
		range,
		trackRef,
		labelId,
		left,
		startDragging,
		startHolding,
		stopHolding,
		move,
		$$restProps,
		$$props,
		dragging,
		holding,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		div1_binding,
		div3_binding,
		keydown_handler,
		change_handler
	];
}

class Slider extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2c,
			create_fragment$2c,
			safe_not_equal,
			{
				value: 0,
				max: 2,
				maxLabel: 3,
				min: 4,
				minLabel: 5,
				step: 6,
				stepMultiplier: 7,
				required: 8,
				inputType: 9,
				disabled: 10,
				light: 11,
				hideTextInput: 12,
				id: 13,
				invalid: 14,
				labelText: 15,
				name: 16,
				ref: 1
			},
			[-1, -1]
		);
	}
}

/* src/Slider/SliderSkeleton.svelte generated by Svelte v3.32.1 */

function create_if_block$1l(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$2d(ctx) {
	let div5;
	let t0;
	let div4;
	let span0;
	let t1;
	let div3;
	let div0;
	let t2;
	let div1;
	let t3;
	let div2;
	let t4;
	let span1;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$1l();
	let div5_levels = [/*$$restProps*/ ctx[1]];
	let div5_data = {};

	for (let i = 0; i < div5_levels.length; i += 1) {
		div5_data = assign(div5_data, div5_levels[i]);
	}

	return {
		c() {
			div5 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div4 = element("div");
			span0 = element("span");
			t1 = space();
			div3 = element("div");
			div0 = element("div");
			t2 = space();
			div1 = element("div");
			t3 = space();
			div2 = element("div");
			t4 = space();
			span1 = element("span");
			toggle_class(span0, "bx--slider__range-label", true);
			toggle_class(div0, "bx--slider__track", true);
			toggle_class(div1, "bx--slider__filled-track", true);
			toggle_class(div2, "bx--slider__thumb", true);
			toggle_class(div3, "bx--slider", true);
			toggle_class(span1, "bx--slider__range-label", true);
			toggle_class(div4, "bx--slider-container", true);
			toggle_class(div4, "bx--skeleton", true);
			set_attributes(div5, div5_data);
			toggle_class(div5, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			if (if_block) if_block.m(div5, null);
			append(div5, t0);
			append(div5, div4);
			append(div4, span0);
			append(div4, t1);
			append(div4, div3);
			append(div3, div0);
			append(div3, t2);
			append(div3, div1);
			append(div3, t3);
			append(div3, div2);
			append(div4, t4);
			append(div4, span1);

			if (!mounted) {
				dispose = [
					listen(div5, "click", /*click_handler*/ ctx[2]),
					listen(div5, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div5, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div5, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$1l();
					if_block.c();
					if_block.m(div5, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div5, div5_data = get_spread_update(div5_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div5, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2d($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("hideLabel" in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class SliderSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2d, create_fragment$2d, safe_not_equal, { hideLabel: 0 });
	}
}

/* src/StructuredList/StructuredList.svelte generated by Svelte v3.32.1 */

function create_fragment$2e(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let div_levels = [{ "aria-label": "Structured list section" }, /*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list", true);
			toggle_class(div, "bx--structured-list--border", /*border*/ ctx[0]);
			toggle_class(div, "bx--structured-list--selection", /*selection*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[8]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ "aria-label": "Structured list section" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(div, "bx--structured-list", true);
			toggle_class(div, "bx--structured-list--border", /*border*/ ctx[0]);
			toggle_class(div, "bx--structured-list--selection", /*selection*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2e($$self, $$props, $$invalidate) {
	const omit_props_names = ["selected","border","selection"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = undefined } = $$props;
	let { border = false } = $$props;
	let { selection = false } = $$props;
	const dispatch = createEventDispatcher();
	const selectedValue = writable(selected);
	component_subscribe($$self, selectedValue, value => $$invalidate(5, $selectedValue = value));

	setContext("StructuredListWrapper", {
		selectedValue,
		update: value => {
			selectedValue.set(value);
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("selected" in $$new_props) $$invalidate(4, selected = $$new_props.selected);
		if ("border" in $$new_props) $$invalidate(0, border = $$new_props.border);
		if ("selection" in $$new_props) $$invalidate(1, selection = $$new_props.selection);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue*/ 32) {
			 $$invalidate(4, selected = $selectedValue);
		}

		if ($$self.$$.dirty & /*$selectedValue*/ 32) {
			 dispatch("change", $selectedValue);
		}
	};

	return [
		border,
		selection,
		selectedValue,
		$$restProps,
		selected,
		$selectedValue,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2e, create_fragment$2e, safe_not_equal, { selected: 4, border: 0, selection: 1 });
	}
}

/* src/StructuredList/StructuredListSkeleton.svelte generated by Svelte v3.32.1 */

function get_each_context$e(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (30:4) {#each Array.from({ length: rows }, (_, i) => i) as row, i (row)}
function create_each_block$e(key_1, ctx) {
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;

	return {
		key: key_1,
		first: null,
		c() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div2 = element("div");
			t2 = space();
			toggle_class(div0, "bx--structured-list-td", true);
			toggle_class(div1, "bx--structured-list-td", true);
			toggle_class(div2, "bx--structured-list-td", true);
			toggle_class(div3, "bx--structured-list-row", true);
			this.first = div3;
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div3, t0);
			append(div3, div1);
			append(div3, t1);
			append(div3, div2);
			append(div3, t2);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

function create_fragment$2f(ctx) {
	let div6;
	let div4;
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;
	let div5;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*rows*/ ctx[0] }, func$6);
	const get_key = ctx => /*row*/ ctx[7];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$e(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$e(key));
	}

	let div6_levels = [/*$$restProps*/ ctx[2]];
	let div6_data = {};

	for (let i = 0; i < div6_levels.length; i += 1) {
		div6_data = assign(div6_data, div6_levels[i]);
	}

	return {
		c() {
			div6 = element("div");
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			div0.innerHTML = `<span></span>`;
			t0 = space();
			div1 = element("div");
			div1.innerHTML = `<span></span>`;
			t1 = space();
			div2 = element("div");
			div2.innerHTML = `<span></span>`;
			t2 = space();
			div5 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(div0, "bx--structured-list-th", true);
			toggle_class(div1, "bx--structured-list-th", true);
			toggle_class(div2, "bx--structured-list-th", true);
			toggle_class(div3, "bx--structured-list-row", true);
			toggle_class(div3, "bx--structured-list-row--header-row", true);
			toggle_class(div4, "bx--structured-list-thead", true);
			toggle_class(div5, "bx--structured-list-tbody", true);
			set_attributes(div6, div6_data);
			toggle_class(div6, "bx--skeleton", true);
			toggle_class(div6, "bx--structured-list", true);
			toggle_class(div6, "bx--structured-list--border", /*border*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div4);
			append(div4, div3);
			append(div3, div0);
			append(div3, t0);
			append(div3, div1);
			append(div3, t1);
			append(div3, div2);
			append(div6, t2);
			append(div6, div5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div5, null);
			}

			if (!mounted) {
				dispose = [
					listen(div6, "click", /*click_handler*/ ctx[3]),
					listen(div6, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div6, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div6, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*rows*/ 1) {
				each_value = Array.from({ length: /*rows*/ ctx[0] }, func$6);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div5, destroy_block, create_each_block$e, null, get_each_context$e);
			}

			set_attributes(div6, div6_data = get_spread_update(div6_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div6, "bx--skeleton", true);
			toggle_class(div6, "bx--structured-list", true);
			toggle_class(div6, "bx--structured-list--border", /*border*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$6 = (_, i) => i;

function instance$2f($$self, $$props, $$invalidate) {
	const omit_props_names = ["rows","border"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { rows = 5 } = $$props;
	let { border = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("rows" in $$new_props) $$invalidate(0, rows = $$new_props.rows);
		if ("border" in $$new_props) $$invalidate(1, border = $$new_props.border);
	};

	return [
		rows,
		border,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredListSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2f, create_fragment$2f, safe_not_equal, { rows: 0, border: 1 });
	}
}

/* src/StructuredList/StructuredListBody.svelte generated by Svelte v3.32.1 */

function create_fragment$2g(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let div_levels = [{ role: "rowgroup" }, /*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list-tbody", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [{ role: "rowgroup" }, dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--structured-list-tbody", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2g($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredListBody extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2g, create_fragment$2g, safe_not_equal, {});
	}
}

/* src/StructuredList/StructuredListHead.svelte generated by Svelte v3.32.1 */

function create_fragment$2h(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list-thead", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--structured-list-thead", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2h($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("$$scope" in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredListHead extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2h, create_fragment$2h, safe_not_equal, {});
	}
}

/* src/StructuredList/StructuredListCell.svelte generated by Svelte v3.32.1 */

function create_fragment$2i(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list-th", /*head*/ ctx[0]);
			toggle_class(div, "bx--structured-list-td", !/*head*/ ctx[0]);
			toggle_class(div, "bx--structured-list-content--nowrap", /*noWrap*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[5]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--structured-list-th", /*head*/ ctx[0]);
			toggle_class(div, "bx--structured-list-td", !/*head*/ ctx[0]);
			toggle_class(div, "bx--structured-list-content--nowrap", /*noWrap*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2i($$self, $$props, $$invalidate) {
	const omit_props_names = ["head","noWrap"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { head = false } = $$props;
	let { noWrap = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("head" in $$new_props) $$invalidate(0, head = $$new_props.head);
		if ("noWrap" in $$new_props) $$invalidate(1, noWrap = $$new_props.noWrap);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [
		head,
		noWrap,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredListCell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2i, create_fragment$2i, safe_not_equal, { head: 0, noWrap: 1 });
	}
}

/* src/StructuredList/StructuredListRow.svelte generated by Svelte v3.32.1 */

function create_else_block$q(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let div_levels = [/*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list-row", true);
			toggle_class(div, "bx--structured-list-row--header-row", /*head*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler_1*/ ctx[11]),
					listen(div, "mouseover", /*mouseover_handler_1*/ ctx[12]),
					listen(div, "mouseenter", /*mouseenter_handler_1*/ ctx[13]),
					listen(div, "mouseleave", /*mouseleave_handler_1*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--structured-list-row", true);
			toggle_class(div, "bx--structured-list-row--header-row", /*head*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (12:0) {#if label}
function create_if_block$1m(ctx) {
	let label_1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	let label_1_levels = [
		{ role: "presentation" },
		{ tabindex: /*tabindex*/ ctx[2] },
		/*$$restProps*/ ctx[3]
	];

	let label_1_data = {};

	for (let i = 0; i < label_1_levels.length; i += 1) {
		label_1_data = assign(label_1_data, label_1_levels[i]);
	}

	return {
		c() {
			label_1 = element("label");
			if (default_slot) default_slot.c();
			set_attributes(label_1, label_1_data);
			toggle_class(label_1, "bx--structured-list-row", true);
			toggle_class(label_1, "bx--structured-list-row--header-row", /*head*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);

			if (default_slot) {
				default_slot.m(label_1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(label_1, "click", /*click_handler*/ ctx[6]),
					listen(label_1, "mouseover", /*mouseover_handler*/ ctx[7]),
					listen(label_1, "mouseenter", /*mouseenter_handler*/ ctx[8]),
					listen(label_1, "mouseleave", /*mouseleave_handler*/ ctx[9]),
					listen(label_1, "keydown", /*keydown_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			set_attributes(label_1, label_1_data = get_spread_update(label_1_levels, [
				{ role: "presentation" },
				(!current || dirty & /*tabindex*/ 4) && { tabindex: /*tabindex*/ ctx[2] },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(label_1, "bx--structured-list-row", true);
			toggle_class(label_1, "bx--structured-list-row--header-row", /*head*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label_1);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$2j(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1m, create_else_block$q];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*label*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2j($$self, $$props, $$invalidate) {
	const omit_props_names = ["head","label","tabindex"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { head = false } = $$props;
	let { label = false } = $$props;
	let { tabindex = "0" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("head" in $$new_props) $$invalidate(0, head = $$new_props.head);
		if ("label" in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ("tabindex" in $$new_props) $$invalidate(2, tabindex = $$new_props.tabindex);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [
		head,
		label,
		tabindex,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class StructuredListRow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2j, create_fragment$2j, safe_not_equal, { head: 0, label: 1, tabindex: 2 });
	}
}

/* src/StructuredList/StructuredListInput.svelte generated by Svelte v3.32.1 */

function create_fragment$2k(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "radio" },
		{ tabindex: "-1" },
		{ checked: /*checked*/ ctx[0] },
		{ id: /*id*/ ctx[4] },
		{ name: /*name*/ ctx[5] },
		{ title: /*title*/ ctx[2] },
		{ value: /*value*/ ctx[3] },
		/*$$restProps*/ ctx[8]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "bx--structured-list-input", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			/*input_binding*/ ctx[10](input);

			if (!mounted) {
				dispose = listen(input, "change", /*change_handler*/ ctx[11]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "radio" },
				{ tabindex: "-1" },
				dirty & /*checked*/ 1 && { checked: /*checked*/ ctx[0] },
				dirty & /*id*/ 16 && { id: /*id*/ ctx[4] },
				dirty & /*name*/ 32 && { name: /*name*/ ctx[5] },
				dirty & /*title*/ 4 && { title: /*title*/ ctx[2] },
				dirty & /*value*/ 8 && { value: /*value*/ ctx[3] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			toggle_class(input, "bx--structured-list-input", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$2k($$self, $$props, $$invalidate) {
	const omit_props_names = ["checked","title","value","id","name","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { checked = false } = $$props;
	let { title = "title" } = $$props;
	let { value = "value" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const { selectedValue, update } = getContext("StructuredListWrapper");
	component_subscribe($$self, selectedValue, value => $$invalidate(9, $selectedValue = value));

	if (checked) {
		update(value);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler = () => {
		update(value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("value" in $$new_props) $$invalidate(3, value = $$new_props.value);
		if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(5, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue, value*/ 520) {
			 $$invalidate(0, checked = $selectedValue === value);
		}
	};

	return [
		checked,
		ref,
		title,
		value,
		id,
		name,
		selectedValue,
		update,
		$$restProps,
		$selectedValue,
		input_binding,
		change_handler
	];
}

class StructuredListInput extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2k, create_fragment$2k, safe_not_equal, {
			checked: 0,
			title: 2,
			value: 3,
			id: 4,
			name: 5,
			ref: 1
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/ChevronDownGlyph/ChevronDownGlyph.svelte generated by Svelte v3.32.1 */

function create_if_block$1n(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$G(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1n(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1n(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$2l(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$G(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ChevronDownGlyph" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 10 6" },
		{ fill: "currentColor" },
		{ width: "10" },
		{ height: "6" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M5 6L0 1 0.7 0.3 5 4.6 9.3 0.3 10 1z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ChevronDownGlyph" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 10 6" },
				{ fill: "currentColor" },
				{ width: "10" },
				{ height: "6" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2l($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ChevronDownGlyph extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2l, create_fragment$2l, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/Tabs/Tabs.svelte generated by Svelte v3.32.1 */
const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});

// (132:6) {#if currentTab}
function create_if_block$1o(ctx) {
	let t_value = /*currentTab*/ ctx[3].label + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*currentTab*/ 8 && t_value !== (t_value = /*currentTab*/ ctx[3].label + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2m(ctx) {
	let div1;
	let div0;
	let a;
	let t0;
	let chevrondownglyph;
	let div0_aria_label_value;
	let t1;
	let ul;
	let t2;
	let current;
	let mounted;
	let dispose;
	let if_block = /*currentTab*/ ctx[3] && create_if_block$1o(ctx);

	chevrondownglyph = new ChevronDownGlyph({
			props: {
				"aria-hidden": "true",
				title: /*iconDescription*/ ctx[1]
			}
		});

	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);
	let div1_levels = [{ role: "navigation" }, /*$$restProps*/ ctx[9]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	const content_slot_template = /*#slots*/ ctx[18].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[17], get_content_slot_context);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			a = element("a");
			if (if_block) if_block.c();
			t0 = space();
			create_component(chevrondownglyph.$$.fragment);
			t1 = space();
			ul = element("ul");
			if (default_slot) default_slot.c();
			t2 = space();
			if (content_slot) content_slot.c();
			attr(a, "tabindex", "-1");
			attr(a, "href", /*triggerHref*/ ctx[2]);
			toggle_class(a, "bx--tabs-trigger-text", true);
			attr(div0, "role", "listbox");
			attr(div0, "tabindex", "0");
			attr(div0, "aria-label", div0_aria_label_value = /*$$props*/ ctx[10]["aria-label"] || "listbox");
			toggle_class(div0, "bx--tabs-trigger", true);
			attr(ul, "role", "tablist");
			toggle_class(ul, "bx--tabs__nav", true);
			toggle_class(ul, "bx--tabs__nav--hidden", /*dropdownHidden*/ ctx[4]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--tabs", true);
			toggle_class(div1, "bx--tabs--container", /*type*/ ctx[0] === "container");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, a);
			if (if_block) if_block.m(a, null);
			append(div0, t0);
			mount_component(chevrondownglyph, div0, null);
			append(div1, t1);
			append(div1, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			insert(target, t2, anchor);

			if (content_slot) {
				content_slot.m(target, anchor);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[20]),
					listen(a, "click", /*click_handler_1*/ ctx[21]),
					listen(div0, "click", /*click_handler_2*/ ctx[22]),
					listen(div0, "keypress", /*keypress_handler*/ ctx[19]),
					listen(div0, "keypress", /*keypress_handler_1*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*currentTab*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1o(ctx);
					if_block.c();
					if_block.m(a, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty & /*triggerHref*/ 4) {
				attr(a, "href", /*triggerHref*/ ctx[2]);
			}

			const chevrondownglyph_changes = {};
			if (dirty & /*iconDescription*/ 2) chevrondownglyph_changes.title = /*iconDescription*/ ctx[1];
			chevrondownglyph.$set(chevrondownglyph_changes);

			if (!current || dirty & /*$$props*/ 1024 && div0_aria_label_value !== (div0_aria_label_value = /*$$props*/ ctx[10]["aria-label"] || "listbox")) {
				attr(div0, "aria-label", div0_aria_label_value);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 131072) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[17], dirty, null, null);
				}
			}

			if (dirty & /*dropdownHidden*/ 16) {
				toggle_class(ul, "bx--tabs__nav--hidden", /*dropdownHidden*/ ctx[4]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				{ role: "navigation" },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(div1, "bx--tabs", true);
			toggle_class(div1, "bx--tabs--container", /*type*/ ctx[0] === "container");

			if (content_slot) {
				if (content_slot.p && dirty & /*$$scope*/ 131072) {
					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[17], dirty, get_content_slot_changes, get_content_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(chevrondownglyph.$$.fragment, local);
			transition_in(default_slot, local);
			transition_in(content_slot, local);
			current = true;
		},
		o(local) {
			transition_out(chevrondownglyph.$$.fragment, local);
			transition_out(default_slot, local);
			transition_out(content_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			destroy_component(chevrondownglyph);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t2);
			if (content_slot) content_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2m($$self, $$props, $$invalidate) {
	let currentTab;
	let currentContent;
	const omit_props_names = ["selected","type","iconDescription","triggerHref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $tabsById;
	let $tabs;
	let $content;
	let $selectedTab;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = 0 } = $$props;
	let { type = "default" } = $$props;
	let { iconDescription = "Show menu options" } = $$props;
	let { triggerHref = "#" } = $$props;
	const dispatch = createEventDispatcher();
	const tabs = writable([]);
	component_subscribe($$self, tabs, value => $$invalidate(13, $tabs = value));
	const tabsById = derived(tabs, _ => _.reduce((a, c) => ({ ...a, [c.id]: c }), {}));
	component_subscribe($$self, tabsById, value => $$invalidate(24, $tabsById = value));
	const selectedTab = writable(undefined);
	component_subscribe($$self, selectedTab, value => $$invalidate(16, $selectedTab = value));
	const content = writable([]);
	component_subscribe($$self, content, value => $$invalidate(15, $content = value));
	const contentById = derived(content, _ => _.reduce((a, c) => ({ ...a, [c.id]: c }), {}));
	const selectedContent = writable(undefined);

	setContext("Tabs", {
		tabs,
		contentById,
		selectedTab,
		selectedContent,
		add: data => {
			tabs.update(_ => [..._, { ...data, index: _.length }]);
		},
		addContent: data => {
			content.update(_ => [..._, { ...data, index: _.length }]);
		},
		update: id => {
			$$invalidate(12, currentIndex = $tabsById[id].index);
		},
		change: direction => {
			let index = currentIndex + direction;

			if (index < 0) {
				index = $tabs.length - 1;
			} else if (index >= $tabs.length) {
				index = 0;
			}

			let disabled = $tabs[index].disabled;

			while (disabled) {
				index = index + direction;

				if (index < 0) {
					index = $tabs.length - 1;
				} else if (index >= $tabs.length) {
					index = 0;
				}

				disabled = $tabs[index].disabled;
			}

			$$invalidate(12, currentIndex = index);
		}
	});

	afterUpdate(() => {
		$$invalidate(11, selected = currentIndex);
	});

	let dropdownHidden = true;
	let currentIndex = selected;

	function keypress_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	const click_handler_1 = () => {
		$$invalidate(4, dropdownHidden = !dropdownHidden);
	};

	const click_handler_2 = () => {
		$$invalidate(4, dropdownHidden = !dropdownHidden);
	};

	const keypress_handler_1 = () => {
		$$invalidate(4, dropdownHidden = !dropdownHidden);
	};

	$$self.$$set = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("selected" in $$new_props) $$invalidate(11, selected = $$new_props.selected);
		if ("type" in $$new_props) $$invalidate(0, type = $$new_props.type);
		if ("iconDescription" in $$new_props) $$invalidate(1, iconDescription = $$new_props.iconDescription);
		if ("triggerHref" in $$new_props) $$invalidate(2, triggerHref = $$new_props.triggerHref);
		if ("$$scope" in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected*/ 2048) {
			 $$invalidate(12, currentIndex = selected);
		}

		if ($$self.$$.dirty & /*$tabs, currentIndex*/ 12288) {
			 $$invalidate(3, currentTab = $tabs[currentIndex] || undefined);
		}

		if ($$self.$$.dirty & /*$content, currentIndex*/ 36864) {
			 $$invalidate(14, currentContent = $content[currentIndex] || undefined);
		}

		if ($$self.$$.dirty & /*currentIndex, currentTab, currentContent*/ 20488) {
			 {
				dispatch("change", currentIndex);

				if (currentTab) {
					selectedTab.set(currentTab.id);
				}

				if (currentContent) {
					selectedContent.set(currentContent.id);
				}
			}
		}

		if ($$self.$$.dirty & /*$selectedTab*/ 65536) {
			 if ($selectedTab) {
				$$invalidate(4, dropdownHidden = true);
			}
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		type,
		iconDescription,
		triggerHref,
		currentTab,
		dropdownHidden,
		tabs,
		tabsById,
		selectedTab,
		content,
		$$restProps,
		$$props,
		selected,
		currentIndex,
		$tabs,
		currentContent,
		$content,
		$selectedTab,
		$$scope,
		slots,
		keypress_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		keypress_handler_1
	];
}

class Tabs extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2m, create_fragment$2m, safe_not_equal, {
			selected: 11,
			type: 0,
			iconDescription: 1,
			triggerHref: 2
		});
	}
}

/* src/Tabs/Tab.svelte generated by Svelte v3.32.1 */

function fallback_block$H(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data(t, /*label*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2n(ctx) {
	let li;
	let a;
	let a_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
	const default_slot_or_fallback = default_slot || fallback_block$H(ctx);
	let li_levels = [{ tabindex: "-1" }, { role: "presentation" }, /*$$restProps*/ ctx[10]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(a, "role", "tab");
			attr(a, "tabindex", a_tabindex_value = /*disabled*/ ctx[3] ? "-1" : /*tabindex*/ ctx[4]);
			attr(a, "aria-selected", /*selected*/ ctx[6]);
			attr(a, "aria-disabled", /*disabled*/ ctx[3]);
			attr(a, "id", /*id*/ ctx[5]);
			attr(a, "href", /*href*/ ctx[2]);
			toggle_class(a, "bx--tabs__nav-link", true);
			set_attributes(li, li_data);
			toggle_class(li, "bx--tabs__nav-item", true);
			toggle_class(li, "bx--tabs__nav-item--disabled", /*disabled*/ ctx[3]);
			toggle_class(li, "bx--tabs__nav-item--selected", /*selected*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[18](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "click", prevent_default(/*click_handler*/ ctx[14])),
					listen(li, "click", prevent_default(/*click_handler_1*/ ctx[19])),
					listen(li, "mouseover", /*mouseover_handler*/ ctx[15]),
					listen(li, "mouseenter", /*mouseenter_handler*/ ctx[16]),
					listen(li, "mouseleave", /*mouseleave_handler*/ ctx[17]),
					listen(li, "keydown", /*keydown_handler*/ ctx[20])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*label*/ 2) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*disabled, tabindex*/ 24 && a_tabindex_value !== (a_tabindex_value = /*disabled*/ ctx[3] ? "-1" : /*tabindex*/ ctx[4])) {
				attr(a, "tabindex", a_tabindex_value);
			}

			if (!current || dirty & /*selected*/ 64) {
				attr(a, "aria-selected", /*selected*/ ctx[6]);
			}

			if (!current || dirty & /*disabled*/ 8) {
				attr(a, "aria-disabled", /*disabled*/ ctx[3]);
			}

			if (!current || dirty & /*id*/ 32) {
				attr(a, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty & /*href*/ 4) {
				attr(a, "href", /*href*/ ctx[2]);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				{ tabindex: "-1" },
				{ role: "presentation" },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(li, "bx--tabs__nav-item", true);
			toggle_class(li, "bx--tabs__nav-item--disabled", /*disabled*/ ctx[3]);
			toggle_class(li, "bx--tabs__nav-item--selected", /*selected*/ ctx[6]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[18](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2n($$self, $$props, $$invalidate) {
	let selected;
	const omit_props_names = ["label","href","disabled","tabindex","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedTab;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { label = "" } = $$props;
	let { href = "#" } = $$props;
	let { disabled = false } = $$props;
	let { tabindex = "0" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const { selectedTab, add, update, change } = getContext("Tabs");
	component_subscribe($$self, selectedTab, value => $$invalidate(11, $selectedTab = value));
	add({ id, label, disabled });
	let didMount = false;

	onMount(() => {
		tick().then(() => {
			didMount = true;
		});
	});

	afterUpdate(() => {
		if (didMount && selected && ref) {
			ref.focus();
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_1 = () => {
		if (!disabled) {
			update(id);
		}
	};

	const keydown_handler = ({ key }) => {
		if (!disabled) {
			if (key === "ArrowRight") {
				change(1);
			} else if (key === "ArrowLeft") {
				change(-1);
			} else if (key === " " || key === "Enter") {
				update(id);
			}
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("label" in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("tabindex" in $$new_props) $$invalidate(4, tabindex = $$new_props.tabindex);
		if ("id" in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedTab, id*/ 2080) {
			 $$invalidate(6, selected = $selectedTab === id);
		}
	};

	return [
		ref,
		label,
		href,
		disabled,
		tabindex,
		id,
		selected,
		selectedTab,
		update,
		change,
		$$restProps,
		$selectedTab,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		a_binding,
		click_handler_1,
		keydown_handler
	];
}

class Tab extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2n, create_fragment$2n, safe_not_equal, {
			label: 1,
			href: 2,
			disabled: 3,
			tabindex: 4,
			id: 5,
			ref: 0
		});
	}
}

/* src/Tabs/TabContent.svelte generated by Svelte v3.32.1 */

function create_fragment$2o(ctx) {
	let div;
	let div_aria_hidden_value;
	let div_hidden_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	let div_levels = [
		{ role: "tabpanel" },
		{ "aria-labelledby": /*tabId*/ ctx[2] },
		{
			"aria-hidden": div_aria_hidden_value = !/*selected*/ ctx[1]
		},
		{
			hidden: div_hidden_value = /*selected*/ ctx[1] ? undefined : ""
		},
		{ id: /*id*/ ctx[0] },
		/*$$restProps*/ ctx[6]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--tab-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "tabpanel" },
				(!current || dirty & /*tabId*/ 4) && { "aria-labelledby": /*tabId*/ ctx[2] },
				(!current || dirty & /*selected*/ 2 && div_aria_hidden_value !== (div_aria_hidden_value = !/*selected*/ ctx[1])) && { "aria-hidden": div_aria_hidden_value },
				(!current || dirty & /*selected*/ 2 && div_hidden_value !== (div_hidden_value = /*selected*/ ctx[1] ? undefined : "")) && { hidden: div_hidden_value },
				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(div, "bx--tab-content", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2o($$self, $$props, $$invalidate) {
	let selected;
	let index;
	let tabId;
	const omit_props_names = ["id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedContent;
	let $contentById;
	let $tabs;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const { selectedContent, addContent, tabs, contentById } = getContext("Tabs");
	component_subscribe($$self, selectedContent, value => $$invalidate(7, $selectedContent = value));
	component_subscribe($$self, tabs, value => $$invalidate(10, $tabs = value));
	component_subscribe($$self, contentById, value => $$invalidate(9, $contentById = value));
	addContent({ id });

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedContent, id*/ 129) {
			 $$invalidate(1, selected = $selectedContent === id);
		}

		if ($$self.$$.dirty & /*$contentById, id*/ 513) {
			 $$invalidate(8, index = $contentById[id].index);
		}

		if ($$self.$$.dirty & /*$tabs, index*/ 1280) {
			 $$invalidate(2, tabId = $tabs[index].id);
		}
	};

	return [
		id,
		selected,
		tabId,
		selectedContent,
		tabs,
		contentById,
		$$restProps,
		$selectedContent,
		index,
		$contentById,
		$tabs,
		$$scope,
		slots
	];
}

class TabContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2o, create_fragment$2o, safe_not_equal, { id: 0 });
	}
}

/* src/Tabs/TabsSkeleton.svelte generated by Svelte v3.32.1 */

function get_each_context$f(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (24:4) {#each Array.from({ length: count }, (_, i) => i) as item}
function create_each_block$f(ctx) {
	let li;
	let div;
	let t;

	return {
		c() {
			li = element("li");
			div = element("div");
			div.innerHTML = `<span></span>`;
			t = space();
			toggle_class(div, "bx--tabs__nav-link", true);
			toggle_class(li, "bx--tabs--scrollable__nav-item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);
			append(li, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment$2p(ctx) {
	let div;
	let ul;
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*count*/ ctx[0] }, func$7);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
	}

	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(ul, "bx--tabs--scrollable__nav", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--tabs", true);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--tabs--scrollable", true);
			toggle_class(div, "bx--tabs--scrollable--container", /*type*/ ctx[1] === "container");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 1) {
				each_value = Array.from({ length: /*count*/ ctx[0] }, func$7);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$f(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$f();
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--tabs", true);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--tabs--scrollable", true);
			toggle_class(div, "bx--tabs--scrollable--container", /*type*/ ctx[1] === "container");
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

const func$7 = (_, i) => i;

function instance$2p($$self, $$props, $$invalidate) {
	const omit_props_names = ["count","type"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { count = 4 } = $$props;
	let { type = "default" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("count" in $$new_props) $$invalidate(0, count = $$new_props.count);
		if ("type" in $$new_props) $$invalidate(1, type = $$new_props.type);
	};

	return [
		count,
		type,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TabsSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2p, create_fragment$2p, safe_not_equal, { count: 0, type: 1 });
	}
}

/* src/Tag/TagSkeleton.svelte generated by Svelte v3.32.1 */

function create_fragment$2q(ctx) {
	let span;
	let mounted;
	let dispose;
	let span_levels = [/*$$restProps*/ ctx[1]];
	let span_data = {};

	for (let i = 0; i < span_levels.length; i += 1) {
		span_data = assign(span_data, span_levels[i]);
	}

	return {
		c() {
			span = element("span");
			set_attributes(span, span_data);
			toggle_class(span, "bx--tag", true);
			toggle_class(span, "bx--tag--sm", /*size*/ ctx[0] === "sm");
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (!mounted) {
				dispose = [
					listen(span, "click", /*click_handler*/ ctx[2]),
					listen(span, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(span, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(span, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(span, span_data = get_spread_update(span_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(span, "bx--tag", true);
			toggle_class(span, "bx--tag--sm", /*size*/ ctx[0] === "sm");
			toggle_class(span, "bx--skeleton", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2q($$self, $$props, $$invalidate) {
	const omit_props_names = ["size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = "default" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
	};

	return [
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TagSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2q, create_fragment$2q, safe_not_equal, { size: 0 });
	}
}

/* src/Tag/Tag.svelte generated by Svelte v3.32.1 */
const get_default_slot_changes$6 = dirty => ({});
const get_default_slot_context$6 = ctx => ({ props: { class: "bx--tag__label" } });

// (129:0) {:else}
function create_else_block$r(ctx) {
	let div;
	let t;
	let span;
	let current;
	let mounted;
	let dispose;
	let if_block = /*icon*/ ctx[7] && create_if_block_4$b(ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
	let div_levels = [{ id: /*id*/ ctx[8] }, /*$$restProps*/ ctx[10]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			span = element("span");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--tag", true);
			toggle_class(div, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(div, "bx--tag--sm", /*size*/ ctx[1] === "sm");
			toggle_class(div, "bx--tag--red", /*type*/ ctx[0] === "red");
			toggle_class(div, "bx--tag--magenta", /*type*/ ctx[0] === "magenta");
			toggle_class(div, "bx--tag--purple", /*type*/ ctx[0] === "purple");
			toggle_class(div, "bx--tag--blue", /*type*/ ctx[0] === "blue");
			toggle_class(div, "bx--tag--cyan", /*type*/ ctx[0] === "cyan");
			toggle_class(div, "bx--tag--teal", /*type*/ ctx[0] === "teal");
			toggle_class(div, "bx--tag--green", /*type*/ ctx[0] === "green");
			toggle_class(div, "bx--tag--gray", /*type*/ ctx[0] === "gray");
			toggle_class(div, "bx--tag--cool-gray", /*type*/ ctx[0] === "cool-gray");
			toggle_class(div, "bx--tag--warm-gray", /*type*/ ctx[0] === "warm-gray");
			toggle_class(div, "bx--tag--high-contrast", /*type*/ ctx[0] === "high-contrast");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);
			append(div, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler_3*/ ctx[21]),
					listen(div, "mouseover", /*mouseover_handler_3*/ ctx[22]),
					listen(div, "mouseenter", /*mouseenter_handler_3*/ ctx[23]),
					listen(div, "mouseleave", /*mouseleave_handler_3*/ ctx[24])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*icon*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_4$b(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*id*/ 256) && { id: /*id*/ ctx[8] },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(div, "bx--tag", true);
			toggle_class(div, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(div, "bx--tag--sm", /*size*/ ctx[1] === "sm");
			toggle_class(div, "bx--tag--red", /*type*/ ctx[0] === "red");
			toggle_class(div, "bx--tag--magenta", /*type*/ ctx[0] === "magenta");
			toggle_class(div, "bx--tag--purple", /*type*/ ctx[0] === "purple");
			toggle_class(div, "bx--tag--blue", /*type*/ ctx[0] === "blue");
			toggle_class(div, "bx--tag--cyan", /*type*/ ctx[0] === "cyan");
			toggle_class(div, "bx--tag--teal", /*type*/ ctx[0] === "teal");
			toggle_class(div, "bx--tag--green", /*type*/ ctx[0] === "green");
			toggle_class(div, "bx--tag--gray", /*type*/ ctx[0] === "gray");
			toggle_class(div, "bx--tag--cool-gray", /*type*/ ctx[0] === "cool-gray");
			toggle_class(div, "bx--tag--warm-gray", /*type*/ ctx[0] === "warm-gray");
			toggle_class(div, "bx--tag--high-contrast", /*type*/ ctx[0] === "high-contrast");
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (93:22) 
function create_if_block_2$h(ctx) {
	let button;
	let t;
	let span;
	let button_tabindex_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*icon*/ ctx[7] && create_if_block_3$f(ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	let button_levels = [
		{ id: /*id*/ ctx[8] },
		{ disabled: /*disabled*/ ctx[3] },
		{ "aria-disabled": /*disabled*/ ctx[3] },
		{
			tabindex: button_tabindex_value = /*disabled*/ ctx[3] ? "-1" : undefined
		},
		/*$$restProps*/ ctx[10]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			span = element("span");
			if (default_slot) default_slot.c();
			set_attributes(button, button_data);
			toggle_class(button, "bx--tag", true);
			toggle_class(button, "bx--tag--interactive", true);
			toggle_class(button, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(button, "bx--tag--sm", /*size*/ ctx[1] === "sm");
			toggle_class(button, "bx--tag--red", /*type*/ ctx[0] === "red");
			toggle_class(button, "bx--tag--magenta", /*type*/ ctx[0] === "magenta");
			toggle_class(button, "bx--tag--purple", /*type*/ ctx[0] === "purple");
			toggle_class(button, "bx--tag--blue", /*type*/ ctx[0] === "blue");
			toggle_class(button, "bx--tag--cyan", /*type*/ ctx[0] === "cyan");
			toggle_class(button, "bx--tag--teal", /*type*/ ctx[0] === "teal");
			toggle_class(button, "bx--tag--green", /*type*/ ctx[0] === "green");
			toggle_class(button, "bx--tag--gray", /*type*/ ctx[0] === "gray");
			toggle_class(button, "bx--tag--cool-gray", /*type*/ ctx[0] === "cool-gray");
			toggle_class(button, "bx--tag--warm-gray", /*type*/ ctx[0] === "warm-gray");
			toggle_class(button, "bx--tag--high-contrast", /*type*/ ctx[0] === "high-contrast");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append(button, t);
			append(button, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_2*/ ctx[17]),
					listen(button, "mouseover", /*mouseover_handler_2*/ ctx[18]),
					listen(button, "mouseenter", /*mouseenter_handler_2*/ ctx[19]),
					listen(button, "mouseleave", /*mouseleave_handler_2*/ ctx[20])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*icon*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_3$f(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				(!current || dirty & /*id*/ 256) && { id: /*id*/ ctx[8] },
				(!current || dirty & /*disabled*/ 8) && { disabled: /*disabled*/ ctx[3] },
				(!current || dirty & /*disabled*/ 8) && { "aria-disabled": /*disabled*/ ctx[3] },
				(!current || dirty & /*disabled*/ 8 && button_tabindex_value !== (button_tabindex_value = /*disabled*/ ctx[3] ? "-1" : undefined)) && { tabindex: button_tabindex_value },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(button, "bx--tag", true);
			toggle_class(button, "bx--tag--interactive", true);
			toggle_class(button, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(button, "bx--tag--sm", /*size*/ ctx[1] === "sm");
			toggle_class(button, "bx--tag--red", /*type*/ ctx[0] === "red");
			toggle_class(button, "bx--tag--magenta", /*type*/ ctx[0] === "magenta");
			toggle_class(button, "bx--tag--purple", /*type*/ ctx[0] === "purple");
			toggle_class(button, "bx--tag--blue", /*type*/ ctx[0] === "blue");
			toggle_class(button, "bx--tag--cyan", /*type*/ ctx[0] === "cyan");
			toggle_class(button, "bx--tag--teal", /*type*/ ctx[0] === "teal");
			toggle_class(button, "bx--tag--green", /*type*/ ctx[0] === "green");
			toggle_class(button, "bx--tag--gray", /*type*/ ctx[0] === "gray");
			toggle_class(button, "bx--tag--cool-gray", /*type*/ ctx[0] === "cool-gray");
			toggle_class(button, "bx--tag--warm-gray", /*type*/ ctx[0] === "warm-gray");
			toggle_class(button, "bx--tag--high-contrast", /*type*/ ctx[0] === "high-contrast");
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (53:17) 
function create_if_block_1$t(ctx) {
	let div;
	let t;
	let button;
	let close16;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], get_default_slot_context$6);
	const default_slot_or_fallback = default_slot || fallback_block$I(ctx);
	close16 = new Close16({});

	let div_levels = [
		{ "aria-label": /*title*/ ctx[6] },
		{ id: /*id*/ ctx[8] },
		/*$$restProps*/ ctx[10]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
			button = element("button");
			create_component(close16.$$.fragment);
			attr(button, "aria-labelledby", /*id*/ ctx[8]);
			button.disabled = /*disabled*/ ctx[3];
			attr(button, "title", /*title*/ ctx[6]);
			toggle_class(button, "bx--tag__close-icon", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--tag", true);
			toggle_class(div, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(div, "bx--tag--filter", /*filter*/ ctx[2]);
			toggle_class(div, "bx--tag--sm", /*size*/ ctx[1] === "sm");
			toggle_class(div, "bx--tag--red", /*type*/ ctx[0] === "red");
			toggle_class(div, "bx--tag--magenta", /*type*/ ctx[0] === "magenta");
			toggle_class(div, "bx--tag--purple", /*type*/ ctx[0] === "purple");
			toggle_class(div, "bx--tag--blue", /*type*/ ctx[0] === "blue");
			toggle_class(div, "bx--tag--cyan", /*type*/ ctx[0] === "cyan");
			toggle_class(div, "bx--tag--teal", /*type*/ ctx[0] === "teal");
			toggle_class(div, "bx--tag--green", /*type*/ ctx[0] === "green");
			toggle_class(div, "bx--tag--gray", /*type*/ ctx[0] === "gray");
			toggle_class(div, "bx--tag--cool-gray", /*type*/ ctx[0] === "cool-gray");
			toggle_class(div, "bx--tag--warm-gray", /*type*/ ctx[0] === "warm-gray");
			toggle_class(div, "bx--tag--high-contrast", /*type*/ ctx[0] === "high-contrast");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(div, null);
			}

			append(div, t);
			append(div, button);
			mount_component(close16, button, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", stop_propagation(/*click_handler_1*/ ctx[13])),
					listen(button, "click", stop_propagation(/*click_handler_4*/ ctx[29])),
					listen(button, "mouseover", /*mouseover_handler_1*/ ctx[14]),
					listen(button, "mouseenter", /*mouseenter_handler_1*/ ctx[15]),
					listen(button, "mouseleave", /*mouseleave_handler_1*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, get_default_slot_changes$6, get_default_slot_context$6);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*type*/ 1) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*id*/ 256) {
				attr(button, "aria-labelledby", /*id*/ ctx[8]);
			}

			if (!current || dirty & /*disabled*/ 8) {
				button.disabled = /*disabled*/ ctx[3];
			}

			if (!current || dirty & /*title*/ 64) {
				attr(button, "title", /*title*/ ctx[6]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*title*/ 64) && { "aria-label": /*title*/ ctx[6] },
				(!current || dirty & /*id*/ 256) && { id: /*id*/ ctx[8] },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(div, "bx--tag", true);
			toggle_class(div, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(div, "bx--tag--filter", /*filter*/ ctx[2]);
			toggle_class(div, "bx--tag--sm", /*size*/ ctx[1] === "sm");
			toggle_class(div, "bx--tag--red", /*type*/ ctx[0] === "red");
			toggle_class(div, "bx--tag--magenta", /*type*/ ctx[0] === "magenta");
			toggle_class(div, "bx--tag--purple", /*type*/ ctx[0] === "purple");
			toggle_class(div, "bx--tag--blue", /*type*/ ctx[0] === "blue");
			toggle_class(div, "bx--tag--cyan", /*type*/ ctx[0] === "cyan");
			toggle_class(div, "bx--tag--teal", /*type*/ ctx[0] === "teal");
			toggle_class(div, "bx--tag--green", /*type*/ ctx[0] === "green");
			toggle_class(div, "bx--tag--gray", /*type*/ ctx[0] === "gray");
			toggle_class(div, "bx--tag--cool-gray", /*type*/ ctx[0] === "cool-gray");
			toggle_class(div, "bx--tag--warm-gray", /*type*/ ctx[0] === "warm-gray");
			toggle_class(div, "bx--tag--high-contrast", /*type*/ ctx[0] === "high-contrast");
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			transition_in(close16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			transition_out(close16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			destroy_component(close16);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (44:0) {#if skeleton}
function create_if_block$1p(ctx) {
	let tagskeleton;
	let current;
	const tagskeleton_spread_levels = [{ size: /*size*/ ctx[1] }, /*$$restProps*/ ctx[10]];
	let tagskeleton_props = {};

	for (let i = 0; i < tagskeleton_spread_levels.length; i += 1) {
		tagskeleton_props = assign(tagskeleton_props, tagskeleton_spread_levels[i]);
	}

	tagskeleton = new TagSkeleton({ props: tagskeleton_props });
	tagskeleton.$on("click", /*click_handler*/ ctx[25]);
	tagskeleton.$on("mouseover", /*mouseover_handler*/ ctx[26]);
	tagskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[27]);
	tagskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[28]);

	return {
		c() {
			create_component(tagskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tagskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tagskeleton_changes = (dirty & /*size, $$restProps*/ 1026)
			? get_spread_update(tagskeleton_spread_levels, [
					dirty & /*size*/ 2 && { size: /*size*/ ctx[1] },
					dirty & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10])
				])
			: {};

			tagskeleton.$set(tagskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tagskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tagskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tagskeleton, detaching);
		}
	};
}

// (152:4) {#if icon}
function create_if_block_4$b(ctx) {
	let div;
	let switch_instance;
	let current;
	var switch_value = /*icon*/ ctx[7];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			toggle_class(div, "bx--tag__custom-icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[7])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, null);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (switch_instance) destroy_component(switch_instance);
		}
	};
}

// (120:4) {#if icon}
function create_if_block_3$f(ctx) {
	let div;
	let switch_instance;
	let current;
	var switch_value = /*icon*/ ctx[7];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			toggle_class(div, "bx--tag__custom-icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[7])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, null);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (switch_instance) destroy_component(switch_instance);
		}
	};
}

// (74:48)        
function fallback_block$I(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*type*/ ctx[0]);
			toggle_class(span, "bx--tag__label", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*type*/ 1) set_data(t, /*type*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$2r(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1p, create_if_block_1$t, create_if_block_2$h, create_else_block$r];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[5]) return 0;
		if (/*filter*/ ctx[2]) return 1;
		if (/*interactive*/ ctx[4]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2r($$self, $$props, $$invalidate) {
	const omit_props_names = ["type","size","filter","disabled","interactive","skeleton","title","icon","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { type = undefined } = $$props;
	let { size = "default" } = $$props;
	let { filter = false } = $$props;
	let { disabled = false } = $$props;
	let { interactive = false } = $$props;
	let { skeleton = false } = $$props;
	let { title = "Clear filter" } = $$props;
	let { icon = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler_2(event) {
		bubble($$self, event);
	}

	function mouseover_handler_2(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble($$self, event);
	}

	function click_handler_3(event) {
		bubble($$self, event);
	}

	function mouseover_handler_3(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_3(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_3(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	const click_handler_4 = () => {
		dispatch("close");
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("type" in $$new_props) $$invalidate(0, type = $$new_props.type);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("filter" in $$new_props) $$invalidate(2, filter = $$new_props.filter);
		if ("disabled" in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ("interactive" in $$new_props) $$invalidate(4, interactive = $$new_props.interactive);
		if ("skeleton" in $$new_props) $$invalidate(5, skeleton = $$new_props.skeleton);
		if ("title" in $$new_props) $$invalidate(6, title = $$new_props.title);
		if ("icon" in $$new_props) $$invalidate(7, icon = $$new_props.icon);
		if ("id" in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	return [
		type,
		size,
		filter,
		disabled,
		interactive,
		skeleton,
		title,
		icon,
		id,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler_3,
		mouseover_handler_3,
		mouseenter_handler_3,
		mouseleave_handler_3,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_4
	];
}

class Tag extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2r, create_fragment$2r, safe_not_equal, {
			type: 0,
			size: 1,
			filter: 2,
			disabled: 3,
			interactive: 4,
			skeleton: 5,
			title: 6,
			icon: 7,
			id: 8
		});
	}
}

/* src/TextArea/TextArea.svelte generated by Svelte v3.32.1 */

function create_if_block_3$g(ctx) {
	let label;
	let t;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[8]);
			attr(label, "for", /*id*/ ctx[12]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[9]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 256) set_data(t, /*labelText*/ ctx[8]);

			if (dirty & /*id*/ 4096) {
				attr(label, "for", /*id*/ ctx[12]);
			}

			if (dirty & /*hideLabel*/ 512) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[9]);
			}

			if (dirty & /*disabled*/ 64) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (73:4) {#if invalid}
function create_if_block_2$i(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--text-area__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (99:2) {#if !invalid && helperText}
function create_if_block_1$u(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[7]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*helperText*/ 128) set_data(t, /*helperText*/ ctx[7]);

			if (dirty & /*disabled*/ 64) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (107:2) {#if invalid}
function create_if_block$1q(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[11]);
			attr(div, "id", /*errorId*/ ctx[14]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*invalidText*/ 2048) set_data(t, /*invalidText*/ ctx[11]);

			if (dirty & /*errorId*/ 16384) {
				attr(div, "id", /*errorId*/ ctx[14]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$2s(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let textarea;
	let textarea_aria_invalid_value;
	let textarea_aria_describedby_value;
	let div0_data_invalid_value;
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*labelText*/ ctx[8] && !/*hideLabel*/ ctx[9] && create_if_block_3$g(ctx);
	let if_block1 = /*invalid*/ ctx[10] && create_if_block_2$i();

	let textarea_levels = [
		{
			"aria-invalid": textarea_aria_invalid_value = /*invalid*/ ctx[10] || undefined
		},
		{
			"aria-describedby": textarea_aria_describedby_value = /*invalid*/ ctx[10] ? /*errorId*/ ctx[14] : undefined
		},
		{ disabled: /*disabled*/ ctx[6] },
		{ id: /*id*/ ctx[12] },
		{ name: /*name*/ ctx[13] },
		{ cols: /*cols*/ ctx[3] },
		{ rows: /*rows*/ ctx[4] },
		{ value: /*value*/ ctx[0] },
		{ placeholder: /*placeholder*/ ctx[2] },
		/*$$restProps*/ ctx[15]
	];

	let textarea_data = {};

	for (let i = 0; i < textarea_levels.length; i += 1) {
		textarea_data = assign(textarea_data, textarea_levels[i]);
	}

	let if_block2 = !/*invalid*/ ctx[10] && /*helperText*/ ctx[7] && create_if_block_1$u(ctx);
	let if_block3 = /*invalid*/ ctx[10] && create_if_block$1q(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();
			textarea = element("textarea");
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			set_attributes(textarea, textarea_data);
			toggle_class(textarea, "bx--text-area", true);
			toggle_class(textarea, "bx--text-area--light", /*light*/ ctx[5]);
			toggle_class(textarea, "bx--text-area--invalid", /*invalid*/ ctx[10]);
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[10] || undefined);
			toggle_class(div0, "bx--text-area__wrapper", true);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, textarea);
			/*textarea_binding*/ ctx[24](textarea);
			append(div1, t2);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t3);
			if (if_block3) if_block3.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(textarea, "change", /*change_handler*/ ctx[20]),
					listen(textarea, "input", /*input_handler*/ ctx[21]),
					listen(textarea, "input", /*input_handler_1*/ ctx[25]),
					listen(textarea, "focus", /*focus_handler*/ ctx[22]),
					listen(textarea, "blur", /*blur_handler*/ ctx[23]),
					listen(div1, "click", /*click_handler*/ ctx[16]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[17]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[18]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*labelText*/ ctx[8] && !/*hideLabel*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3$g(ctx);
					if_block0.c();
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*invalid*/ ctx[10]) {
				if (if_block1) {
					if (dirty & /*invalid*/ 1024) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$i();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(textarea, textarea_data = get_spread_update(textarea_levels, [
				(!current || dirty & /*invalid*/ 1024 && textarea_aria_invalid_value !== (textarea_aria_invalid_value = /*invalid*/ ctx[10] || undefined)) && {
					"aria-invalid": textarea_aria_invalid_value
				},
				(!current || dirty & /*invalid, errorId*/ 17408 && textarea_aria_describedby_value !== (textarea_aria_describedby_value = /*invalid*/ ctx[10] ? /*errorId*/ ctx[14] : undefined)) && {
					"aria-describedby": textarea_aria_describedby_value
				},
				(!current || dirty & /*disabled*/ 64) && { disabled: /*disabled*/ ctx[6] },
				(!current || dirty & /*id*/ 4096) && { id: /*id*/ ctx[12] },
				(!current || dirty & /*name*/ 8192) && { name: /*name*/ ctx[13] },
				(!current || dirty & /*cols*/ 8) && { cols: /*cols*/ ctx[3] },
				(!current || dirty & /*rows*/ 16) && { rows: /*rows*/ ctx[4] },
				(!current || dirty & /*value*/ 1) && { value: /*value*/ ctx[0] },
				(!current || dirty & /*placeholder*/ 4) && { placeholder: /*placeholder*/ ctx[2] },
				dirty & /*$$restProps*/ 32768 && /*$$restProps*/ ctx[15]
			]));

			toggle_class(textarea, "bx--text-area", true);
			toggle_class(textarea, "bx--text-area--light", /*light*/ ctx[5]);
			toggle_class(textarea, "bx--text-area--invalid", /*invalid*/ ctx[10]);

			if (!current || dirty & /*invalid*/ 1024 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[10] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!/*invalid*/ ctx[10] && /*helperText*/ ctx[7]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1$u(ctx);
					if_block2.c();
					if_block2.m(div1, t3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*invalid*/ ctx[10]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block$1q(ctx);
					if_block3.c();
					if_block3.m(div1, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			/*textarea_binding*/ ctx[24](null);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2s($$self, $$props, $$invalidate) {
	let errorId;

	const omit_props_names = [
		"value","placeholder","cols","rows","light","disabled","helperText","labelText","hideLabel","invalid","invalidText","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { value = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { cols = 50 } = $$props;
	let { rows = 4 } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { helperText = "" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function textarea_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(0, value = target.value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(15, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("placeholder" in $$new_props) $$invalidate(2, placeholder = $$new_props.placeholder);
		if ("cols" in $$new_props) $$invalidate(3, cols = $$new_props.cols);
		if ("rows" in $$new_props) $$invalidate(4, rows = $$new_props.rows);
		if ("light" in $$new_props) $$invalidate(5, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("helperText" in $$new_props) $$invalidate(7, helperText = $$new_props.helperText);
		if ("labelText" in $$new_props) $$invalidate(8, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(9, hideLabel = $$new_props.hideLabel);
		if ("invalid" in $$new_props) $$invalidate(10, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(11, invalidText = $$new_props.invalidText);
		if ("id" in $$new_props) $$invalidate(12, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(13, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id*/ 4096) {
			 $$invalidate(14, errorId = `error-${id}`);
		}
	};

	return [
		value,
		ref,
		placeholder,
		cols,
		rows,
		light,
		disabled,
		helperText,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		id,
		name,
		errorId,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		textarea_binding,
		input_handler_1
	];
}

class TextArea extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2s, create_fragment$2s, safe_not_equal, {
			value: 0,
			placeholder: 2,
			cols: 3,
			rows: 4,
			light: 5,
			disabled: 6,
			helperText: 7,
			labelText: 8,
			hideLabel: 9,
			invalid: 10,
			invalidText: 11,
			id: 12,
			name: 13,
			ref: 1
		});
	}
}

/* src/TextArea/TextAreaSkeleton.svelte generated by Svelte v3.32.1 */

function create_if_block$1r(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$2t(ctx) {
	let div1;
	let t;
	let div0;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$1r();
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t = space();
			div0 = element("div");
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(div0, "bx--text-area", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$1r();
					if_block.c();
					if_block.m(div1, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2t($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("hideLabel" in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TextAreaSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2t, create_fragment$2t, safe_not_equal, { hideLabel: 0 });
	}
}

/* src/TextInput/TextInput.svelte generated by Svelte v3.32.1 */

function create_if_block_9$3(ctx) {
	let div;
	let t;
	let if_block0 = /*labelText*/ ctx[10] && create_if_block_11(ctx);
	let if_block1 = !/*isFluid*/ ctx[18] && /*helperText*/ ctx[7] && create_if_block_10$1(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr(div, "class", "bx--text-input__label-helper-wrapper");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t);
			if (if_block1) if_block1.m(div, null);
		},
		p(ctx, dirty) {
			if (/*labelText*/ ctx[10]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_11(ctx);
					if_block0.c();
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*isFluid*/ ctx[18] && /*helperText*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_10$1(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (87:6) {#if labelText}
function create_if_block_11(ctx) {
	let label;
	let t;
	let label_class_value;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[10]);
			attr(label, "for", /*id*/ ctx[8]);
			attr(label, "class", label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 1024) set_data(t, /*labelText*/ ctx[10]);

			if (dirty[0] & /*id*/ 256) {
				attr(label, "for", /*id*/ ctx[8]);
			}

			if (dirty[0] & /*inline, size*/ 131076 && label_class_value !== (label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`)) {
				attr(label, "class", label_class_value);
			}

			if (dirty[0] & /*inline, size*/ 131076) {
				toggle_class(label, "bx--label", true);
			}

			if (dirty[0] & /*inline, size, hideLabel*/ 133124) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			}

			if (dirty[0] & /*inline, size, disabled*/ 131140) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline, size, inline*/ 131076) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (99:6) {#if !isFluid && helperText}
function create_if_block_10$1(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[7]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 128) set_data(t, /*helperText*/ ctx[7]);

			if (dirty[0] & /*disabled*/ 64) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (110:2) {#if !inline && labelText}
function create_if_block_8$3(ctx) {
	let label;
	let t;
	let label_class_value;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[10]);
			attr(label, "for", /*id*/ ctx[8]);
			attr(label, "class", label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 1024) set_data(t, /*labelText*/ ctx[10]);

			if (dirty[0] & /*id*/ 256) {
				attr(label, "for", /*id*/ ctx[8]);
			}

			if (dirty[0] & /*inline, size*/ 131076 && label_class_value !== (label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`)) {
				attr(label, "class", label_class_value);
			}

			if (dirty[0] & /*inline, size*/ 131076) {
				toggle_class(label, "bx--label", true);
			}

			if (dirty[0] & /*inline, size, hideLabel*/ 133124) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			}

			if (dirty[0] & /*inline, size, disabled*/ 131140) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline, size, inline*/ 131076) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (132:6) {#if invalid}
function create_if_block_7$4(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--text-input__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (135:6) {#if !invalid && warn}
function create_if_block_6$6(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--text-input__invalid-icon\n            bx--text-input__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (169:6) {#if isFluid}
function create_if_block_5$8(ctx) {
	let hr;

	return {
		c() {
			hr = element("hr");
			toggle_class(hr, "bx--text-input__divider", true);
		},
		m(target, anchor) {
			insert(target, hr, anchor);
		},
		d(detaching) {
			if (detaching) detach(hr);
		}
	};
}

// (172:6) {#if isFluid && !inline && invalid}
function create_if_block_4$c(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[13]);
			attr(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 8192) set_data(t, /*invalidText*/ ctx[13]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (177:6) {#if isFluid && !inline && warn}
function create_if_block_3$h(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[15]);
			attr(div, "id", /*warnId*/ ctx[20]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 32768) set_data(t, /*warnText*/ ctx[15]);

			if (dirty[0] & /*warnId*/ 1048576) {
				attr(div, "id", /*warnId*/ ctx[20]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (181:4) {#if !invalid && !warn && !isFluid && !inline && helperText}
function create_if_block_2$j(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[7]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 128) set_data(t, /*helperText*/ ctx[7]);

			if (dirty[0] & /*disabled*/ 64) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (190:4) {#if !isFluid && invalid}
function create_if_block_1$v(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[13]);
			attr(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 8192) set_data(t, /*invalidText*/ ctx[13]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (195:4) {#if !isFluid && !invalid && warn}
function create_if_block$1s(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[15]);
			attr(div, "id", /*warnId*/ ctx[20]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 32768) set_data(t, /*warnText*/ ctx[15]);

			if (dirty[0] & /*warnId*/ 1048576) {
				attr(div, "id", /*warnId*/ ctx[20]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$2u(ctx) {
	let div2;
	let t0;
	let t1;
	let div1;
	let div0;
	let t2;
	let t3;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_data_warn_value;
	let input_aria_describedby_value;
	let input_class_value;
	let t4;
	let t5;
	let t6;
	let div0_data_invalid_value;
	let div0_data_warn_value;
	let t7;
	let t8;
	let t9;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*inline*/ ctx[17] && create_if_block_9$3(ctx);
	let if_block1 = !/*inline*/ ctx[17] && /*labelText*/ ctx[10] && create_if_block_8$3(ctx);
	let if_block2 = /*invalid*/ ctx[12] && create_if_block_7$4();
	let if_block3 = !/*invalid*/ ctx[12] && /*warn*/ ctx[14] && create_if_block_6$6();

	let input_levels = [
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[12] || undefined
		},
		{
			"aria-invalid": input_aria_invalid_value = /*invalid*/ ctx[12] || undefined
		},
		{
			"data-warn": input_data_warn_value = /*warn*/ ctx[14] || undefined
		},
		{
			"aria-describedby": input_aria_describedby_value = /*invalid*/ ctx[12]
			? /*errorId*/ ctx[19]
			: /*warn*/ ctx[14] ? /*warnId*/ ctx[20] : undefined
		},
		{ disabled: /*disabled*/ ctx[6] },
		{ id: /*id*/ ctx[8] },
		{ name: /*name*/ ctx[9] },
		{ placeholder: /*placeholder*/ ctx[4] },
		{ type: /*type*/ ctx[3] },
		{ value: /*value*/ ctx[0] },
		{ required: /*required*/ ctx[16] },
		/*$$restProps*/ ctx[21],
		{
			class: input_class_value = /*size*/ ctx[2] && `bx--text-input--${/*size*/ ctx[2]}`
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block4 = /*isFluid*/ ctx[18] && create_if_block_5$8();
	let if_block5 = /*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*invalid*/ ctx[12] && create_if_block_4$c(ctx);
	let if_block6 = /*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*warn*/ ctx[14] && create_if_block_3$h(ctx);
	let if_block7 = !/*invalid*/ ctx[12] && !/*warn*/ ctx[14] && !/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*helperText*/ ctx[7] && create_if_block_2$j(ctx);
	let if_block8 = !/*isFluid*/ ctx[18] && /*invalid*/ ctx[12] && create_if_block_1$v(ctx);
	let if_block9 = !/*isFluid*/ ctx[18] && !/*invalid*/ ctx[12] && /*warn*/ ctx[14] && create_if_block$1s(ctx);

	return {
		c() {
			div2 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			input = element("input");
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			if (if_block5) if_block5.c();
			t6 = space();
			if (if_block6) if_block6.c();
			t7 = space();
			if (if_block7) if_block7.c();
			t8 = space();
			if (if_block8) if_block8.c();
			t9 = space();
			if (if_block9) if_block9.c();
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[5]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[12]);
			toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[14]);
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[12] || undefined);
			attr(div0, "data-warn", div0_data_warn_value = /*warn*/ ctx[14] || undefined);
			toggle_class(div0, "bx--text-input__field-wrapper", true);
			toggle_class(div0, "bx--text-input__field-wrapper--warning", !/*invalid*/ ctx[12] && /*warn*/ ctx[14]);
			toggle_class(div1, "bx--text-input__field-outer-wrapper", true);
			toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[17]);
			toggle_class(div2, "bx--form-item", true);
			toggle_class(div2, "bx--text-input-wrapper", true);
			toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t0);
			if (if_block1) if_block1.m(div2, null);
			append(div2, t1);
			append(div2, div1);
			append(div1, div0);
			if (if_block2) if_block2.m(div0, null);
			append(div0, t2);
			if (if_block3) if_block3.m(div0, null);
			append(div0, t3);
			append(div0, input);
			input.value = input_data.value;
			/*input_binding*/ ctx[31](input);
			append(div0, t4);
			if (if_block4) if_block4.m(div0, null);
			append(div0, t5);
			if (if_block5) if_block5.m(div0, null);
			append(div0, t6);
			if (if_block6) if_block6.m(div0, null);
			append(div1, t7);
			if (if_block7) if_block7.m(div1, null);
			append(div1, t8);
			if (if_block8) if_block8.m(div1, null);
			append(div1, t9);
			if (if_block9) if_block9.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[26]),
					listen(input, "input", /*input_handler*/ ctx[27]),
					listen(input, "input", /*input_handler_1*/ ctx[32]),
					listen(input, "keydown", /*keydown_handler*/ ctx[28]),
					listen(input, "focus", /*focus_handler*/ ctx[29]),
					listen(input, "blur", /*blur_handler*/ ctx[30]),
					listen(div2, "click", /*click_handler*/ ctx[22]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[23]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[24]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[25])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*inline*/ ctx[17]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_9$3(ctx);
					if_block0.c();
					if_block0.m(div2, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*inline*/ ctx[17] && /*labelText*/ ctx[10]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_8$3(ctx);
					if_block1.c();
					if_block1.m(div2, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*invalid*/ ctx[12]) {
				if (if_block2) {
					if (dirty[0] & /*invalid*/ 4096) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_7$4();
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[12] && /*warn*/ ctx[14]) {
				if (if_block3) {
					if (dirty[0] & /*invalid, warn*/ 20480) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_6$6();
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				(!current || dirty[0] & /*invalid*/ 4096 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[12] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*invalid*/ 4096 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[12] || undefined)) && { "aria-invalid": input_aria_invalid_value },
				(!current || dirty[0] & /*warn*/ 16384 && input_data_warn_value !== (input_data_warn_value = /*warn*/ ctx[14] || undefined)) && { "data-warn": input_data_warn_value },
				(!current || dirty[0] & /*invalid, errorId, warn, warnId*/ 1593344 && input_aria_describedby_value !== (input_aria_describedby_value = /*invalid*/ ctx[12]
				? /*errorId*/ ctx[19]
				: /*warn*/ ctx[14] ? /*warnId*/ ctx[20] : undefined)) && {
					"aria-describedby": input_aria_describedby_value
				},
				(!current || dirty[0] & /*disabled*/ 64) && { disabled: /*disabled*/ ctx[6] },
				(!current || dirty[0] & /*id*/ 256) && { id: /*id*/ ctx[8] },
				(!current || dirty[0] & /*name*/ 512) && { name: /*name*/ ctx[9] },
				(!current || dirty[0] & /*placeholder*/ 16) && { placeholder: /*placeholder*/ ctx[4] },
				(!current || dirty[0] & /*type*/ 8) && { type: /*type*/ ctx[3] },
				(!current || dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) && { value: /*value*/ ctx[0] },
				(!current || dirty[0] & /*required*/ 65536) && { required: /*required*/ ctx[16] },
				dirty[0] & /*$$restProps*/ 2097152 && /*$$restProps*/ ctx[21],
				(!current || dirty[0] & /*size*/ 4 && input_class_value !== (input_class_value = /*size*/ ctx[2] && `bx--text-input--${/*size*/ ctx[2]}`)) && { class: input_class_value }
			]));

			if ("value" in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[5]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[12]);
			toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[14]);

			if (/*isFluid*/ ctx[18]) {
				if (if_block4) ; else {
					if_block4 = create_if_block_5$8();
					if_block4.c();
					if_block4.m(div0, t5);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*invalid*/ ctx[12]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_4$c(ctx);
					if_block5.c();
					if_block5.m(div0, t6);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*warn*/ ctx[14]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_3$h(ctx);
					if_block6.c();
					if_block6.m(div0, null);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (!current || dirty[0] & /*invalid*/ 4096 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[12] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!current || dirty[0] & /*warn*/ 16384 && div0_data_warn_value !== (div0_data_warn_value = /*warn*/ ctx[14] || undefined)) {
				attr(div0, "data-warn", div0_data_warn_value);
			}

			if (dirty[0] & /*invalid, warn*/ 20480) {
				toggle_class(div0, "bx--text-input__field-wrapper--warning", !/*invalid*/ ctx[12] && /*warn*/ ctx[14]);
			}

			if (!/*invalid*/ ctx[12] && !/*warn*/ ctx[14] && !/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*helperText*/ ctx[7]) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_2$j(ctx);
					if_block7.c();
					if_block7.m(div1, t8);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (!/*isFluid*/ ctx[18] && /*invalid*/ ctx[12]) {
				if (if_block8) {
					if_block8.p(ctx, dirty);
				} else {
					if_block8 = create_if_block_1$v(ctx);
					if_block8.c();
					if_block8.m(div1, t9);
				}
			} else if (if_block8) {
				if_block8.d(1);
				if_block8 = null;
			}

			if (!/*isFluid*/ ctx[18] && !/*invalid*/ ctx[12] && /*warn*/ ctx[14]) {
				if (if_block9) {
					if_block9.p(ctx, dirty);
				} else {
					if_block9 = create_if_block$1s(ctx);
					if_block9.c();
					if_block9.m(div1, null);
				}
			} else if (if_block9) {
				if_block9.d(1);
				if_block9 = null;
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[17]);
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[17]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			/*input_binding*/ ctx[31](null);
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			if (if_block8) if_block8.d();
			if (if_block9) if_block9.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2u($$self, $$props, $$invalidate) {
	let isFluid;
	let errorId;
	let warnId;

	const omit_props_names = [
		"size","value","type","placeholder","light","disabled","helperText","id","name","labelText","hideLabel","invalid","invalidText","warn","warnText","ref","required","inline"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { type = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { helperText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { ref = null } = $$props;
	let { required = false } = $$props;
	let { inline = false } = $$props;
	const ctx = getContext("Form");

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(0, value = target.value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(21, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("type" in $$new_props) $$invalidate(3, type = $$new_props.type);
		if ("placeholder" in $$new_props) $$invalidate(4, placeholder = $$new_props.placeholder);
		if ("light" in $$new_props) $$invalidate(5, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("helperText" in $$new_props) $$invalidate(7, helperText = $$new_props.helperText);
		if ("id" in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(9, name = $$new_props.name);
		if ("labelText" in $$new_props) $$invalidate(10, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(11, hideLabel = $$new_props.hideLabel);
		if ("invalid" in $$new_props) $$invalidate(12, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(13, invalidText = $$new_props.invalidText);
		if ("warn" in $$new_props) $$invalidate(14, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(15, warnText = $$new_props.warnText);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("required" in $$new_props) $$invalidate(16, required = $$new_props.required);
		if ("inline" in $$new_props) $$invalidate(17, inline = $$new_props.inline);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 256) {
			 $$invalidate(19, errorId = `error-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 256) {
			 $$invalidate(20, warnId = `warn-${id}`);
		}
	};

	 $$invalidate(18, isFluid = !!ctx && ctx.isFluid);

	return [
		value,
		ref,
		size,
		type,
		placeholder,
		light,
		disabled,
		helperText,
		id,
		name,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		warn,
		warnText,
		required,
		inline,
		isFluid,
		errorId,
		warnId,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		keydown_handler,
		focus_handler,
		blur_handler,
		input_binding,
		input_handler_1
	];
}

class TextInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2u,
			create_fragment$2u,
			safe_not_equal,
			{
				size: 2,
				value: 0,
				type: 3,
				placeholder: 4,
				light: 5,
				disabled: 6,
				helperText: 7,
				id: 8,
				name: 9,
				labelText: 10,
				hideLabel: 11,
				invalid: 12,
				invalidText: 13,
				warn: 14,
				warnText: 15,
				ref: 1,
				required: 16,
				inline: 17
			},
			[-1, -1]
		);
	}
}

/* src/TextInput/TextInputSkeleton.svelte generated by Svelte v3.32.1 */

function create_if_block$1t(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$2v(ctx) {
	let div1;
	let t;
	let div0;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$1t();
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t = space();
			div0 = element("div");
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(div0, "bx--text-input", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$1t();
					if_block.c();
					if_block.m(div1, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2v($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("hideLabel" in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TextInputSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2v, create_fragment$2v, safe_not_equal, { hideLabel: 0 });
	}
}

/* node_modules/carbon-icons-svelte/lib/View16/View16.svelte generated by Svelte v3.32.1 */

function create_if_block$1u(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$J(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1u(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1u(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$2w(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$J(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "View16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M15.5,7.8C14.3,4.7,11.3,2.6,8,2.5C4.7,2.6,1.7,4.7,0.5,7.8c0,0.1,0,0.2,0,0.3c1.2,3.1,4.1,5.2,7.5,5.3\tc3.3-0.1,6.3-2.2,7.5-5.3C15.5,8.1,15.5,7.9,15.5,7.8z M8,12.5c-2.7,0-5.4-2-6.5-4.5c1-2.5,3.8-4.5,6.5-4.5s5.4,2,6.5,4.5\tC13.4,10.5,10.6,12.5,8,12.5z");
			attr(path1, "d", "M8,5C6.3,5,5,6.3,5,8s1.3,3,3,3s3-1.3,3-3S9.7,5,8,5z M8,10c-1.1,0-2-0.9-2-2s0.9-2,2-2s2,0.9,2,2S9.1,10,8,10z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "View16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2w($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class View16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2w, create_fragment$2w, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/ViewOff16/ViewOff16.svelte generated by Svelte v3.32.1 */

function create_if_block$1v(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$K(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1v(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1v(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$2x(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$K(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ViewOff16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M2.6,11.3l0.7-0.7C2.6,9.8,1.9,9,1.5,8c1-2.5,3.8-4.5,6.5-4.5c0.7,0,1.4,0.1,2,0.4l0.8-0.8C9.9,2.7,9,2.5,8,2.5\tC4.7,2.6,1.7,4.7,0.5,7.8c0,0.1,0,0.2,0,0.3C1,9.3,1.7,10.4,2.6,11.3z");
			attr(path1, "d", "M6 7.9c.1-1 .9-1.8 1.8-1.8l.9-.9C7.2 4.7 5.5 5.6 5.1 7.2 5 7.7 5 8.3 5.1 8.8L6 7.9zM15.5 7.8c-.6-1.5-1.6-2.8-2.9-3.7L15 1.7 14.3 1 1 14.3 1.7 15l2.6-2.6c1.1.7 2.4 1 3.7 1.1 3.3-.1 6.3-2.2 7.5-5.3C15.5 8.1 15.5 7.9 15.5 7.8zM10 8c0 1.1-.9 2-2 2-.3 0-.7-.1-1-.3L9.7 7C9.9 7.3 10 7.6 10 8zM8 12.5c-1 0-2.1-.3-3-.8l1.3-1.3c1.4.9 3.2.6 4.2-.8.7-1 .7-2.4 0-3.4l1.4-1.4c1.1.8 2 1.9 2.6 3.2C13.4 10.5 10.6 12.5 8 12.5z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ViewOff16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2x($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ViewOff16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2x, create_fragment$2x, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/TextInput/PasswordInput.svelte generated by Svelte v3.32.1 */

function create_if_block_6$7(ctx) {
	let label;
	let t;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[12]);
			attr(label, "for", /*id*/ ctx[16]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[13]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 4096) set_data(t, /*labelText*/ ctx[12]);

			if (dirty[0] & /*id*/ 65536) {
				attr(label, "for", /*id*/ ctx[16]);
			}

			if (dirty[0] & /*hideLabel*/ 8192) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[13]);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (108:4) {#if invalid}
function create_if_block_5$9(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--text-input__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (154:6) {#if !disabled}
function create_if_block_3$i(ctx) {
	let span;

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[1] === "text") return create_if_block_4$d;
		return create_else_block_1$3;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			span = element("span");
			if_block.c();
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if_block.m(span, null);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if_block.d();
		}
	};
}

// (158:10) {:else}
function create_else_block_1$3(ctx) {
	let t;

	return {
		c() {
			t = text(/*showPasswordLabel*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*showPasswordLabel*/ 64) set_data(t, /*showPasswordLabel*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (156:10) {#if type === "text"}
function create_if_block_4$d(ctx) {
	let t;

	return {
		c() {
			t = text(/*hidePasswordLabel*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*hidePasswordLabel*/ 32) set_data(t, /*hidePasswordLabel*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (163:6) {:else}
function create_else_block$s(ctx) {
	let view16;
	let current;

	view16 = new View16({
			props: { class: "bx--icon-visibility-on" }
		});

	return {
		c() {
			create_component(view16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(view16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(view16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(view16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(view16, detaching);
		}
	};
}

// (161:6) {#if type === "text"}
function create_if_block_2$k(ctx) {
	let viewoff16;
	let current;

	viewoff16 = new ViewOff16({
			props: { class: "bx--icon-visibility-off" }
		});

	return {
		c() {
			create_component(viewoff16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewoff16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(viewoff16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewoff16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewoff16, detaching);
		}
	};
}

// (168:2) {#if !invalid && helperText}
function create_if_block_1$w(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 2048) set_data(t, /*helperText*/ ctx[11]);

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[10]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (176:2) {#if invalid}
function create_if_block$1w(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[15]);
			attr(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 32768) set_data(t, /*invalidText*/ ctx[15]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$2y(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_aria_describedby_value;
	let input_class_value;
	let t2;
	let button;
	let t3;
	let current_block_type_index;
	let if_block3;
	let button_class_value;
	let div0_data_invalid_value;
	let t4;
	let t5;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*labelText*/ ctx[12] && create_if_block_6$7(ctx);
	let if_block1 = /*invalid*/ ctx[14] && create_if_block_5$9();

	let input_levels = [
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[14] || undefined
		},
		{
			"aria-invalid": input_aria_invalid_value = /*invalid*/ ctx[14] || undefined
		},
		{
			"aria-describedby": input_aria_describedby_value = /*invalid*/ ctx[14] ? /*errorId*/ ctx[19] : undefined
		},
		{ id: /*id*/ ctx[16] },
		{ name: /*name*/ ctx[17] },
		{ placeholder: /*placeholder*/ ctx[4] },
		{ type: /*type*/ ctx[1] },
		{ value: /*value*/ ctx[0] },
		{ disabled: /*disabled*/ ctx[10] },
		/*$$restProps*/ ctx[20],
		{
			class: input_class_value = /*size*/ ctx[3] && `bx--text-input--${/*size*/ ctx[3]}`
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block2 = !/*disabled*/ ctx[10] && create_if_block_3$i(ctx);
	const if_block_creators = [create_if_block_2$k, create_else_block$s];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*type*/ ctx[1] === "text") return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block4 = !/*invalid*/ ctx[14] && /*helperText*/ ctx[11] && create_if_block_1$w(ctx);
	let if_block5 = /*invalid*/ ctx[14] && create_if_block$1w(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();
			input = element("input");
			t2 = space();
			button = element("button");
			if (if_block2) if_block2.c();
			t3 = space();
			if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			if (if_block5) if_block5.c();
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--password-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[9]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[14]);
			attr(button, "type", "button");
			button.disabled = /*disabled*/ ctx[10];
			attr(button, "class", button_class_value = "" + ((/*tooltipPosition*/ ctx[8] && `bx--tooltip--${/*tooltipPosition*/ ctx[8]}`) + "\n        " + (/*tooltipAlignment*/ ctx[7] && `bx--tooltip--align-${/*tooltipAlignment*/ ctx[7]}`)));
			toggle_class(button, "bx--text-input--password__visibility__toggle", true);
			toggle_class(button, "bx--btn", true);
			toggle_class(button, "bx--btn--icon-only", true);
			toggle_class(button, "bx--btn--disabled", /*disabled*/ ctx[10]);
			toggle_class(button, "bx--tooltip__trigger", true);
			toggle_class(button, "bx--tooltip--a11y", true);
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[14] || undefined);
			toggle_class(div0, "bx--text-input__field-wrapper", true);
			toggle_class(div1, "bx--form-item", true);
			toggle_class(div1, "bx--text-input-wrapper", true);
			toggle_class(div1, "bx--password-input-wrapper", !/*isFluid*/ ctx[18]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, input);
			input.value = input_data.value;
			/*input_binding*/ ctx[30](input);
			append(div0, t2);
			append(div0, button);
			if (if_block2) if_block2.m(button, null);
			append(button, t3);
			if_blocks[current_block_type_index].m(button, null);
			append(div1, t4);
			if (if_block4) if_block4.m(div1, null);
			append(div1, t5);
			if (if_block5) if_block5.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[25]),
					listen(input, "input", /*input_handler*/ ctx[26]),
					listen(input, "input", /*input_handler_1*/ ctx[31]),
					listen(input, "keydown", /*keydown_handler*/ ctx[27]),
					listen(input, "focus", /*focus_handler*/ ctx[28]),
					listen(input, "blur", /*blur_handler*/ ctx[29]),
					listen(button, "click", /*click_handler_1*/ ctx[32]),
					listen(div1, "click", /*click_handler*/ ctx[21]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[22]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[23]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[24])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*labelText*/ ctx[12]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6$7(ctx);
					if_block0.c();
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*invalid*/ ctx[14]) {
				if (if_block1) {
					if (dirty[0] & /*invalid*/ 16384) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_5$9();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				(!current || dirty[0] & /*invalid*/ 16384 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[14] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*invalid*/ 16384 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[14] || undefined)) && { "aria-invalid": input_aria_invalid_value },
				(!current || dirty[0] & /*invalid, errorId*/ 540672 && input_aria_describedby_value !== (input_aria_describedby_value = /*invalid*/ ctx[14] ? /*errorId*/ ctx[19] : undefined)) && {
					"aria-describedby": input_aria_describedby_value
				},
				(!current || dirty[0] & /*id*/ 65536) && { id: /*id*/ ctx[16] },
				(!current || dirty[0] & /*name*/ 131072) && { name: /*name*/ ctx[17] },
				(!current || dirty[0] & /*placeholder*/ 16) && { placeholder: /*placeholder*/ ctx[4] },
				(!current || dirty[0] & /*type*/ 2) && { type: /*type*/ ctx[1] },
				(!current || dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) && { value: /*value*/ ctx[0] },
				(!current || dirty[0] & /*disabled*/ 1024) && { disabled: /*disabled*/ ctx[10] },
				dirty[0] & /*$$restProps*/ 1048576 && /*$$restProps*/ ctx[20],
				(!current || dirty[0] & /*size*/ 8 && input_class_value !== (input_class_value = /*size*/ ctx[3] && `bx--text-input--${/*size*/ ctx[3]}`)) && { class: input_class_value }
			]));

			if ("value" in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--password-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[9]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[14]);

			if (!/*disabled*/ ctx[10]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3$i(ctx);
					if_block2.c();
					if_block2.m(button, t3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block3 = if_blocks[current_block_type_index];

				if (!if_block3) {
					if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block3.c();
				}

				transition_in(if_block3, 1);
				if_block3.m(button, null);
			}

			if (!current || dirty[0] & /*disabled*/ 1024) {
				button.disabled = /*disabled*/ ctx[10];
			}

			if (!current || dirty[0] & /*tooltipPosition, tooltipAlignment*/ 384 && button_class_value !== (button_class_value = "" + ((/*tooltipPosition*/ ctx[8] && `bx--tooltip--${/*tooltipPosition*/ ctx[8]}`) + "\n        " + (/*tooltipAlignment*/ ctx[7] && `bx--tooltip--align-${/*tooltipAlignment*/ ctx[7]}`)))) {
				attr(button, "class", button_class_value);
			}

			if (dirty[0] & /*tooltipPosition, tooltipAlignment*/ 384) {
				toggle_class(button, "bx--text-input--password__visibility__toggle", true);
			}

			if (dirty[0] & /*tooltipPosition, tooltipAlignment*/ 384) {
				toggle_class(button, "bx--btn", true);
			}

			if (dirty[0] & /*tooltipPosition, tooltipAlignment*/ 384) {
				toggle_class(button, "bx--btn--icon-only", true);
			}

			if (dirty[0] & /*tooltipPosition, tooltipAlignment, disabled*/ 1408) {
				toggle_class(button, "bx--btn--disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*tooltipPosition, tooltipAlignment*/ 384) {
				toggle_class(button, "bx--tooltip__trigger", true);
			}

			if (dirty[0] & /*tooltipPosition, tooltipAlignment*/ 384) {
				toggle_class(button, "bx--tooltip--a11y", true);
			}

			if (!current || dirty[0] & /*invalid*/ 16384 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[14] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!/*invalid*/ ctx[14] && /*helperText*/ ctx[11]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_1$w(ctx);
					if_block4.c();
					if_block4.m(div1, t5);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*invalid*/ ctx[14]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block$1w(ctx);
					if_block5.c();
					if_block5.m(div1, null);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (dirty[0] & /*isFluid*/ 262144) {
				toggle_class(div1, "bx--password-input-wrapper", !/*isFluid*/ ctx[18]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			/*input_binding*/ ctx[30](null);
			if (if_block2) if_block2.d();
			if_blocks[current_block_type_index].d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2y($$self, $$props, $$invalidate) {
	let isFluid;
	let errorId;

	const omit_props_names = [
		"size","value","type","placeholder","hidePasswordLabel","showPasswordLabel","tooltipAlignment","tooltipPosition","light","disabled","helperText","labelText","hideLabel","invalid","invalidText","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { type = "password" } = $$props;
	let { placeholder = "" } = $$props;
	let { hidePasswordLabel = "Hide password" } = $$props;
	let { showPasswordLabel = "Show password" } = $$props;
	let { tooltipAlignment = "center" } = $$props;
	let { tooltipPosition = "bottom" } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { helperText = "" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("Form");

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(2, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(0, value = target.value);
	};

	const click_handler_1 = () => {
		$$invalidate(1, type = type === "password" ? "text" : "password");
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(3, size = $$new_props.size);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("type" in $$new_props) $$invalidate(1, type = $$new_props.type);
		if ("placeholder" in $$new_props) $$invalidate(4, placeholder = $$new_props.placeholder);
		if ("hidePasswordLabel" in $$new_props) $$invalidate(5, hidePasswordLabel = $$new_props.hidePasswordLabel);
		if ("showPasswordLabel" in $$new_props) $$invalidate(6, showPasswordLabel = $$new_props.showPasswordLabel);
		if ("tooltipAlignment" in $$new_props) $$invalidate(7, tooltipAlignment = $$new_props.tooltipAlignment);
		if ("tooltipPosition" in $$new_props) $$invalidate(8, tooltipPosition = $$new_props.tooltipPosition);
		if ("light" in $$new_props) $$invalidate(9, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(10, disabled = $$new_props.disabled);
		if ("helperText" in $$new_props) $$invalidate(11, helperText = $$new_props.helperText);
		if ("labelText" in $$new_props) $$invalidate(12, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(13, hideLabel = $$new_props.hideLabel);
		if ("invalid" in $$new_props) $$invalidate(14, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(15, invalidText = $$new_props.invalidText);
		if ("id" in $$new_props) $$invalidate(16, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(17, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(2, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 65536) {
			 $$invalidate(19, errorId = `error-${id}`);
		}
	};

	 $$invalidate(18, isFluid = !!ctx && ctx.isFluid);

	return [
		value,
		type,
		ref,
		size,
		placeholder,
		hidePasswordLabel,
		showPasswordLabel,
		tooltipAlignment,
		tooltipPosition,
		light,
		disabled,
		helperText,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		id,
		name,
		isFluid,
		errorId,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		keydown_handler,
		focus_handler,
		blur_handler,
		input_binding,
		input_handler_1,
		click_handler_1
	];
}

class PasswordInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2y,
			create_fragment$2y,
			safe_not_equal,
			{
				size: 3,
				value: 0,
				type: 1,
				placeholder: 4,
				hidePasswordLabel: 5,
				showPasswordLabel: 6,
				tooltipAlignment: 7,
				tooltipPosition: 8,
				light: 9,
				disabled: 10,
				helperText: 11,
				labelText: 12,
				hideLabel: 13,
				invalid: 14,
				invalidText: 15,
				id: 16,
				name: 17,
				ref: 2
			},
			[-1, -1]
		);
	}
}

/* src/Tile/Tile.svelte generated by Svelte v3.32.1 */

function create_fragment$2z(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let div_levels = [/*$$restProps*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[4]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2z($$self, $$props, $$invalidate) {
	const omit_props_names = ["light"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { light = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("light" in $$new_props) $$invalidate(0, light = $$new_props.light);
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [
		light,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Tile extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2z, create_fragment$2z, safe_not_equal, { light: 0 });
	}
}

/* src/Tile/ClickableTile.svelte generated by Svelte v3.32.1 */

function create_fragment$2A(ctx) {
	let a;
	let a_rel_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	let a_levels = [
		{
			rel: a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
			? "noopener noreferrer"
			: undefined
		},
		/*$$restProps*/ ctx[3],
		{ href: /*href*/ ctx[2] }
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--tile", true);
			toggle_class(a, "bx--tile--clickable", true);
			toggle_class(a, "bx--tile--is-clicked", /*clicked*/ ctx[0]);
			toggle_class(a, "bx--tile--light", /*light*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[6]),
					listen(a, "click", /*click_handler_1*/ ctx[11]),
					listen(a, "keydown", /*keydown_handler*/ ctx[7]),
					listen(a, "keydown", /*keydown_handler_1*/ ctx[12]),
					listen(a, "mouseover", /*mouseover_handler*/ ctx[8]),
					listen(a, "mouseenter", /*mouseenter_handler*/ ctx[9]),
					listen(a, "mouseleave", /*mouseleave_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*$$restProps*/ 8 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
				? "noopener noreferrer"
				: undefined)) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3],
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] }
			]));

			toggle_class(a, "bx--tile", true);
			toggle_class(a, "bx--tile--clickable", true);
			toggle_class(a, "bx--tile--is-clicked", /*clicked*/ ctx[0]);
			toggle_class(a, "bx--tile--light", /*light*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2A($$self, $$props, $$invalidate) {
	const omit_props_names = ["clicked","light","href"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { clicked = false } = $$props;
	let { light = false } = $$props;
	let { href = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	const click_handler_1 = () => {
		$$invalidate(0, clicked = !clicked);
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === " " || key === "Enter") {
			$$invalidate(0, clicked = !clicked);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("clicked" in $$new_props) $$invalidate(0, clicked = $$new_props.clicked);
		if ("light" in $$new_props) $$invalidate(1, light = $$new_props.light);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [
		clicked,
		light,
		href,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		keydown_handler_1
	];
}

class ClickableTile extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2A, create_fragment$2A, safe_not_equal, { clicked: 0, light: 1, href: 2 });
	}
}

/* src/Tile/ExpandableTile.svelte generated by Svelte v3.32.1 */
const get_below_slot_changes = dirty => ({});
const get_below_slot_context = ctx => ({});
const get_above_slot_changes = dirty => ({});
const get_above_slot_context = ctx => ({});

function create_fragment$2B(ctx) {
	let button;
	let div3;
	let div0;
	let span0;
	let t0;
	let div1;
	let span1;

	let t1_value = (/*expanded*/ ctx[0]
	? /*tileExpandedLabel*/ ctx[7]
	: /*tileCollapsedLabel*/ ctx[8]) + "";

	let t1;
	let t2;
	let chevrondown16;
	let t3;
	let div2;
	let span2;
	let button_title_value;
	let button_style_value;
	let current;
	let mounted;
	let dispose;
	const above_slot_template = /*#slots*/ ctx[15].above;
	const above_slot = create_slot(above_slot_template, ctx, /*$$scope*/ ctx[14], get_above_slot_context);
	chevrondown16 = new ChevronDown16({});
	const below_slot_template = /*#slots*/ ctx[15].below;
	const below_slot = create_slot(below_slot_template, ctx, /*$$scope*/ ctx[14], get_below_slot_context);

	let button_levels = [
		{ type: "button" },
		{ id: /*id*/ ctx[10] },
		{ "aria-expanded": /*expanded*/ ctx[0] },
		{ tabindex: /*tabindex*/ ctx[9] },
		{
			title: button_title_value = /*expanded*/ ctx[0]
			? /*tileExpandedIconText*/ ctx[6]
			: /*tileCollapsedIconText*/ ctx[5]
		},
		/*$$restProps*/ ctx[13],
		{
			style: button_style_value = /*expanded*/ ctx[0]
			? /*$$restProps*/ ctx[13].style
			: `${/*$$restProps*/ ctx[13].style}; max-height: ${/*tileMaxHeight*/ ctx[1] + /*tilePadding*/ ctx[2]}px`
		}
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			div3 = element("div");
			div0 = element("div");
			span0 = element("span");
			if (above_slot) above_slot.c();
			t0 = space();
			div1 = element("div");
			span1 = element("span");
			t1 = text(t1_value);
			t2 = space();
			create_component(chevrondown16.$$.fragment);
			t3 = space();
			div2 = element("div");
			span2 = element("span");
			if (below_slot) below_slot.c();
			toggle_class(span0, "bx--tile-content__above-the-fold", true);
			toggle_class(div0, "bx--tile-content", true);
			toggle_class(div1, "bx--tile__chevron", true);
			toggle_class(span2, "bx--tile-content__below-the-fold", true);
			toggle_class(div2, "bx--tile-content", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--tile", true);
			toggle_class(button, "bx--tile--expandable", true);
			toggle_class(button, "bx--tile--is-expanded", /*expanded*/ ctx[0]);
			toggle_class(button, "bx--tile--light", /*light*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, div3);
			append(div3, div0);
			append(div0, span0);

			if (above_slot) {
				above_slot.m(span0, null);
			}

			/*div0_binding*/ ctx[21](div0);
			append(div3, t0);
			append(div3, div1);
			append(div1, span1);
			append(span1, t1);
			append(div1, t2);
			mount_component(chevrondown16, div1, null);
			append(div3, t3);
			append(div3, div2);
			append(div2, span2);

			if (below_slot) {
				below_slot.m(span2, null);
			}

			/*div3_binding*/ ctx[22](div3);
			/*button_binding*/ ctx[23](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[16]),
					listen(button, "click", /*click_handler_1*/ ctx[24]),
					listen(button, "keypress", /*keypress_handler*/ ctx[17]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[18]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[19]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[20])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (above_slot) {
				if (above_slot.p && dirty & /*$$scope*/ 16384) {
					update_slot(above_slot, above_slot_template, ctx, /*$$scope*/ ctx[14], dirty, get_above_slot_changes, get_above_slot_context);
				}
			}

			if ((!current || dirty & /*expanded, tileExpandedLabel, tileCollapsedLabel*/ 385) && t1_value !== (t1_value = (/*expanded*/ ctx[0]
			? /*tileExpandedLabel*/ ctx[7]
			: /*tileCollapsedLabel*/ ctx[8]) + "")) set_data(t1, t1_value);

			if (below_slot) {
				if (below_slot.p && dirty & /*$$scope*/ 16384) {
					update_slot(below_slot, below_slot_template, ctx, /*$$scope*/ ctx[14], dirty, get_below_slot_changes, get_below_slot_context);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*id*/ 1024) && { id: /*id*/ ctx[10] },
				(!current || dirty & /*expanded*/ 1) && { "aria-expanded": /*expanded*/ ctx[0] },
				(!current || dirty & /*tabindex*/ 512) && { tabindex: /*tabindex*/ ctx[9] },
				(!current || dirty & /*expanded, tileExpandedIconText, tileCollapsedIconText*/ 97 && button_title_value !== (button_title_value = /*expanded*/ ctx[0]
				? /*tileExpandedIconText*/ ctx[6]
				: /*tileCollapsedIconText*/ ctx[5])) && { title: button_title_value },
				dirty & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13],
				(!current || dirty & /*expanded, $$restProps, tileMaxHeight, tilePadding*/ 8199 && button_style_value !== (button_style_value = /*expanded*/ ctx[0]
				? /*$$restProps*/ ctx[13].style
				: `${/*$$restProps*/ ctx[13].style}; max-height: ${/*tileMaxHeight*/ ctx[1] + /*tilePadding*/ ctx[2]}px`)) && { style: button_style_value }
			]));

			toggle_class(button, "bx--tile", true);
			toggle_class(button, "bx--tile--expandable", true);
			toggle_class(button, "bx--tile--is-expanded", /*expanded*/ ctx[0]);
			toggle_class(button, "bx--tile--light", /*light*/ ctx[4]);
		},
		i(local) {
			if (current) return;
			transition_in(above_slot, local);
			transition_in(chevrondown16.$$.fragment, local);
			transition_in(below_slot, local);
			current = true;
		},
		o(local) {
			transition_out(above_slot, local);
			transition_out(chevrondown16.$$.fragment, local);
			transition_out(below_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (above_slot) above_slot.d(detaching);
			/*div0_binding*/ ctx[21](null);
			destroy_component(chevrondown16);
			if (below_slot) below_slot.d(detaching);
			/*div3_binding*/ ctx[22](null);
			/*button_binding*/ ctx[23](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2B($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"expanded","light","tileMaxHeight","tilePadding","tileCollapsedIconText","tileExpandedIconText","tileExpandedLabel","tileCollapsedLabel","tabindex","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { expanded = false } = $$props;
	let { light = false } = $$props;
	let { tileMaxHeight = 0 } = $$props;
	let { tilePadding = 0 } = $$props;
	let { tileCollapsedIconText = "Interact to expand Tile" } = $$props;
	let { tileExpandedIconText = "Interact to collapse Tile" } = $$props;
	let { tileExpandedLabel = "" } = $$props;
	let { tileCollapsedLabel = "" } = $$props;
	let { tabindex = "0" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	let refContent = null;
	let refAbove = null;

	afterUpdate(() => {
		if (tileMaxHeight === 0) {
			$$invalidate(1, tileMaxHeight = refAbove.getBoundingClientRect().height);
		}

		const style = getComputedStyle(ref);
		$$invalidate(2, tilePadding = parseInt(style.getPropertyValue("padding-top"), 10) + parseInt(style.getPropertyValue("padding-bottom"), 10));
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function keypress_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			refAbove = $$value;
			$$invalidate(12, refAbove);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			refContent = $$value;
			$$invalidate(11, refContent);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(3, ref);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(0, expanded = !expanded);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(13, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("expanded" in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ("light" in $$new_props) $$invalidate(4, light = $$new_props.light);
		if ("tileMaxHeight" in $$new_props) $$invalidate(1, tileMaxHeight = $$new_props.tileMaxHeight);
		if ("tilePadding" in $$new_props) $$invalidate(2, tilePadding = $$new_props.tilePadding);
		if ("tileCollapsedIconText" in $$new_props) $$invalidate(5, tileCollapsedIconText = $$new_props.tileCollapsedIconText);
		if ("tileExpandedIconText" in $$new_props) $$invalidate(6, tileExpandedIconText = $$new_props.tileExpandedIconText);
		if ("tileExpandedLabel" in $$new_props) $$invalidate(7, tileExpandedLabel = $$new_props.tileExpandedLabel);
		if ("tileCollapsedLabel" in $$new_props) $$invalidate(8, tileCollapsedLabel = $$new_props.tileCollapsedLabel);
		if ("tabindex" in $$new_props) $$invalidate(9, tabindex = $$new_props.tabindex);
		if ("id" in $$new_props) $$invalidate(10, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(3, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
	};

	return [
		expanded,
		tileMaxHeight,
		tilePadding,
		ref,
		light,
		tileCollapsedIconText,
		tileExpandedIconText,
		tileExpandedLabel,
		tileCollapsedLabel,
		tabindex,
		id,
		refContent,
		refAbove,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		keypress_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		div0_binding,
		div3_binding,
		button_binding,
		click_handler_1
	];
}

class ExpandableTile extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2B, create_fragment$2B, safe_not_equal, {
			expanded: 0,
			light: 4,
			tileMaxHeight: 1,
			tilePadding: 2,
			tileCollapsedIconText: 5,
			tileExpandedIconText: 6,
			tileExpandedLabel: 7,
			tileCollapsedLabel: 8,
			tabindex: 9,
			id: 10,
			ref: 3
		});
	}
}

/* src/Tile/SelectableTile.svelte generated by Svelte v3.32.1 */

function create_fragment$2C(ctx) {
	let input;
	let t0;
	let label;
	let span0;
	let checkmarkfilled16;
	let t1;
	let span1;
	let current;
	let mounted;
	let dispose;

	checkmarkfilled16 = new CheckmarkFilled16({
			props: {
				"aria-label": /*iconDescription*/ ctx[6],
				title: /*iconDescription*/ ctx[6]
			}
		});

	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let label_levels = [
		{ for: /*id*/ ctx[7] },
		{ tabindex: /*tabindex*/ ctx[5] },
		/*$$restProps*/ ctx[9]
	];

	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	return {
		c() {
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			create_component(checkmarkfilled16.$$.fragment);
			t1 = space();
			span1 = element("span");
			if (default_slot) default_slot.c();
			attr(input, "type", "checkbox");
			attr(input, "tabindex", "-1");
			input.checked = /*selected*/ ctx[0];
			attr(input, "id", /*id*/ ctx[7]);
			input.value = /*value*/ ctx[4];
			attr(input, "name", /*name*/ ctx[8]);
			attr(input, "title", /*title*/ ctx[3]);
			toggle_class(input, "bx--tile-input", true);
			toggle_class(span0, "bx--tile__checkmark", true);
			toggle_class(span1, "bx--tile-content", true);
			set_attributes(label, label_data);
			toggle_class(label, "bx--tile", true);
			toggle_class(label, "bx--tile--selectable", true);
			toggle_class(label, "bx--tile--is-selected", /*selected*/ ctx[0]);
			toggle_class(label, "bx--tile--light", /*light*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			/*input_binding*/ ctx[17](input);
			insert(target, t0, anchor);
			insert(target, label, anchor);
			append(label, span0);
			mount_component(checkmarkfilled16, span0, null);
			append(label, t1);
			append(label, span1);

			if (default_slot) {
				default_slot.m(span1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(label, "click", /*click_handler*/ ctx[12]),
					listen(label, "click", prevent_default(/*click_handler_1*/ ctx[18])),
					listen(label, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(label, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(label, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(label, "keydown", /*keydown_handler*/ ctx[16]),
					listen(label, "keydown", /*keydown_handler_1*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*selected*/ 1) {
				input.checked = /*selected*/ ctx[0];
			}

			if (!current || dirty & /*id*/ 128) {
				attr(input, "id", /*id*/ ctx[7]);
			}

			if (!current || dirty & /*value*/ 16) {
				input.value = /*value*/ ctx[4];
			}

			if (!current || dirty & /*name*/ 256) {
				attr(input, "name", /*name*/ ctx[8]);
			}

			if (!current || dirty & /*title*/ 8) {
				attr(input, "title", /*title*/ ctx[3]);
			}

			const checkmarkfilled16_changes = {};
			if (dirty & /*iconDescription*/ 64) checkmarkfilled16_changes["aria-label"] = /*iconDescription*/ ctx[6];
			if (dirty & /*iconDescription*/ 64) checkmarkfilled16_changes.title = /*iconDescription*/ ctx[6];
			checkmarkfilled16.$set(checkmarkfilled16_changes);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				(!current || dirty & /*id*/ 128) && { for: /*id*/ ctx[7] },
				(!current || dirty & /*tabindex*/ 32) && { tabindex: /*tabindex*/ ctx[5] },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(label, "bx--tile", true);
			toggle_class(label, "bx--tile--selectable", true);
			toggle_class(label, "bx--tile--is-selected", /*selected*/ ctx[0]);
			toggle_class(label, "bx--tile--light", /*light*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(checkmarkfilled16.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkfilled16.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[17](null);
			if (detaching) detach(t0);
			if (detaching) detach(label);
			destroy_component(checkmarkfilled16);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2C($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"selected","light","title","value","tabindex","iconDescription","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = false } = $$props;
	let { light = false } = $$props;
	let { title = "title" } = $$props;
	let { value = "value" } = $$props;
	let { tabindex = "0" } = $$props;
	let { iconDescription = "Tile checkmark" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(0, selected = !selected);
	};

	const keydown_handler_1 = e => {
		if (e.key === " " || e.key === "Enter") {
			e.preventDefault();
			$$invalidate(0, selected = !selected);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("selected" in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ("light" in $$new_props) $$invalidate(2, light = $$new_props.light);
		if ("title" in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ("value" in $$new_props) $$invalidate(4, value = $$new_props.value);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("iconDescription" in $$new_props) $$invalidate(6, iconDescription = $$new_props.iconDescription);
		if ("id" in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(8, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected, id*/ 129) {
			 dispatch(selected ? "select" : "deselect", id);
		}
	};

	return [
		selected,
		ref,
		light,
		title,
		value,
		tabindex,
		iconDescription,
		id,
		name,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		input_binding,
		click_handler_1,
		keydown_handler_1
	];
}

class SelectableTile extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2C, create_fragment$2C, safe_not_equal, {
			selected: 0,
			light: 2,
			title: 3,
			value: 4,
			tabindex: 5,
			iconDescription: 6,
			id: 7,
			name: 8,
			ref: 1
		});
	}
}

/* src/Tile/RadioTile.svelte generated by Svelte v3.32.1 */

function create_fragment$2D(ctx) {
	let input;
	let t0;
	let label;
	let span0;
	let checkmarkfilled16;
	let t1;
	let span1;
	let current;
	let mounted;
	let dispose;

	checkmarkfilled16 = new CheckmarkFilled16({
			props: {
				"aria-label": /*iconDescription*/ ctx[4],
				title: /*iconDescription*/ ctx[4]
			}
		});

	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
	let label_levels = [{ for: /*id*/ ctx[5] }, /*$$restProps*/ ctx[9]];
	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	return {
		c() {
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			create_component(checkmarkfilled16.$$.fragment);
			t1 = space();
			span1 = element("span");
			if (default_slot) default_slot.c();
			attr(input, "type", "radio");
			attr(input, "id", /*id*/ ctx[5]);
			attr(input, "name", /*name*/ ctx[6]);
			input.value = /*value*/ ctx[2];
			input.checked = /*checked*/ ctx[0];
			attr(input, "tabindex", /*tabindex*/ ctx[3]);
			toggle_class(input, "bx--tile-input", true);
			toggle_class(span0, "bx--tile__checkmark", true);
			toggle_class(span1, "bx--tile-content", true);
			set_attributes(label, label_data);
			toggle_class(label, "bx--tile", true);
			toggle_class(label, "bx--tile--selectable", true);
			toggle_class(label, "bx--tile--is-selected", /*checked*/ ctx[0]);
			toggle_class(label, "bx--tile--light", /*light*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			insert(target, t0, anchor);
			insert(target, label, anchor);
			append(label, span0);
			mount_component(checkmarkfilled16, span0, null);
			append(label, t1);
			append(label, span1);

			if (default_slot) {
				default_slot.m(span1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[17]),
					listen(input, "change", /*change_handler_1*/ ctx[19]),
					listen(input, "keydown", /*keydown_handler*/ ctx[18]),
					listen(input, "keydown", /*keydown_handler_1*/ ctx[20]),
					listen(label, "click", /*click_handler*/ ctx[13]),
					listen(label, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(label, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(label, "mouseleave", /*mouseleave_handler*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*id*/ 32) {
				attr(input, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty & /*name*/ 64) {
				attr(input, "name", /*name*/ ctx[6]);
			}

			if (!current || dirty & /*value*/ 4) {
				input.value = /*value*/ ctx[2];
			}

			if (!current || dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (!current || dirty & /*tabindex*/ 8) {
				attr(input, "tabindex", /*tabindex*/ ctx[3]);
			}

			const checkmarkfilled16_changes = {};
			if (dirty & /*iconDescription*/ 16) checkmarkfilled16_changes["aria-label"] = /*iconDescription*/ ctx[4];
			if (dirty & /*iconDescription*/ 16) checkmarkfilled16_changes.title = /*iconDescription*/ ctx[4];
			checkmarkfilled16.$set(checkmarkfilled16_changes);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				(!current || dirty & /*id*/ 32) && { for: /*id*/ ctx[5] },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(label, "bx--tile", true);
			toggle_class(label, "bx--tile--selectable", true);
			toggle_class(label, "bx--tile--is-selected", /*checked*/ ctx[0]);
			toggle_class(label, "bx--tile--light", /*light*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(checkmarkfilled16.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkfilled16.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			if (detaching) detach(t0);
			if (detaching) detach(label);
			destroy_component(checkmarkfilled16);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2D($$self, $$props, $$invalidate) {
	const omit_props_names = ["checked","light","value","tabindex","iconDescription","id","name"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { checked = false } = $$props;
	let { light = false } = $$props;
	let { value = "" } = $$props;
	let { tabindex = "0" } = $$props;
	let { iconDescription = "Tile checkmark" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	const { add, update, selectedValue } = getContext("TileGroup");
	component_subscribe($$self, selectedValue, value => $$invalidate(10, $selectedValue = value));
	add({ value, checked });

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	const change_handler_1 = () => {
		update(value);
	};

	const keydown_handler_1 = e => {
		if (e.key === " " || e.key === "Enter") {
			e.preventDefault();
			update(value);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ("light" in $$new_props) $$invalidate(1, light = $$new_props.light);
		if ("value" in $$new_props) $$invalidate(2, value = $$new_props.value);
		if ("tabindex" in $$new_props) $$invalidate(3, tabindex = $$new_props.tabindex);
		if ("iconDescription" in $$new_props) $$invalidate(4, iconDescription = $$new_props.iconDescription);
		if ("id" in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(6, name = $$new_props.name);
		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, $selectedValue*/ 1028) {
			 $$invalidate(0, checked = value === $selectedValue);
		}
	};

	return [
		checked,
		light,
		value,
		tabindex,
		iconDescription,
		id,
		name,
		update,
		selectedValue,
		$$restProps,
		$selectedValue,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		keydown_handler,
		change_handler_1,
		keydown_handler_1
	];
}

class RadioTile extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2D, create_fragment$2D, safe_not_equal, {
			checked: 0,
			light: 1,
			value: 2,
			tabindex: 3,
			iconDescription: 4,
			id: 5,
			name: 6
		});
	}
}

/* src/Tile/TileGroup.svelte generated by Svelte v3.32.1 */

function create_if_block$1x(ctx) {
	let legend_1;
	let t;

	return {
		c() {
			legend_1 = element("legend");
			t = text(/*legend*/ ctx[1]);
			toggle_class(legend_1, "bx--label", true);
		},
		m(target, anchor) {
			insert(target, legend_1, anchor);
			append(legend_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*legend*/ 2) set_data(t, /*legend*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(legend_1);
		}
	};
}

function create_fragment$2E(ctx) {
	let fieldset;
	let t;
	let div;
	let current;
	let if_block = /*legend*/ ctx[1] && create_if_block$1x(ctx);
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let fieldset_levels = [{ disabled: /*disabled*/ ctx[0] }, /*$$restProps*/ ctx[3]];
	let fieldset_data = {};

	for (let i = 0; i < fieldset_levels.length; i += 1) {
		fieldset_data = assign(fieldset_data, fieldset_levels[i]);
	}

	return {
		c() {
			fieldset = element("fieldset");
			if (if_block) if_block.c();
			t = space();
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(fieldset, fieldset_data);
			toggle_class(fieldset, "bx--tile-group", true);
		},
		m(target, anchor) {
			insert(target, fieldset, anchor);
			if (if_block) if_block.m(fieldset, null);
			append(fieldset, t);
			append(fieldset, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*legend*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1x(ctx);
					if_block.c();
					if_block.m(fieldset, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			set_attributes(fieldset, fieldset_data = get_spread_update(fieldset_levels, [
				(!current || dirty & /*disabled*/ 1) && { disabled: /*disabled*/ ctx[0] },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(fieldset, "bx--tile-group", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(fieldset);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2E($$self, $$props, $$invalidate) {
	const omit_props_names = ["selected","disabled","legend"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = undefined } = $$props;
	let { disabled = false } = $$props;
	let { legend = "" } = $$props;
	const dispatch = createEventDispatcher();
	const selectedValue = writable(selected);
	component_subscribe($$self, selectedValue, value => $$invalidate(5, $selectedValue = value));

	setContext("TileGroup", {
		selectedValue,
		add: ({ checked, value }) => {
			if (checked) {
				selectedValue.set(value);
			}
		},
		update: value => {
			selectedValue.set(value);
		}
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("selected" in $$new_props) $$invalidate(4, selected = $$new_props.selected);
		if ("disabled" in $$new_props) $$invalidate(0, disabled = $$new_props.disabled);
		if ("legend" in $$new_props) $$invalidate(1, legend = $$new_props.legend);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue*/ 32) {
			 $$invalidate(4, selected = $selectedValue);
		}

		if ($$self.$$.dirty & /*$selectedValue*/ 32) {
			 dispatch("select", $selectedValue);
		}
	};

	return [
		disabled,
		legend,
		selectedValue,
		$$restProps,
		selected,
		$selectedValue,
		$$scope,
		slots
	];
}

class TileGroup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2E, create_fragment$2E, safe_not_equal, { selected: 4, disabled: 0, legend: 1 });
	}
}

/* src/TimePicker/TimePicker.svelte generated by Svelte v3.32.1 */

function create_if_block_1$x(ctx) {
	let label;
	let t;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[9]);
			attr(label, "for", /*id*/ ctx[13]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 512) set_data(t, /*labelText*/ ctx[9]);

			if (dirty & /*id*/ 8192) {
				attr(label, "for", /*id*/ ctx[13]);
			}

			if (dirty & /*hideLabel*/ 1024) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			}

			if (dirty & /*disabled*/ 256) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[8]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (112:2) {#if invalid}
function create_if_block$1y(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[12]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*invalidText*/ 4096) set_data(t, /*invalidText*/ ctx[12]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$2F(ctx) {
	let div2;
	let div1;
	let div0;
	let t0;
	let input;
	let input_data_invalid_value;
	let t1;
	let t2;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*labelText*/ ctx[9] && create_if_block_1$x(ctx);

	let input_levels = [
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{ pattern: /*pattern*/ ctx[5] },
		{ placeholder: /*placeholder*/ ctx[4] },
		{ maxlength: /*maxlength*/ ctx[6] },
		{ id: /*id*/ ctx[13] },
		{ name: /*name*/ ctx[14] },
		{ type: /*type*/ ctx[3] },
		{ value: /*value*/ ctx[0] },
		{ disabled: /*disabled*/ ctx[8] },
		/*$$restProps*/ ctx[15]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	let if_block1 = /*invalid*/ ctx[11] && create_if_block$1y(ctx);

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			input = element("input");
			t1 = space();
			if (default_slot) default_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			set_attributes(input, input_data);
			toggle_class(input, "bx--time-picker__input-field", true);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[7]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[11]);
			toggle_class(div0, "bx--time-picker__input", true);
			toggle_class(div1, "bx--time-picker", true);
			toggle_class(div1, "bx--time-picker--light", /*light*/ ctx[7]);
			toggle_class(div1, "bx--time-picker--sm", /*size*/ ctx[2] === "sm");
			toggle_class(div1, "bx--time-picker--xl", /*size*/ ctx[2] === "xl");
			toggle_class(div1, "bx--select--light", /*light*/ ctx[7]);
			toggle_class(div2, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			append(div0, input);
			input.value = input_data.value;
			/*input_binding*/ ctx[26](input);
			append(div1, t1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div2, t2);
			if (if_block1) if_block1.m(div2, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[22]),
					listen(input, "input", /*input_handler*/ ctx[23]),
					listen(input, "input", /*input_handler_1*/ ctx[27]),
					listen(input, "focus", /*focus_handler*/ ctx[24]),
					listen(input, "blur", /*blur_handler*/ ctx[25]),
					listen(div2, "click", /*click_handler*/ ctx[18]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[19]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[20]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[21])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*labelText*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$x(ctx);
					if_block0.c();
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				(!current || dirty & /*invalid*/ 2048 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty & /*pattern*/ 32) && { pattern: /*pattern*/ ctx[5] },
				(!current || dirty & /*placeholder*/ 16) && { placeholder: /*placeholder*/ ctx[4] },
				(!current || dirty & /*maxlength*/ 64) && { maxlength: /*maxlength*/ ctx[6] },
				(!current || dirty & /*id*/ 8192) && { id: /*id*/ ctx[13] },
				(!current || dirty & /*name*/ 16384) && { name: /*name*/ ctx[14] },
				(!current || dirty & /*type*/ 8) && { type: /*type*/ ctx[3] },
				(!current || dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) && { value: /*value*/ ctx[0] },
				(!current || dirty & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] },
				dirty & /*$$restProps*/ 32768 && /*$$restProps*/ ctx[15]
			]));

			if ("value" in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--time-picker__input-field", true);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[7]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[11]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			if (dirty & /*light*/ 128) {
				toggle_class(div1, "bx--time-picker--light", /*light*/ ctx[7]);
			}

			if (dirty & /*size*/ 4) {
				toggle_class(div1, "bx--time-picker--sm", /*size*/ ctx[2] === "sm");
			}

			if (dirty & /*size*/ 4) {
				toggle_class(div1, "bx--time-picker--xl", /*size*/ ctx[2] === "xl");
			}

			if (dirty & /*light*/ 128) {
				toggle_class(div1, "bx--select--light", /*light*/ ctx[7]);
			}

			if (/*invalid*/ ctx[11]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1y(ctx);
					if_block1.c();
					if_block1.m(div2, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			/*input_binding*/ ctx[26](null);
			if (default_slot) default_slot.d(detaching);
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2F($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","value","type","placeholder","pattern","maxlength","light","disabled","labelText","hideLabel","invalid","invalidText","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { type = "text" } = $$props;
	let { placeholder = "hh:mm" } = $$props;
	let { pattern = "(1[012]|[1-9]):[0-5][0-9](\\s)?" } = $$props;
	let { maxlength = 5 } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(0, value = target.value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(15, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("type" in $$new_props) $$invalidate(3, type = $$new_props.type);
		if ("placeholder" in $$new_props) $$invalidate(4, placeholder = $$new_props.placeholder);
		if ("pattern" in $$new_props) $$invalidate(5, pattern = $$new_props.pattern);
		if ("maxlength" in $$new_props) $$invalidate(6, maxlength = $$new_props.maxlength);
		if ("light" in $$new_props) $$invalidate(7, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
		if ("labelText" in $$new_props) $$invalidate(9, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(10, hideLabel = $$new_props.hideLabel);
		if ("invalid" in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ("id" in $$new_props) $$invalidate(13, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(14, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	return [
		value,
		ref,
		size,
		type,
		placeholder,
		pattern,
		maxlength,
		light,
		disabled,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		id,
		name,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		input_binding,
		input_handler_1
	];
}

class TimePicker extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2F, create_fragment$2F, safe_not_equal, {
			size: 2,
			value: 0,
			type: 3,
			placeholder: 4,
			pattern: 5,
			maxlength: 6,
			light: 7,
			disabled: 8,
			labelText: 9,
			hideLabel: 10,
			invalid: 11,
			invalidText: 12,
			id: 13,
			name: 14,
			ref: 1
		});
	}
}

/* src/TimePicker/TimePickerSelect.svelte generated by Svelte v3.32.1 */

function create_if_block$1z(ctx) {
	let label;
	let t;

	return {
		c() {
			label = element("label");
			t = text(/*labelText*/ ctx[4]);
			attr(label, "for", /*id*/ ctx[6]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 16) set_data(t, /*labelText*/ ctx[4]);

			if (dirty & /*id*/ 64) {
				attr(label, "for", /*id*/ ctx[6]);
			}

			if (dirty & /*hideLabel*/ 32) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

function create_fragment$2G(ctx) {
	let div;
	let t0;
	let select;
	let t1;
	let chevrondownglyph;
	let current;
	let mounted;
	let dispose;
	let if_block = /*labelText*/ ctx[4] && create_if_block$1z(ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	chevrondownglyph = new ChevronDownGlyph({
			props: {
				"aria-label": /*iconDescription*/ ctx[3],
				title: /*iconDescription*/ ctx[3],
				class: "bx--select__arrow"
			}
		});

	let div_levels = [/*$$restProps*/ ctx[9]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t0 = space();
			select = element("select");
			if (default_slot) default_slot.c();
			t1 = space();
			create_component(chevrondownglyph.$$.fragment);
			attr(select, "id", /*id*/ ctx[6]);
			attr(select, "name", /*name*/ ctx[7]);
			select.disabled = /*disabled*/ ctx[2];
			toggle_class(select, "bx--select-input", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--select", true);
			toggle_class(div, "bx--time-picker__select", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t0);
			append(div, select);

			if (default_slot) {
				default_slot.m(select, null);
			}

			select_option(select, /*value*/ ctx[0]);
			/*select_binding*/ ctx[17](select);
			append(div, t1);
			mount_component(chevrondownglyph, div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*change_handler*/ ctx[18]),
					listen(div, "click", /*click_handler*/ ctx[13]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*labelText*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1z(ctx);
					if_block.c();
					if_block.m(div, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}

			if (!current || dirty & /*id*/ 64) {
				attr(select, "id", /*id*/ ctx[6]);
			}

			if (!current || dirty & /*name*/ 128) {
				attr(select, "name", /*name*/ ctx[7]);
			}

			if (!current || dirty & /*disabled*/ 4) {
				select.disabled = /*disabled*/ ctx[2];
			}

			if (!current || dirty & /*value*/ 1) {
				select_option(select, /*value*/ ctx[0]);
			}

			const chevrondownglyph_changes = {};
			if (dirty & /*iconDescription*/ 8) chevrondownglyph_changes["aria-label"] = /*iconDescription*/ ctx[3];
			if (dirty & /*iconDescription*/ 8) chevrondownglyph_changes.title = /*iconDescription*/ ctx[3];
			chevrondownglyph.$set(chevrondownglyph_changes);
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]]));
			toggle_class(div, "bx--select", true);
			toggle_class(div, "bx--time-picker__select", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(chevrondownglyph.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(chevrondownglyph.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			/*select_binding*/ ctx[17](null);
			destroy_component(chevrondownglyph);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2G($$self, $$props, $$invalidate) {
	const omit_props_names = ["value","disabled","iconDescription","labelText","hideLabel","id","name","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = "" } = $$props;
	let { disabled = false } = $$props;
	let { iconDescription = "Open list of options" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = true } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	const selectedValue = writable(value);
	component_subscribe($$self, selectedValue, value => $$invalidate(10, $selectedValue = value));
	setContext("TimePickerSelect", { selectedValue });

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function select_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler = ({ target }) => {
		selectedValue.set(target.value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("disabled" in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ("iconDescription" in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
		if ("labelText" in $$new_props) $$invalidate(4, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(5, hideLabel = $$new_props.hideLabel);
		if ("id" in $$new_props) $$invalidate(6, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(7, name = $$new_props.name);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue*/ 1024) {
			 $$invalidate(0, value = $selectedValue);
		}

		if ($$self.$$.dirty & /*value*/ 1) {
			 selectedValue.set(value);
		}
	};

	return [
		value,
		ref,
		disabled,
		iconDescription,
		labelText,
		hideLabel,
		id,
		name,
		selectedValue,
		$$restProps,
		$selectedValue,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		select_binding,
		change_handler
	];
}

class TimePickerSelect extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2G, create_fragment$2G, safe_not_equal, {
			value: 0,
			disabled: 2,
			iconDescription: 3,
			labelText: 4,
			hideLabel: 5,
			id: 6,
			name: 7,
			ref: 1
		});
	}
}

/* src/Toggle/Toggle.svelte generated by Svelte v3.32.1 */

function create_fragment$2H(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let t1;
	let t2;
	let span2;
	let span0;
	let t3;
	let t4;
	let span1;
	let t5;
	let label_aria_label_value;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[8]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(/*labelText*/ ctx[5]);
			t2 = space();
			span2 = element("span");
			span0 = element("span");
			t3 = text(/*labelA*/ ctx[3]);
			t4 = space();
			span1 = element("span");
			t5 = text(/*labelB*/ ctx[4]);
			attr(input, "type", "checkbox");
			input.checked = /*toggled*/ ctx[0];
			input.disabled = /*disabled*/ ctx[2];
			attr(input, "id", /*id*/ ctx[6]);
			attr(input, "name", /*name*/ ctx[7]);
			toggle_class(input, "bx--toggle-input", true);
			toggle_class(input, "bx--toggle-input--small", /*size*/ ctx[1] === "sm");
			attr(span0, "aria-hidden", "true");
			toggle_class(span0, "bx--toggle__text--off", true);
			attr(span1, "aria-hidden", "true");
			toggle_class(span1, "bx--toggle__text--on", true);
			toggle_class(span2, "bx--toggle__switch", true);

			attr(label, "aria-label", label_aria_label_value = /*labelText*/ ctx[5]
			? undefined
			: /*$$props*/ ctx[9]["aria-label"] || "Toggle");

			attr(label, "for", /*id*/ ctx[6]);
			toggle_class(label, "bx--toggle-input__label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			append(label, t1);
			append(label, t2);
			append(label, span2);
			append(span2, span0);
			append(span0, t3);
			append(span2, t4);
			append(span2, span1);
			append(span1, t5);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[14]),
					listen(input, "change", /*change_handler_1*/ ctx[18]),
					listen(input, "keyup", /*keyup_handler*/ ctx[15]),
					listen(input, "keyup", /*keyup_handler_1*/ ctx[19]),
					listen(input, "focus", /*focus_handler*/ ctx[16]),
					listen(input, "blur", /*blur_handler*/ ctx[17]),
					listen(div, "click", /*click_handler*/ ctx[10]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[11]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[12]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*toggled*/ 1) {
				input.checked = /*toggled*/ ctx[0];
			}

			if (dirty & /*disabled*/ 4) {
				input.disabled = /*disabled*/ ctx[2];
			}

			if (dirty & /*id*/ 64) {
				attr(input, "id", /*id*/ ctx[6]);
			}

			if (dirty & /*name*/ 128) {
				attr(input, "name", /*name*/ ctx[7]);
			}

			if (dirty & /*size*/ 2) {
				toggle_class(input, "bx--toggle-input--small", /*size*/ ctx[1] === "sm");
			}

			if (dirty & /*labelText*/ 32) set_data(t1, /*labelText*/ ctx[5]);
			if (dirty & /*labelA*/ 8) set_data(t3, /*labelA*/ ctx[3]);
			if (dirty & /*labelB*/ 16) set_data(t5, /*labelB*/ ctx[4]);

			if (dirty & /*labelText, $$props*/ 544 && label_aria_label_value !== (label_aria_label_value = /*labelText*/ ctx[5]
			? undefined
			: /*$$props*/ ctx[9]["aria-label"] || "Toggle")) {
				attr(label, "aria-label", label_aria_label_value);
			}

			if (dirty & /*id*/ 64) {
				attr(label, "for", /*id*/ ctx[6]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]]));
			toggle_class(div, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2H($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","toggled","disabled","labelA","labelB","labelText","id","name"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = "default" } = $$props;
	let { toggled = false } = $$props;
	let { disabled = false } = $$props;
	let { labelA = "Off" } = $$props;
	let { labelB = "On" } = $$props;
	let { labelText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	const change_handler_1 = () => {
		$$invalidate(0, toggled = !toggled);
	};

	const keyup_handler_1 = e => {
		if (e.key === " " || e.key === "Enter") {
			e.preventDefault();
			$$invalidate(0, toggled = !toggled);
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("toggled" in $$new_props) $$invalidate(0, toggled = $$new_props.toggled);
		if ("disabled" in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ("labelA" in $$new_props) $$invalidate(3, labelA = $$new_props.labelA);
		if ("labelB" in $$new_props) $$invalidate(4, labelB = $$new_props.labelB);
		if ("labelText" in $$new_props) $$invalidate(5, labelText = $$new_props.labelText);
		if ("id" in $$new_props) $$invalidate(6, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(7, name = $$new_props.name);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*toggled*/ 1) {
			 dispatch("toggle", { toggled });
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		toggled,
		size,
		disabled,
		labelA,
		labelB,
		labelText,
		id,
		name,
		$$restProps,
		$$props,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		change_handler_1,
		keyup_handler_1
	];
}

class Toggle extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2H, create_fragment$2H, safe_not_equal, {
			size: 1,
			toggled: 0,
			disabled: 2,
			labelA: 3,
			labelB: 4,
			labelText: 5,
			id: 6,
			name: 7
		});
	}
}

/* src/Toggle/ToggleSkeleton.svelte generated by Svelte v3.32.1 */

function create_if_block$1A(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*labelText*/ ctx[1]);
			toggle_class(span, "bx--toggle__label-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 2) set_data(t, /*labelText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$2I(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let t1;
	let span0;
	let t2;
	let span1;
	let t3;
	let span2;
	let label_aria_label_value;
	let mounted;
	let dispose;
	let if_block = /*labelText*/ ctx[1] && create_if_block$1A(ctx);
	let div_levels = [/*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			if (if_block) if_block.c();
			t1 = space();
			span0 = element("span");
			t2 = space();
			span1 = element("span");
			t3 = space();
			span2 = element("span");
			attr(input, "type", "checkbox");
			attr(input, "id", /*id*/ ctx[2]);
			toggle_class(input, "bx--toggle", true);
			toggle_class(input, "bx--toggle--small", /*size*/ ctx[0] === "sm");
			toggle_class(input, "bx--skeleton", true);
			toggle_class(span0, "bx--toggle__text--left", true);
			toggle_class(span1, "bx--toggle__appearance", true);
			toggle_class(span2, "bx--toggle__text--right", true);

			attr(label, "aria-label", label_aria_label_value = /*labelText*/ ctx[1]
			? undefined
			: /*$$props*/ ctx[4]["aria-label"] || "Toggle is loading");

			attr(label, "for", /*id*/ ctx[2]);
			toggle_class(label, "bx--toggle__label", true);
			toggle_class(label, "bx--skeleton", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			if (if_block) if_block.m(label, null);
			append(label, t1);
			append(label, span0);
			append(label, t2);
			append(label, span1);
			append(label, t3);
			append(label, span2);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[5]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*id*/ 4) {
				attr(input, "id", /*id*/ ctx[2]);
			}

			if (dirty & /*size*/ 1) {
				toggle_class(input, "bx--toggle--small", /*size*/ ctx[0] === "sm");
			}

			if (/*labelText*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1A(ctx);
					if_block.c();
					if_block.m(label, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*labelText, $$props*/ 18 && label_aria_label_value !== (label_aria_label_value = /*labelText*/ ctx[1]
			? undefined
			: /*$$props*/ ctx[4]["aria-label"] || "Toggle is loading")) {
				attr(label, "aria-label", label_aria_label_value);
			}

			if (dirty & /*id*/ 4) {
				attr(label, "for", /*id*/ ctx[2]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2I($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","labelText","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = "default" } = $$props;
	let { labelText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ("labelText" in $$new_props) $$invalidate(1, labelText = $$new_props.labelText);
		if ("id" in $$new_props) $$invalidate(2, id = $$new_props.id);
	};

	$$props = exclude_internal_props($$props);

	return [
		size,
		labelText,
		id,
		$$restProps,
		$$props,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ToggleSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2I, create_fragment$2I, safe_not_equal, { size: 0, labelText: 1, id: 2 });
	}
}

/* src/ToggleSmall/ToggleSmall.svelte generated by Svelte v3.32.1 */

function create_fragment$2J(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let t1;
	let t2;
	let span2;
	let svg;
	let path;
	let t3;
	let span0;
	let t4;
	let t5;
	let span1;
	let t6;
	let label_aria_label_value;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[7]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(/*labelText*/ ctx[4]);
			t2 = space();
			span2 = element("span");
			svg = svg_element("svg");
			path = svg_element("path");
			t3 = space();
			span0 = element("span");
			t4 = text(/*labelA*/ ctx[2]);
			t5 = space();
			span1 = element("span");
			t6 = text(/*labelB*/ ctx[3]);
			attr(input, "type", "checkbox");
			input.checked = /*toggled*/ ctx[0];
			input.disabled = /*disabled*/ ctx[1];
			attr(input, "id", /*id*/ ctx[5]);
			attr(input, "name", /*name*/ ctx[6]);
			toggle_class(input, "bx--toggle-input", true);
			toggle_class(input, "bx--toggle-input--small", true);
			attr(path, "d", "M2.2 2.7L5 0 6 1 2.2 5 0 2.7 1 1.5z");
			attr(svg, "width", "6");
			attr(svg, "height", "5");
			attr(svg, "viewBox", "0 0 6 5");
			toggle_class(svg, "bx--toggle__check", true);
			attr(span0, "aria-hidden", "true");
			toggle_class(span0, "bx--toggle__text--off", true);
			attr(span1, "aria-hidden", "true");
			toggle_class(span1, "bx--toggle__text--on", true);
			toggle_class(span2, "bx--toggle__switch", true);

			attr(label, "aria-label", label_aria_label_value = /*labelText*/ ctx[4]
			? undefined
			: /*$$props*/ ctx[8]["aria-label"] || "Toggle");

			attr(label, "for", /*id*/ ctx[5]);
			toggle_class(label, "bx--toggle-input__label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			append(label, t1);
			append(label, t2);
			append(label, span2);
			append(span2, svg);
			append(svg, path);
			append(span2, t3);
			append(span2, span0);
			append(span0, t4);
			append(span2, t5);
			append(span2, span1);
			append(span1, t6);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[13]),
					listen(input, "change", /*change_handler_1*/ ctx[17]),
					listen(input, "keyup", /*keyup_handler*/ ctx[14]),
					listen(input, "keyup", /*keyup_handler_1*/ ctx[18]),
					listen(input, "focus", /*focus_handler*/ ctx[15]),
					listen(input, "blur", /*blur_handler*/ ctx[16]),
					listen(div, "click", /*click_handler*/ ctx[9]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*toggled*/ 1) {
				input.checked = /*toggled*/ ctx[0];
			}

			if (dirty & /*disabled*/ 2) {
				input.disabled = /*disabled*/ ctx[1];
			}

			if (dirty & /*id*/ 32) {
				attr(input, "id", /*id*/ ctx[5]);
			}

			if (dirty & /*name*/ 64) {
				attr(input, "name", /*name*/ ctx[6]);
			}

			if (dirty & /*labelText*/ 16) set_data(t1, /*labelText*/ ctx[4]);
			if (dirty & /*labelA*/ 4) set_data(t4, /*labelA*/ ctx[2]);
			if (dirty & /*labelB*/ 8) set_data(t6, /*labelB*/ ctx[3]);

			if (dirty & /*labelText, $$props*/ 272 && label_aria_label_value !== (label_aria_label_value = /*labelText*/ ctx[4]
			? undefined
			: /*$$props*/ ctx[8]["aria-label"] || "Toggle")) {
				attr(label, "aria-label", label_aria_label_value);
			}

			if (dirty & /*id*/ 32) {
				attr(label, "for", /*id*/ ctx[5]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]]));
			toggle_class(div, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2J($$self, $$props, $$invalidate) {
	const omit_props_names = ["toggled","disabled","labelA","labelB","labelText","id","name"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { toggled = false } = $$props;
	let { disabled = false } = $$props;
	let { labelA = "Off" } = $$props;
	let { labelB = "On" } = $$props;
	let { labelText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	const change_handler_1 = () => {
		$$invalidate(0, toggled = !toggled);
	};

	const keyup_handler_1 = e => {
		if (e.key === " " || e.key === "Enter") {
			e.preventDefault();
			$$invalidate(0, toggled = !toggled);
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("toggled" in $$new_props) $$invalidate(0, toggled = $$new_props.toggled);
		if ("disabled" in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
		if ("labelA" in $$new_props) $$invalidate(2, labelA = $$new_props.labelA);
		if ("labelB" in $$new_props) $$invalidate(3, labelB = $$new_props.labelB);
		if ("labelText" in $$new_props) $$invalidate(4, labelText = $$new_props.labelText);
		if ("id" in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(6, name = $$new_props.name);
	};

	$$props = exclude_internal_props($$props);

	return [
		toggled,
		disabled,
		labelA,
		labelB,
		labelText,
		id,
		name,
		$$restProps,
		$$props,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		change_handler_1,
		keyup_handler_1
	];
}

class ToggleSmall extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2J, create_fragment$2J, safe_not_equal, {
			toggled: 0,
			disabled: 1,
			labelA: 2,
			labelB: 3,
			labelText: 4,
			id: 5,
			name: 6
		});
	}
}

/* src/ToggleSmall/ToggleSmallSkeleton.svelte generated by Svelte v3.32.1 */

function create_if_block$1B(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*labelText*/ ctx[0]);
			toggle_class(span, "bx--toggle__label-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 1) set_data(t, /*labelText*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$2K(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let t1;
	let span;
	let svg;
	let path;
	let label_aria_label_value;
	let mounted;
	let dispose;
	let if_block = /*labelText*/ ctx[0] && create_if_block$1B(ctx);
	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			if (if_block) if_block.c();
			t1 = space();
			span = element("span");
			svg = svg_element("svg");
			path = svg_element("path");
			attr(input, "type", "checkbox");
			attr(input, "id", /*id*/ ctx[1]);
			toggle_class(input, "bx--toggle", true);
			toggle_class(input, "bx--toggle--small", true);
			toggle_class(input, "bx--skeleton", true);
			attr(path, "d", "M2.2403 2.7299L4.9245 0 6 1.1117 2.2384 5 0 2.6863 1.0612 1.511z");
			attr(svg, "width", "6");
			attr(svg, "height", "5");
			attr(svg, "viewBox", "0 0 6 5");
			toggle_class(svg, "bx--toggle__check", true);
			toggle_class(span, "bx--toggle__appearance", true);

			attr(label, "aria-label", label_aria_label_value = /*labelText*/ ctx[0]
			? undefined
			: /*$$props*/ ctx[3]["aria-label"] || "Toggle is loading");

			attr(label, "for", /*id*/ ctx[1]);
			toggle_class(label, "bx--toggle__label", true);
			toggle_class(label, "bx--skeleton", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			if (if_block) if_block.m(label, null);
			append(label, t1);
			append(label, span);
			append(span, svg);
			append(svg, path);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[4]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*id*/ 2) {
				attr(input, "id", /*id*/ ctx[1]);
			}

			if (/*labelText*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1B(ctx);
					if_block.c();
					if_block.m(label, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*labelText, $$props*/ 9 && label_aria_label_value !== (label_aria_label_value = /*labelText*/ ctx[0]
			? undefined
			: /*$$props*/ ctx[3]["aria-label"] || "Toggle is loading")) {
				attr(label, "aria-label", label_aria_label_value);
			}

			if (dirty & /*id*/ 2) {
				attr(label, "for", /*id*/ ctx[1]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2K($$self, $$props, $$invalidate) {
	const omit_props_names = ["labelText","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { labelText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("labelText" in $$new_props) $$invalidate(0, labelText = $$new_props.labelText);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
	};

	$$props = exclude_internal_props($$props);

	return [
		labelText,
		id,
		$$restProps,
		$$props,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ToggleSmallSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2K, create_fragment$2K, safe_not_equal, { labelText: 0, id: 1 });
	}
}

/* node_modules/carbon-icons-svelte/lib/Information16/Information16.svelte generated by Svelte v3.32.1 */

function create_if_block$1C(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$L(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1C(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1C(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$2L(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$L(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Information16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M8.5 11L8.5 6.5 6.5 6.5 6.5 7.5 7.5 7.5 7.5 11 6 11 6 12 10 12 10 11zM8 3.5c-.4 0-.8.3-.8.8S7.6 5 8 5c.4 0 .8-.3.8-.8S8.4 3.5 8 3.5z");
			attr(path1, "d", "M8,15c-3.9,0-7-3.1-7-7s3.1-7,7-7s7,3.1,7,7S11.9,15,8,15z M8,2C4.7,2,2,4.7,2,8s2.7,6,6,6s6-2.7,6-6S11.3,2,8,2z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Information16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2L($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Information16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2L, create_fragment$2L, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/Tooltip/Tooltip.svelte generated by Svelte v3.32.1 */
const get_triggerText_slot_changes_1 = dirty => ({});
const get_triggerText_slot_context_1 = ctx => ({});
const get_icon_slot_changes = dirty => ({});
const get_icon_slot_context = ctx => ({});
const get_triggerText_slot_changes = dirty => ({});
const get_triggerText_slot_context = ctx => ({});

// (194:2) {:else}
function create_else_block$t(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const triggerText_slot_template = /*#slots*/ ctx[21].triggerText;
	const triggerText_slot = create_slot(triggerText_slot_template, ctx, /*$$scope*/ ctx[20], get_triggerText_slot_context_1);
	const triggerText_slot_or_fallback = triggerText_slot || fallback_block_2$3(ctx);
	let div_levels = [/*buttonProps*/ ctx[12]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (triggerText_slot_or_fallback) triggerText_slot_or_fallback.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (triggerText_slot_or_fallback) {
				triggerText_slot_or_fallback.m(div, null);
			}

			/*div_binding*/ ctx[27](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", stop_propagation(prevent_default(/*openMenu*/ ctx[15]))),
					listen(div, "focus", /*openMenu*/ ctx[15]),
					listen(div, "blur", /*onBlur*/ ctx[14]),
					listen(div, "keydown", /*onKeydown*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (triggerText_slot) {
				if (triggerText_slot.p && dirty & /*$$scope*/ 1048576) {
					update_slot(triggerText_slot, triggerText_slot_template, ctx, /*$$scope*/ ctx[20], dirty, get_triggerText_slot_changes_1, get_triggerText_slot_context_1);
				}
			} else {
				if (triggerText_slot_or_fallback && triggerText_slot_or_fallback.p && dirty & /*triggerText*/ 2048) {
					triggerText_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*buttonProps*/ 4096 && /*buttonProps*/ ctx[12]]));
		},
		i(local) {
			if (current) return;
			transition_in(triggerText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(triggerText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (triggerText_slot_or_fallback) triggerText_slot_or_fallback.d(detaching);
			/*div_binding*/ ctx[27](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (178:2) {#if !hideIcon}
function create_if_block_1$y(ctx) {
	let div1;
	let t;
	let div0;
	let current;
	let mounted;
	let dispose;
	const triggerText_slot_template = /*#slots*/ ctx[21].triggerText;
	const triggerText_slot = create_slot(triggerText_slot_template, ctx, /*$$scope*/ ctx[20], get_triggerText_slot_context);
	const triggerText_slot_or_fallback = triggerText_slot || fallback_block_1$6(ctx);
	const icon_slot_template = /*#slots*/ ctx[21].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[20], get_icon_slot_context);
	const icon_slot_or_fallback = icon_slot || fallback_block$M(ctx);
	let div0_levels = [/*buttonProps*/ ctx[12]];
	let div0_data = {};

	for (let i = 0; i < div0_levels.length; i += 1) {
		div0_data = assign(div0_data, div0_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (triggerText_slot_or_fallback) triggerText_slot_or_fallback.c();
			t = space();
			div0 = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			set_attributes(div0, div0_data);
			attr(div1, "id", /*triggerId*/ ctx[10]);
			toggle_class(div1, "bx--tooltip__label", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);

			if (triggerText_slot_or_fallback) {
				triggerText_slot_or_fallback.m(div1, null);
			}

			append(div1, t);
			append(div1, div0);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div0, null);
			}

			/*div0_binding*/ ctx[25](div0);
			/*div1_binding*/ ctx[26](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", stop_propagation(prevent_default(/*openMenu*/ ctx[15]))),
					listen(div0, "focus", /*openMenu*/ ctx[15]),
					listen(div0, "blur", /*onBlur*/ ctx[14]),
					listen(div0, "keydown", /*onKeydown*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (triggerText_slot) {
				if (triggerText_slot.p && dirty & /*$$scope*/ 1048576) {
					update_slot(triggerText_slot, triggerText_slot_template, ctx, /*$$scope*/ ctx[20], dirty, get_triggerText_slot_changes, get_triggerText_slot_context);
				}
			} else {
				if (triggerText_slot_or_fallback && triggerText_slot_or_fallback.p && dirty & /*triggerText*/ 2048) {
					triggerText_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (icon_slot) {
				if (icon_slot.p && dirty & /*$$scope*/ 1048576) {
					update_slot(icon_slot, icon_slot_template, ctx, /*$$scope*/ ctx[20], dirty, get_icon_slot_changes, get_icon_slot_context);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && dirty & /*icon, iconName*/ 384) {
					icon_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_attributes(div0, div0_data = get_spread_update(div0_levels, [dirty & /*buttonProps*/ 4096 && /*buttonProps*/ ctx[12]]));

			if (!current || dirty & /*triggerId*/ 1024) {
				attr(div1, "id", /*triggerId*/ ctx[10]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(triggerText_slot_or_fallback, local);
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(triggerText_slot_or_fallback, local);
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (triggerText_slot_or_fallback) triggerText_slot_or_fallback.d(detaching);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
			/*div0_binding*/ ctx[25](null);
			/*div1_binding*/ ctx[26](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (203:31) {triggerText}
function fallback_block_2$3(ctx) {
	let t;

	return {
		c() {
			t = text(/*triggerText*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*triggerText*/ 2048) set_data(t, /*triggerText*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (180:31) {triggerText}
function fallback_block_1$6(ctx) {
	let t;

	return {
		c() {
			t = text(/*triggerText*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*triggerText*/ 2048) set_data(t, /*triggerText*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (189:26)            
function fallback_block$M(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[7];

	function switch_props(ctx) {
		return { props: { name: /*iconName*/ ctx[8] } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty & /*iconName*/ 256) switch_instance_changes.name = /*iconName*/ ctx[8];

			if (switch_value !== (switch_value = /*icon*/ ctx[7])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (206:2) {#if open}
function create_if_block$1D(ctx) {
	let div1;
	let span;
	let t;
	let div0;
	let div0_aria_describedby_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[21].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t = space();
			div0 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(span, "bx--tooltip__caret", true);
			attr(div0, "tabindex", "-1");
			attr(div0, "role", "dialog");
			attr(div0, "aria-describedby", div0_aria_describedby_value = /*$$props*/ ctx[17]["tooltipBodyId"]);
			attr(div0, "aria-labelledby", /*triggerId*/ ctx[10]);
			toggle_class(div0, "bx--tooltip__content", true);
			attr(div1, "role", "tooltip");
			attr(div1, "id", /*tooltipId*/ ctx[9]);
			attr(div1, "data-floating-menu-direction", /*direction*/ ctx[5]);
			toggle_class(div1, "bx--tooltip", true);
			toggle_class(div1, "bx--tooltip--shown", /*open*/ ctx[0]);
			toggle_class(div1, "bx--tooltip--top", /*direction*/ ctx[5] === "top");
			toggle_class(div1, "bx--tooltip--right", /*direction*/ ctx[5] === "right");
			toggle_class(div1, "bx--tooltip--bottom", /*direction*/ ctx[5] === "bottom");
			toggle_class(div1, "bx--tooltip--left", /*direction*/ ctx[5] === "left");
			toggle_class(div1, "bx--tooltip--align-center", /*align*/ ctx[4] === "center");
			toggle_class(div1, "bx--tooltip--align-start", /*align*/ ctx[4] === "start");
			toggle_class(div1, "bx--tooltip--align-end", /*align*/ ctx[4] === "end");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(div1, t);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div1_binding_1*/ ctx[28](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", stop_propagation(/*click_handler*/ ctx[22])),
					listen(div0, "mousedown", stop_propagation(/*mousedown_handler*/ ctx[23]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1048576) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[20], dirty, null, null);
				}
			}

			if (!current || dirty & /*$$props*/ 131072 && div0_aria_describedby_value !== (div0_aria_describedby_value = /*$$props*/ ctx[17]["tooltipBodyId"])) {
				attr(div0, "aria-describedby", div0_aria_describedby_value);
			}

			if (!current || dirty & /*triggerId*/ 1024) {
				attr(div0, "aria-labelledby", /*triggerId*/ ctx[10]);
			}

			if (!current || dirty & /*tooltipId*/ 512) {
				attr(div1, "id", /*tooltipId*/ ctx[9]);
			}

			if (!current || dirty & /*direction*/ 32) {
				attr(div1, "data-floating-menu-direction", /*direction*/ ctx[5]);
			}

			if (dirty & /*open*/ 1) {
				toggle_class(div1, "bx--tooltip--shown", /*open*/ ctx[0]);
			}

			if (dirty & /*direction*/ 32) {
				toggle_class(div1, "bx--tooltip--top", /*direction*/ ctx[5] === "top");
			}

			if (dirty & /*direction*/ 32) {
				toggle_class(div1, "bx--tooltip--right", /*direction*/ ctx[5] === "right");
			}

			if (dirty & /*direction*/ 32) {
				toggle_class(div1, "bx--tooltip--bottom", /*direction*/ ctx[5] === "bottom");
			}

			if (dirty & /*direction*/ 32) {
				toggle_class(div1, "bx--tooltip--left", /*direction*/ ctx[5] === "left");
			}

			if (dirty & /*align*/ 16) {
				toggle_class(div1, "bx--tooltip--align-center", /*align*/ ctx[4] === "center");
			}

			if (dirty & /*align*/ 16) {
				toggle_class(div1, "bx--tooltip--align-start", /*align*/ ctx[4] === "start");
			}

			if (dirty & /*align*/ 16) {
				toggle_class(div1, "bx--tooltip--align-end", /*align*/ ctx[4] === "end");
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div1_binding_1*/ ctx[28](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$2M(ctx) {
	let t0;
	let div;
	let current_block_type_index;
	let if_block0;
	let t1;
	let div_style_value;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1$y, create_else_block$t];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*hideIcon*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*open*/ ctx[0] && create_if_block$1D(ctx);

	let div_levels = [
		/*$$restProps*/ ctx[16],
		{
			style: div_style_value = "" + ((/*open*/ ctx[0] ? "z-index: 1;" : "") + /*$$restProps*/ ctx[16].style + "; position: relative;")
		}
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			t0 = space();
			div = element("div");
			if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(document.body, "mousedown", /*mousedown_handler_1*/ ctx[24]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div, t1);
			}

			if (/*open*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*open*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$1D(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 65536 && /*$$restProps*/ ctx[16],
				(!current || dirty & /*open, $$restProps*/ 65537 && div_style_value !== (div_style_value = "" + ((/*open*/ ctx[0] ? "z-index: 1;" : "") + /*$$restProps*/ ctx[16].style + "; position: relative;"))) && { style: div_style_value }
			]));
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function instance$2M($$self, $$props, $$invalidate) {
	let buttonProps;

	const omit_props_names = [
		"align","direction","open","hideIcon","icon","iconDescription","iconName","tabindex","tooltipId","triggerId","triggerText","ref","refTooltip","refIcon"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { align = "center" } = $$props;
	let { direction = "bottom" } = $$props;
	let { open = false } = $$props;
	let { hideIcon = false } = $$props;
	let { icon = Information16 } = $$props;
	let { iconDescription = "" } = $$props;
	let { iconName = "" } = $$props;
	let { tabindex = "0" } = $$props;
	let { tooltipId = "ccs-" + Math.random().toString(36) } = $$props;
	let { triggerId = "ccs-" + Math.random().toString(36) } = $$props;
	let { triggerText = "" } = $$props;
	let { ref = null } = $$props;
	let { refTooltip = null } = $$props;
	let { refIcon = null } = $$props;
	const dispatch = createEventDispatcher();

	function onKeydown(e) {
		if (e.key === "Escape") {
			e.stopPropagation();
			$$invalidate(0, open = false);
		} else if (e.key === " " || e.key === "Enter") {
			e.stopPropagation();
			e.preventDefault();
			$$invalidate(0, open = true);
		}
	}

	function onBlur({ relatedTarget }) {
		if (refTooltip && !refTooltip.contains(relatedTarget)) {
			$$invalidate(0, open = false);
		}
	}

	function openMenu() {
		$$invalidate(0, open = true);
	}

	afterUpdate(() => {
		if (open) {
			const button = ref.getBoundingClientRect();
			const tooltip = refTooltip.getBoundingClientRect();
			let iconWidth = 16;
			let iconHeight = 16;

			if (refIcon) {
				const icon = refIcon.getBoundingClientRect();
				iconWidth = icon.width;
				iconHeight = icon.height;
			}

			let offsetX = 0;
			let offsetY = 0;

			switch (direction) {
				case "bottom":
					if (hideIcon) {
						offsetX = -1 * (tooltip.width / 2 - button.width / 2);
					} else {
						offsetX = -1 * (tooltip.width / 2 - button.width + iconWidth / 2);
					}
					offsetY = iconHeight / 2;
					break;
				case "right":
					offsetX = button.width + 6;
					offsetY = -1 * (tooltip.height / 2 + iconWidth / 2 - 3);
					break;
				case "left":
					if (hideIcon) {
						offsetX = -1 * (tooltip.width + 6 + 1);
					} else {
						offsetX = -1 * (tooltip.width - button.width + iconWidth + 8);
					}
					offsetY = -1 * (tooltip.height / 2 + button.height) - 2;
					break;
				case "top":
					if (hideIcon) {
						offsetX = -1 * (tooltip.width / 2 - button.width / 2);
					} else {
						offsetX = -1 * (tooltip.width / 2 - button.width + iconWidth / 2 + 1);
					}
					offsetY = -1 * (tooltip.height + button.height + iconWidth / 2 - 1);
					break;
			}

			$$invalidate(2, refTooltip.style.left = offsetX + "px", refTooltip);
			$$invalidate(2, refTooltip.style.marginTop = offsetY + "px", refTooltip);
		}
	});

	function click_handler(event) {
		bubble($$self, event);
	}

	function mousedown_handler(event) {
		bubble($$self, event);
	}

	const mousedown_handler_1 = ({ target }) => {
		if (open && target.contains(refTooltip)) {
			if (refIcon) {
				refIcon.focus();
			} else if (ref) {
				ref.focus();
			}

			$$invalidate(0, open = false);
		}
	};

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			refIcon = $$value;
			$$invalidate(3, refIcon);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function div1_binding_1($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			refTooltip = $$value;
			$$invalidate(2, refTooltip);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(17, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("align" in $$new_props) $$invalidate(4, align = $$new_props.align);
		if ("direction" in $$new_props) $$invalidate(5, direction = $$new_props.direction);
		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ("hideIcon" in $$new_props) $$invalidate(6, hideIcon = $$new_props.hideIcon);
		if ("icon" in $$new_props) $$invalidate(7, icon = $$new_props.icon);
		if ("iconDescription" in $$new_props) $$invalidate(18, iconDescription = $$new_props.iconDescription);
		if ("iconName" in $$new_props) $$invalidate(8, iconName = $$new_props.iconName);
		if ("tabindex" in $$new_props) $$invalidate(19, tabindex = $$new_props.tabindex);
		if ("tooltipId" in $$new_props) $$invalidate(9, tooltipId = $$new_props.tooltipId);
		if ("triggerId" in $$new_props) $$invalidate(10, triggerId = $$new_props.triggerId);
		if ("triggerText" in $$new_props) $$invalidate(11, triggerText = $$new_props.triggerText);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("refTooltip" in $$new_props) $$invalidate(2, refTooltip = $$new_props.refTooltip);
		if ("refIcon" in $$new_props) $$invalidate(3, refIcon = $$new_props.refIcon);
		if ("$$scope" in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open*/ 1) {
			 dispatch(open ? "open" : "close");
		}

		 $$invalidate(12, buttonProps = {
			role: "button",
			"aria-haspopup": "true",
			id: hideIcon ? triggerId : undefined,
			class: hideIcon ? "bx--tooltip__label" : "bx--tooltip__trigger",
			"aria-expanded": open,
			"aria-describedby": open ? tooltipId : undefined,
			"aria-labelledby": triggerText ? triggerId : undefined,
			"aria-label": triggerText ? iconDescription : undefined,
			tabindex,
			style: hideIcon ? $$restProps.style : undefined
		});
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		ref,
		refTooltip,
		refIcon,
		align,
		direction,
		hideIcon,
		icon,
		iconName,
		tooltipId,
		triggerId,
		triggerText,
		buttonProps,
		onKeydown,
		onBlur,
		openMenu,
		$$restProps,
		$$props,
		iconDescription,
		tabindex,
		$$scope,
		slots,
		click_handler,
		mousedown_handler,
		mousedown_handler_1,
		div0_binding,
		div1_binding,
		div_binding,
		div1_binding_1
	];
}

class Tooltip extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2M, create_fragment$2M, safe_not_equal, {
			align: 4,
			direction: 5,
			open: 0,
			hideIcon: 6,
			icon: 7,
			iconDescription: 18,
			iconName: 8,
			tabindex: 19,
			tooltipId: 9,
			triggerId: 10,
			triggerText: 11,
			ref: 1,
			refTooltip: 2,
			refIcon: 3
		});
	}
}

/* src/TooltipDefinition/TooltipDefinition.svelte generated by Svelte v3.32.1 */

const get_tooltip_slot_changes = dirty => ({});
const get_tooltip_slot_context = ctx => ({});

// (70:25) {tooltipText}
function fallback_block$N(ctx) {
	let t;

	return {
		c() {
			t = text(/*tooltipText*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*tooltipText*/ 2) set_data(t, /*tooltipText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2N(ctx) {
	let t0;
	let div1;
	let button;
	let t1;
	let div0;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	const tooltip_slot_template = /*#slots*/ ctx[10].tooltip;
	const tooltip_slot = create_slot(tooltip_slot_template, ctx, /*$$scope*/ ctx[9], get_tooltip_slot_context);
	const tooltip_slot_or_fallback = tooltip_slot || fallback_block$N(ctx);
	let div1_levels = [/*$$restProps*/ ctx[8]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			t0 = space();
			div1 = element("div");
			button = element("button");
			if (default_slot) default_slot.c();
			t1 = space();
			div0 = element("div");
			if (tooltip_slot_or_fallback) tooltip_slot_or_fallback.c();
			attr(button, "aria-describedby", /*id*/ ctx[4]);
			toggle_class(button, "bx--tooltip--a11y", true);
			toggle_class(button, "bx--tooltip__trigger", true);
			toggle_class(button, "bx--tooltip__trigger--definition", true);
			toggle_class(button, "bx--tooltip--hidden", !/*visible*/ ctx[5]);
			toggle_class(button, "bx--tooltip--visible", /*visible*/ ctx[5]);
			toggle_class(button, "bx--tooltip--top", /*direction*/ ctx[3] === "top");
			toggle_class(button, "bx--tooltip--bottom", /*direction*/ ctx[3] === "bottom");
			toggle_class(button, "bx--tooltip--align-start", /*align*/ ctx[2] === "start");
			toggle_class(button, "bx--tooltip--align-center", /*align*/ ctx[2] === "center");
			toggle_class(button, "bx--tooltip--align-end", /*align*/ ctx[2] === "end");
			attr(div0, "role", "tooltip");
			attr(div0, "id", /*id*/ ctx[4]);
			toggle_class(div0, "bx--assistive-text", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--tooltip--definition", true);
			toggle_class(div1, "bx--tooltip--a11y", true);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, button);

			if (default_slot) {
				default_slot.m(button, null);
			}

			/*button_binding*/ ctx[17](button);
			append(div1, t1);
			append(div1, div0);

			if (tooltip_slot_or_fallback) {
				tooltip_slot_or_fallback.m(div0, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(document.body, "keydown", /*keydown_handler*/ ctx[16]),
					listen(button, "click", /*click_handler*/ ctx[11]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[12]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[13]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[14]),
					listen(button, "focus", /*focus_handler*/ ctx[15]),
					listen(button, "focus", /*show*/ ctx[7]),
					listen(button, "blur", /*hide*/ ctx[6]),
					listen(div1, "mouseenter", /*show*/ ctx[7]),
					listen(div1, "mouseleave", /*hide*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*id*/ 16) {
				attr(button, "aria-describedby", /*id*/ ctx[4]);
			}

			if (dirty & /*visible*/ 32) {
				toggle_class(button, "bx--tooltip--hidden", !/*visible*/ ctx[5]);
			}

			if (dirty & /*visible*/ 32) {
				toggle_class(button, "bx--tooltip--visible", /*visible*/ ctx[5]);
			}

			if (dirty & /*direction*/ 8) {
				toggle_class(button, "bx--tooltip--top", /*direction*/ ctx[3] === "top");
			}

			if (dirty & /*direction*/ 8) {
				toggle_class(button, "bx--tooltip--bottom", /*direction*/ ctx[3] === "bottom");
			}

			if (dirty & /*align*/ 4) {
				toggle_class(button, "bx--tooltip--align-start", /*align*/ ctx[2] === "start");
			}

			if (dirty & /*align*/ 4) {
				toggle_class(button, "bx--tooltip--align-center", /*align*/ ctx[2] === "center");
			}

			if (dirty & /*align*/ 4) {
				toggle_class(button, "bx--tooltip--align-end", /*align*/ ctx[2] === "end");
			}

			if (tooltip_slot) {
				if (tooltip_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(tooltip_slot, tooltip_slot_template, ctx, /*$$scope*/ ctx[9], dirty, get_tooltip_slot_changes, get_tooltip_slot_context);
				}
			} else {
				if (tooltip_slot_or_fallback && tooltip_slot_or_fallback.p && dirty & /*tooltipText*/ 2) {
					tooltip_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*id*/ 16) {
				attr(div0, "id", /*id*/ ctx[4]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]]));
			toggle_class(div1, "bx--tooltip--definition", true);
			toggle_class(div1, "bx--tooltip--a11y", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(tooltip_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(tooltip_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*button_binding*/ ctx[17](null);
			if (tooltip_slot_or_fallback) tooltip_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2N($$self, $$props, $$invalidate) {
	const omit_props_names = ["tooltipText","align","direction","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { tooltipText = "" } = $$props;
	let { align = "center" } = $$props;
	let { direction = "bottom" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	let visible = false;

	function hide() {
		$$invalidate(5, visible = false);
	}

	function show() {
		$$invalidate(5, visible = true);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	const keydown_handler = ({ key }) => {
		if (key === "Escape") hide();
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("tooltipText" in $$new_props) $$invalidate(1, tooltipText = $$new_props.tooltipText);
		if ("align" in $$new_props) $$invalidate(2, align = $$new_props.align);
		if ("direction" in $$new_props) $$invalidate(3, direction = $$new_props.direction);
		if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		tooltipText,
		align,
		direction,
		id,
		visible,
		hide,
		show,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		focus_handler,
		keydown_handler,
		button_binding
	];
}

class TooltipDefinition extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2N, create_fragment$2N, safe_not_equal, {
			tooltipText: 1,
			align: 2,
			direction: 3,
			id: 4,
			ref: 0
		});
	}
}

/* src/TooltipIcon/TooltipIcon.svelte generated by Svelte v3.32.1 */

const get_tooltipText_slot_changes = dirty => ({});
const get_tooltipText_slot_context = ctx => ({});

// (63:29) {tooltipText}
function fallback_block$O(ctx) {
	let t;

	return {
		c() {
			t = text(/*tooltipText*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*tooltipText*/ 2) set_data(t, /*tooltipText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2O(ctx) {
	let t0;
	let button;
	let span;
	let t1;
	let current;
	let mounted;
	let dispose;
	const tooltipText_slot_template = /*#slots*/ ctx[8].tooltipText;
	const tooltipText_slot = create_slot(tooltipText_slot_template, ctx, /*$$scope*/ ctx[7], get_tooltipText_slot_context);
	const tooltipText_slot_or_fallback = tooltipText_slot || fallback_block$O(ctx);
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let button_levels = [{ "aria-describedby": /*id*/ ctx[4] }, /*$$restProps*/ ctx[6]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			t0 = space();
			button = element("button");
			span = element("span");
			if (tooltipText_slot_or_fallback) tooltipText_slot_or_fallback.c();
			t1 = space();
			if (default_slot) default_slot.c();
			attr(span, "id", /*id*/ ctx[4]);
			toggle_class(span, "bx--assistive-text", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--tooltip__trigger", true);
			toggle_class(button, "bx--tooltip--a11y", true);
			toggle_class(button, "bx--tooltip--hidden", /*hidden*/ ctx[5]);
			toggle_class(button, "bx--tooltip--top", /*direction*/ ctx[3] === "top");
			toggle_class(button, "bx--tooltip--right", /*direction*/ ctx[3] === "right");
			toggle_class(button, "bx--tooltip--bottom", /*direction*/ ctx[3] === "bottom");
			toggle_class(button, "bx--tooltip--left", /*direction*/ ctx[3] === "left");
			toggle_class(button, "bx--tooltip--align-start", /*align*/ ctx[2] === "start");
			toggle_class(button, "bx--tooltip--align-center", /*align*/ ctx[2] === "center");
			toggle_class(button, "bx--tooltip--align-end", /*align*/ ctx[2] === "end");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, button, anchor);
			append(button, span);

			if (tooltipText_slot_or_fallback) {
				tooltipText_slot_or_fallback.m(span, null);
			}

			append(button, t1);

			if (default_slot) {
				default_slot.m(button, null);
			}

			/*button_binding*/ ctx[15](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(document.body, "keydown", /*keydown_handler*/ ctx[14]),
					listen(button, "click", /*click_handler*/ ctx[9]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(button, "mouseenter", /*mouseenter_handler_1*/ ctx[16]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[12]),
					listen(button, "focus", /*focus_handler*/ ctx[13]),
					listen(button, "focus", /*focus_handler_1*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (tooltipText_slot) {
				if (tooltipText_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(tooltipText_slot, tooltipText_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_tooltipText_slot_changes, get_tooltipText_slot_context);
				}
			} else {
				if (tooltipText_slot_or_fallback && tooltipText_slot_or_fallback.p && dirty & /*tooltipText*/ 2) {
					tooltipText_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*id*/ 16) {
				attr(span, "id", /*id*/ ctx[4]);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				(!current || dirty & /*id*/ 16) && { "aria-describedby": /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(button, "bx--tooltip__trigger", true);
			toggle_class(button, "bx--tooltip--a11y", true);
			toggle_class(button, "bx--tooltip--hidden", /*hidden*/ ctx[5]);
			toggle_class(button, "bx--tooltip--top", /*direction*/ ctx[3] === "top");
			toggle_class(button, "bx--tooltip--right", /*direction*/ ctx[3] === "right");
			toggle_class(button, "bx--tooltip--bottom", /*direction*/ ctx[3] === "bottom");
			toggle_class(button, "bx--tooltip--left", /*direction*/ ctx[3] === "left");
			toggle_class(button, "bx--tooltip--align-start", /*align*/ ctx[2] === "start");
			toggle_class(button, "bx--tooltip--align-center", /*align*/ ctx[2] === "center");
			toggle_class(button, "bx--tooltip--align-end", /*align*/ ctx[2] === "end");
		},
		i(local) {
			if (current) return;
			transition_in(tooltipText_slot_or_fallback, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(tooltipText_slot_or_fallback, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(button);
			if (tooltipText_slot_or_fallback) tooltipText_slot_or_fallback.d(detaching);
			if (default_slot) default_slot.d(detaching);
			/*button_binding*/ ctx[15](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2O($$self, $$props, $$invalidate) {
	const omit_props_names = ["tooltipText","align","direction","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { tooltipText = "" } = $$props;
	let { align = "center" } = $$props;
	let { direction = "bottom" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	let hidden = false;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	const keydown_handler = ({ key }) => {
		if (key === "Escape") {
			$$invalidate(5, hidden = true);
		}
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const mouseenter_handler_1 = () => {
		$$invalidate(5, hidden = false);
	};

	const focus_handler_1 = () => {
		$$invalidate(5, hidden = false);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("tooltipText" in $$new_props) $$invalidate(1, tooltipText = $$new_props.tooltipText);
		if ("align" in $$new_props) $$invalidate(2, align = $$new_props.align);
		if ("direction" in $$new_props) $$invalidate(3, direction = $$new_props.direction);
		if ("id" in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		tooltipText,
		align,
		direction,
		id,
		hidden,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		focus_handler,
		keydown_handler,
		button_binding,
		mouseenter_handler_1,
		focus_handler_1
	];
}

class TooltipIcon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2O, create_fragment$2O, safe_not_equal, {
			tooltipText: 1,
			align: 2,
			direction: 3,
			id: 4,
			ref: 0
		});
	}
}

/* src/Truncate/Truncate.svelte generated by Svelte v3.32.1 */

function create_fragment$2P(ctx) {
	let p;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let p_levels = [/*$$restProps*/ ctx[1]];
	let p_data = {};

	for (let i = 0; i < p_levels.length; i += 1) {
		p_data = assign(p_data, p_levels[i]);
	}

	return {
		c() {
			p = element("p");
			if (default_slot) default_slot.c();
			set_attributes(p, p_data);
			toggle_class(p, "bx--text-truncate--end", /*clamp*/ ctx[0] === "end");
			toggle_class(p, "bx--text-truncate--front", /*clamp*/ ctx[0] === "front");
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			set_attributes(p, p_data = get_spread_update(p_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(p, "bx--text-truncate--end", /*clamp*/ ctx[0] === "end");
			toggle_class(p, "bx--text-truncate--front", /*clamp*/ ctx[0] === "front");
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2P($$self, $$props, $$invalidate) {
	const omit_props_names = ["clamp"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { clamp = "end" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("clamp" in $$new_props) $$invalidate(0, clamp = $$new_props.clamp);
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [clamp, $$restProps, $$scope, slots];
}

class Truncate extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2P, create_fragment$2P, safe_not_equal, { clamp: 0 });
	}
}

const shouldRenderHamburgerMenu = writable(false);

/* node_modules/carbon-icons-svelte/lib/Menu20/Menu20.svelte generated by Svelte v3.32.1 */

function create_if_block$1E(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$P(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1E(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1E(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$2Q(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$P(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Menu20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M2 14.8H18V16H2zM2 11.2H18V12.399999999999999H2zM2 7.6H18V8.799999999999999H2zM2 4H18V5.2H2z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Menu20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2Q($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Menu20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2Q, create_fragment$2Q, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/UIShell/SideNav/HamburgerMenu.svelte generated by Svelte v3.32.1 */

function create_fragment$2R(ctx) {
	let button;
	let icon;
	let current;
	let mounted;
	let dispose;

	icon = new Icon({
			props: {
				title: /*isOpen*/ ctx[0] ? "Close" : "Open Menu",
				render: /*isOpen*/ ctx[0] ? Close20 : Menu20
			}
		});

	let button_levels = [
		{ type: "button" },
		{ title: "Open menu" },
		{ "aria-label": /*ariaLabel*/ ctx[2] },
		/*$$restProps*/ ctx[3]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			create_component(icon.$$.fragment);
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__menu-trigger", true);
			toggle_class(button, "bx--header__menu-toggle", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(icon, button, null);
			/*button_binding*/ ctx[5](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[4]),
					listen(button, "click", /*click_handler_1*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const icon_changes = {};
			if (dirty & /*isOpen*/ 1) icon_changes.title = /*isOpen*/ ctx[0] ? "Close" : "Open Menu";
			if (dirty & /*isOpen*/ 1) icon_changes.render = /*isOpen*/ ctx[0] ? Close20 : Menu20;
			icon.$set(icon_changes);

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				{ title: "Open menu" },
				(!current || dirty & /*ariaLabel*/ 4) && { "aria-label": /*ariaLabel*/ ctx[2] },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__menu-trigger", true);
			toggle_class(button, "bx--header__menu-toggle", true);
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(icon);
			/*button_binding*/ ctx[5](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2R($$self, $$props, $$invalidate) {
	const omit_props_names = ["ariaLabel","isOpen","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { ariaLabel = undefined } = $$props;
	let { isOpen = false } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => $$invalidate(0, isOpen = !isOpen);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("ariaLabel" in $$new_props) $$invalidate(2, ariaLabel = $$new_props.ariaLabel);
		if ("isOpen" in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	return [
		isOpen,
		ref,
		ariaLabel,
		$$restProps,
		click_handler,
		button_binding,
		click_handler_1
	];
}

class HamburgerMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2R, create_fragment$2R, safe_not_equal, { ariaLabel: 2, isOpen: 0, ref: 1 });
	}
}

/* src/UIShell/GlobalHeader/Header.svelte generated by Svelte v3.32.1 */
const get_platform_slot_changes = dirty => ({});
const get_platform_slot_context = ctx => ({});
const get_skip_to_content_slot_changes = dirty => ({});
const get_skip_to_content_slot_context = ctx => ({});

// (54:2) {#if ($shouldRenderHamburgerMenu && winWidth < 1056) || persistentHamburgerMenu}
function create_if_block_1$z(ctx) {
	let hamburgermenu;
	let updating_isOpen;
	let current;

	function hamburgermenu_isOpen_binding(value) {
		/*hamburgermenu_isOpen_binding*/ ctx[16].call(null, value);
	}

	let hamburgermenu_props = {};

	if (/*isSideNavOpen*/ ctx[0] !== void 0) {
		hamburgermenu_props.isOpen = /*isSideNavOpen*/ ctx[0];
	}

	hamburgermenu = new HamburgerMenu({ props: hamburgermenu_props });
	binding_callbacks.push(() => bind(hamburgermenu, "isOpen", hamburgermenu_isOpen_binding));

	return {
		c() {
			create_component(hamburgermenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(hamburgermenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const hamburgermenu_changes = {};

			if (!updating_isOpen && dirty & /*isSideNavOpen*/ 1) {
				updating_isOpen = true;
				hamburgermenu_changes.isOpen = /*isSideNavOpen*/ ctx[0];
				add_flush_callback(() => updating_isOpen = false);
			}

			hamburgermenu.$set(hamburgermenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(hamburgermenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(hamburgermenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(hamburgermenu, detaching);
		}
	};
}

// (64:4) {#if company}
function create_if_block$1F(ctx) {
	let span;
	let t0;
	let t1;

	return {
		c() {
			span = element("span");
			t0 = text(/*company*/ ctx[3]);
			t1 = text(" ");
			toggle_class(span, "bx--header__name--prefix", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*company*/ 8) set_data(t0, /*company*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (67:26) {platformName}
function fallback_block$Q(ctx) {
	let t;

	return {
		c() {
			t = text(/*platformName*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*platformName*/ 16) set_data(t, /*platformName*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2S(ctx) {
	let header;
	let t0;
	let t1;
	let a;
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[15]);
	const skip_to_content_slot_template = /*#slots*/ ctx[13]["skip-to-content"];
	const skip_to_content_slot = create_slot(skip_to_content_slot_template, ctx, /*$$scope*/ ctx[12], get_skip_to_content_slot_context);
	let if_block0 = (/*$shouldRenderHamburgerMenu*/ ctx[8] && /*winWidth*/ ctx[6] < 1056 || /*persistentHamburgerMenu*/ ctx[5]) && create_if_block_1$z(ctx);
	let if_block1 = /*company*/ ctx[3] && create_if_block$1F(ctx);
	const platform_slot_template = /*#slots*/ ctx[13].platform;
	const platform_slot = create_slot(platform_slot_template, ctx, /*$$scope*/ ctx[12], get_platform_slot_context);
	const platform_slot_or_fallback = platform_slot || fallback_block$Q(ctx);
	let a_levels = [{ href: /*href*/ ctx[2] }, /*$$restProps*/ ctx[9]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	return {
		c() {
			header = element("header");
			if (skip_to_content_slot) skip_to_content_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			a = element("a");
			if (if_block1) if_block1.c();
			t2 = space();
			if (platform_slot_or_fallback) platform_slot_or_fallback.c();
			t3 = space();
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__name", true);
			attr(header, "role", "banner");
			attr(header, "aria-label", /*ariaLabel*/ ctx[7]);
			toggle_class(header, "bx--header", true);
		},
		m(target, anchor) {
			insert(target, header, anchor);

			if (skip_to_content_slot) {
				skip_to_content_slot.m(header, null);
			}

			append(header, t0);
			if (if_block0) if_block0.m(header, null);
			append(header, t1);
			append(header, a);
			if (if_block1) if_block1.m(a, null);
			append(a, t2);

			if (platform_slot_or_fallback) {
				platform_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[17](a);
			append(header, t3);

			if (default_slot) {
				default_slot.m(header, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "resize", /*onwindowresize*/ ctx[15]),
					listen(a, "click", /*click_handler*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (skip_to_content_slot) {
				if (skip_to_content_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(skip_to_content_slot, skip_to_content_slot_template, ctx, /*$$scope*/ ctx[12], dirty, get_skip_to_content_slot_changes, get_skip_to_content_slot_context);
				}
			}

			if (/*$shouldRenderHamburgerMenu*/ ctx[8] && /*winWidth*/ ctx[6] < 1056 || /*persistentHamburgerMenu*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$shouldRenderHamburgerMenu, winWidth, persistentHamburgerMenu*/ 352) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$z(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(header, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*company*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1F(ctx);
					if_block1.c();
					if_block1.m(a, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (platform_slot) {
				if (platform_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(platform_slot, platform_slot_template, ctx, /*$$scope*/ ctx[12], dirty, get_platform_slot_changes, get_platform_slot_context);
				}
			} else {
				if (platform_slot_or_fallback && platform_slot_or_fallback.p && dirty & /*platformName*/ 16) {
					platform_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(a, "bx--header__name", true);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			}

			if (!current || dirty & /*ariaLabel*/ 128) {
				attr(header, "aria-label", /*ariaLabel*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(skip_to_content_slot, local);
			transition_in(if_block0);
			transition_in(platform_slot_or_fallback, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(skip_to_content_slot, local);
			transition_out(if_block0);
			transition_out(platform_slot_or_fallback, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			if (skip_to_content_slot) skip_to_content_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (platform_slot_or_fallback) platform_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[17](null);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2S($$self, $$props, $$invalidate) {
	let ariaLabel;

	const omit_props_names = [
		"expandedByDefault","isSideNavOpen","uiShellAriaLabel","href","company","platformName","persistentHamburgerMenu","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $shouldRenderHamburgerMenu;
	component_subscribe($$self, shouldRenderHamburgerMenu, $$value => $$invalidate(8, $shouldRenderHamburgerMenu = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	let { expandedByDefault = true } = $$props;
	let { isSideNavOpen = false } = $$props;
	let { uiShellAriaLabel = undefined } = $$props;
	let { href = undefined } = $$props;
	let { company = undefined } = $$props;
	let { platformName = "" } = $$props;
	let { persistentHamburgerMenu = false } = $$props;
	let { ref = null } = $$props;
	let winWidth = undefined;

	function click_handler(event) {
		bubble($$self, event);
	}

	function onwindowresize() {
		$$invalidate(6, winWidth = window.innerWidth);
	}

	function hamburgermenu_isOpen_binding(value) {
		isSideNavOpen = value;
		((($$invalidate(0, isSideNavOpen), $$invalidate(10, expandedByDefault)), $$invalidate(6, winWidth)), $$invalidate(5, persistentHamburgerMenu));
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("expandedByDefault" in $$new_props) $$invalidate(10, expandedByDefault = $$new_props.expandedByDefault);
		if ("isSideNavOpen" in $$new_props) $$invalidate(0, isSideNavOpen = $$new_props.isSideNavOpen);
		if ("uiShellAriaLabel" in $$new_props) $$invalidate(11, uiShellAriaLabel = $$new_props.uiShellAriaLabel);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("company" in $$new_props) $$invalidate(3, company = $$new_props.company);
		if ("platformName" in $$new_props) $$invalidate(4, platformName = $$new_props.platformName);
		if ("persistentHamburgerMenu" in $$new_props) $$invalidate(5, persistentHamburgerMenu = $$new_props.persistentHamburgerMenu);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*expandedByDefault, winWidth, persistentHamburgerMenu*/ 1120) {
			 $$invalidate(0, isSideNavOpen = expandedByDefault && winWidth >= 1056 && !persistentHamburgerMenu);
		}

		 $$invalidate(7, ariaLabel = company
		? `${company} `
		: "" + (uiShellAriaLabel || $$props["aria-label"] || platformName));
	};

	$$props = exclude_internal_props($$props);

	return [
		isSideNavOpen,
		ref,
		href,
		company,
		platformName,
		persistentHamburgerMenu,
		winWidth,
		ariaLabel,
		$shouldRenderHamburgerMenu,
		$$restProps,
		expandedByDefault,
		uiShellAriaLabel,
		$$scope,
		slots,
		click_handler,
		onwindowresize,
		hamburgermenu_isOpen_binding,
		a_binding
	];
}

class Header extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2S, create_fragment$2S, safe_not_equal, {
			expandedByDefault: 10,
			isSideNavOpen: 0,
			uiShellAriaLabel: 11,
			href: 2,
			company: 3,
			platformName: 4,
			persistentHamburgerMenu: 5,
			ref: 1
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/AppSwitcher20/AppSwitcher20.svelte generated by Svelte v3.32.1 */

function create_if_block$1G(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$R(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1G(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1G(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$2T(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$R(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "AppSwitcher20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M14 4H18V8H14zM4 4H8V8H4zM24 4H28V8H24zM14 14H18V18H14zM4 14H8V18H4zM24 14H28V18H24zM14 24H18V28H14zM4 24H8V28H4zM24 24H28V28H24z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "AppSwitcher20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2T($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class AppSwitcher20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2T, create_fragment$2T, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* src/UIShell/GlobalHeader/HeaderAction.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-19vx6se-style";
	style.textContent = ".action-text.svelte-19vx6se.svelte-19vx6se{font-size:16px;line-height:20px;text-decoration:none;color:#fff;width:100%;padding:0 1rem}.action-text.svelte-19vx6se>span.svelte-19vx6se{margin-left:0.75rem;vertical-align:top}";
	append(document.head, style);
}

const get_text_slot_changes = dirty => ({});
const get_text_slot_context = ctx => ({});

// (68:6) {#if text}
function create_if_block_1$A(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*text*/ ctx[3]);
			attr(span, "class", "svelte-19vx6se");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 8) set_data(t, /*text*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (67:22)        
function fallback_block$S(ctx) {
	let if_block_anchor;
	let if_block = /*text*/ ctx[3] && create_if_block_1$A(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*text*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$A(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (71:2) {#if isOpen}
function create_if_block$1H(ctx) {
	let div;
	let div_transition;
	let current;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--header-panel", true);
			toggle_class(div, "bx--header-panel--expanded", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[14](div);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(
					div,
					slide,
					{
						.../*transition*/ ctx[4],
						duration: /*transition*/ ctx[4] === false
						? 0
						: /*transition*/ ctx[4].duration
					},
					true
				);

				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(default_slot, local);

			if (!div_transition) div_transition = create_bidirectional_transition(
				div,
				slide,
				{
					.../*transition*/ ctx[4],
					duration: /*transition*/ ctx[4] === false
					? 0
					: /*transition*/ ctx[4].duration
				},
				false
			);

			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[14](null);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

function create_fragment$2U(ctx) {
	let div;
	let button;
	let icon_1;
	let t0;
	let t1;
	let current;
	let mounted;
	let dispose;

	icon_1 = new Icon({
			props: {
				render: /*icon*/ ctx[2] || (/*isOpen*/ ctx[0] ? Close20 : AppSwitcher20)
			}
		});

	const text_slot_template = /*#slots*/ ctx[9].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[8], get_text_slot_context);
	const text_slot_or_fallback = text_slot || fallback_block$S(ctx);
	let button_levels = [{ type: "button" }, /*$$restProps*/ ctx[7]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	let if_block = /*isOpen*/ ctx[0] && create_if_block$1H(ctx);

	return {
		c() {
			div = element("div");
			button = element("button");
			create_component(icon_1.$$.fragment);
			t0 = space();
			if (text_slot_or_fallback) text_slot_or_fallback.c();
			t1 = space();
			if (if_block) if_block.c();
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isOpen*/ ctx[0]);
			toggle_class(button, "action-text", /*text*/ ctx[3]);
			toggle_class(button, "svelte-19vx6se", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);
			mount_component(icon_1, button, null);
			append(button, t0);

			if (text_slot_or_fallback) {
				text_slot_or_fallback.m(button, null);
			}

			/*button_binding*/ ctx[12](button);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "click", /*click_handler_1*/ ctx[11]),
					listen(button, "click", /*click_handler*/ ctx[10]),
					listen(button, "click", stop_propagation(/*click_handler_2*/ ctx[13]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const icon_1_changes = {};
			if (dirty & /*icon, isOpen*/ 5) icon_1_changes.render = /*icon*/ ctx[2] || (/*isOpen*/ ctx[0] ? Close20 : AppSwitcher20);
			icon_1.$set(icon_1_changes);

			if (text_slot) {
				if (text_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[8], dirty, get_text_slot_changes, get_text_slot_context);
				}
			} else {
				if (text_slot_or_fallback && text_slot_or_fallback.p && dirty & /*text*/ 8) {
					text_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [{ type: "button" }, dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]]));
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isOpen*/ ctx[0]);
			toggle_class(button, "action-text", /*text*/ ctx[3]);
			toggle_class(button, "svelte-19vx6se", true);

			if (/*isOpen*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isOpen*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1H(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_1.$$.fragment, local);
			transition_in(text_slot_or_fallback, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(icon_1.$$.fragment, local);
			transition_out(text_slot_or_fallback, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(icon_1);
			if (text_slot_or_fallback) text_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[12](null);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2U($$self, $$props, $$invalidate) {
	const omit_props_names = ["isOpen","icon","text","ref","transition"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { isOpen = false } = $$props;
	let { icon = undefined } = $$props;
	let { text = undefined } = $$props;
	let { ref = null } = $$props;
	let { transition = { duration: 200 } } = $$props;
	const dispatch = createEventDispatcher();
	let refPanel = null;

	function click_handler(event) {
		bubble($$self, event);
	}

	const click_handler_1 = ({ target }) => {
		if (isOpen && !ref.contains(target) && !refPanel.contains(target)) {
			$$invalidate(0, isOpen = false);
			dispatch("close");
		}
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_2 = () => {
		$$invalidate(0, isOpen = !isOpen);
		dispatch(isOpen ? "open" : "close");
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			refPanel = $$value;
			$$invalidate(5, refPanel);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("isOpen" in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ("icon" in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ("text" in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("transition" in $$new_props) $$invalidate(4, transition = $$new_props.transition);
		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	return [
		isOpen,
		ref,
		icon,
		text,
		transition,
		refPanel,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		click_handler_1,
		button_binding,
		click_handler_2,
		div_binding
	];
}

class HeaderAction extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-19vx6se-style")) add_css();

		init(this, options, instance$2U, create_fragment$2U, safe_not_equal, {
			isOpen: 0,
			icon: 2,
			text: 3,
			ref: 1,
			transition: 4
		});
	}
}

/* src/UIShell/GlobalHeader/HeaderActionLink.svelte generated by Svelte v3.32.1 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-1viyq4q-style";
	style.textContent = ".action-link.svelte-1viyq4q{text-align:center;align-items:center;vertical-align:middle;justify-content:center;padding-top:10px}";
	append(document.head, style);
}

function create_fragment$2V(ctx) {
	let a;
	let icon_1;
	let a_rel_value;
	let current;
	icon_1 = new Icon({ props: { render: /*icon*/ ctx[3] } });

	let a_levels = [
		{ href: /*href*/ ctx[2] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[4].target === "_blank"
			? "noopener noreferrer"
			: undefined
		},
		/*$$restProps*/ ctx[4]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			create_component(icon_1.$$.fragment);
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__action", true);
			toggle_class(a, "bx--header__action--active", /*linkIsActive*/ ctx[1]);
			toggle_class(a, "action-link", true);
			toggle_class(a, "svelte-1viyq4q", true);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			mount_component(icon_1, a, null);
			/*a_binding*/ ctx[5](a);
			current = true;
		},
		p(ctx, [dirty]) {
			const icon_1_changes = {};
			if (dirty & /*icon*/ 8) icon_1_changes.render = /*icon*/ ctx[3];
			icon_1.$set(icon_1_changes);

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				(!current || dirty & /*$$restProps*/ 16 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[4].target === "_blank"
				? "noopener noreferrer"
				: undefined)) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(a, "bx--header__action", true);
			toggle_class(a, "bx--header__action--active", /*linkIsActive*/ ctx[1]);
			toggle_class(a, "action-link", true);
			toggle_class(a, "svelte-1viyq4q", true);
		},
		i(local) {
			if (current) return;
			transition_in(icon_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			destroy_component(icon_1);
			/*a_binding*/ ctx[5](null);
		}
	};
}

function instance$2V($$self, $$props, $$invalidate) {
	const omit_props_names = ["linkIsActive","href","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { linkIsActive = false } = $$props;
	let { href = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("linkIsActive" in $$new_props) $$invalidate(1, linkIsActive = $$new_props.linkIsActive);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("icon" in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	return [ref, linkIsActive, href, icon, $$restProps, a_binding];
}

class HeaderActionLink extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1viyq4q-style")) add_css$1();

		init(this, options, instance$2V, create_fragment$2V, safe_not_equal, {
			linkIsActive: 1,
			href: 2,
			icon: 3,
			ref: 0
		});
	}
}

/* node_modules/carbon-icons-svelte/lib/Search20/Search20.svelte generated by Svelte v3.32.1 */

function create_if_block$1I(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (38:8)      
function fallback_block$T(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$1I(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1I(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$2W(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$T(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Search20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M29,27.5859l-7.5521-7.5521a11.0177,11.0177,0,1,0-1.4141,1.4141L27.5859,29ZM4,13a9,9,0,1,1,9,9A9.01,9.01,0,0,1,4,13Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Search20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2W($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(7, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 388) {
			 $$invalidate(9, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Search20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2W, create_fragment$2W, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

const data = [
  {
    href: "#",
    title: "Test title search 1",
    menu: "Test menu 1",
    description: "This is a description for seach #1",
  },
  {
    href: "#",
    title: "Changing text to simulate search",
    menu: "Test menu 2",
    description: "This is a description for seach #2",
  },
  {
    href: "#",
    title: "More testing texts",
    menu: "Test menu 3",
    description: "This is a description for seach #3",
  },
  {
    href: "#",
    title: "We can find here another test text",
    menu: "Test menu 4",
    description: "This is a description for seach #4",
  },
];

const globalStore = writable(undefined);

const store = {
  subscribe: globalStore.subscribe,
  search: (searchString) => {
    if (searchString.length > 1) {
      let resultSearch = [];

      data.forEach((item) => {
        if (item.title.toLowerCase().includes(searchString.toLowerCase())) {
          resultSearch.push(item);
        }
      });

      if (resultSearch.length > 0) {
        globalStore.set(resultSearch);
      } else {
        globalStore.set(undefined);
      }
    } else {
      globalStore.set(undefined);
    }
  },
  clear: () => {
    globalStore.set(undefined);
  },
};

/* src/UIShell/GlobalHeader/HeaderActionSearch.svelte generated by Svelte v3.32.1 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-16k0yud-style";
	style.textContent = ".search-wrapper.svelte-16k0yud{position:relative;display:flex;max-width:28rem;width:100%;margin-left:0.5rem;height:3rem;background-color:#393939;color:#fff;transition:max-width 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      background 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}.search-wrapper-hidden.svelte-16k0yud{max-width:3rem;background-color:#161616}.search-focus.svelte-16k0yud{outline:2px solid #fff;outline-offset:-2px}.search-wrapper-2.svelte-16k0yud{display:flex;flex-grow:1;border-bottom:1px solid #393939}.btn-search.svelte-16k0yud{width:3rem;height:100%;padding:0;flex-shrink:0;opacity:1;transition:background-color 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}.btn-search-disabled.svelte-16k0yud{border:none;pointer-events:none}.input-search.svelte-16k0yud{font-size:1rem;font-weight:400;line-height:1.375rem;letter-spacing:0;color:#fff;caret-color:#fff;background-color:initial;border:none;outline:none;width:100%;height:3rem;padding:0;transition:opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}.input-hidden.svelte-16k0yud{opacity:0;pointer-events:none}.btn-clear.svelte-16k0yud{width:3rem;height:100%;padding:0;flex-shrink:0;opacity:1;display:block;transition:background-color 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}.btn-clear.svelte-16k0yud:hover{background-color:#4c4c4c}.btn-clear-hidden.svelte-16k0yud{opacity:0;display:none}";
	append(document.head, style);
}

function create_fragment$2X(ctx) {
	let div1;
	let div0;
	let button0;
	let icon0;
	let t0;
	let input;
	let t1;
	let button1;
	let icon1;
	let current;
	let mounted;
	let dispose;

	icon0 = new Icon({
			props: {
				title: "Search",
				tabindex: "0",
				render: Search20
			}
		});

	icon1 = new Icon({
			props: {
				title: "Close",
				tabindex: "0",
				render: Close20
			}
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			button0 = element("button");
			create_component(icon0.$$.fragment);
			t0 = space();
			input = element("input");
			t1 = space();
			button1 = element("button");
			create_component(icon1.$$.fragment);
			attr(button0, "tabindex", /*searchTabIndex*/ ctx[3]);
			attr(button0, "aria-label", "Search");
			attr(button0, "type", "button");
			attr(button0, "class", "svelte-16k0yud");
			toggle_class(button0, "bx--header__action", true);
			toggle_class(button0, "btn-search", true);
			toggle_class(button0, "btn-search-disabled", /*searchIsActive*/ ctx[0]);
			attr(input, "id", "input-search-field");
			attr(input, "type", "text");
			attr(input, "autocomplete", "off");
			attr(input, "tabindex", /*closeTabIndex*/ ctx[4]);
			attr(input, "class", "input-search svelte-16k0yud");
			attr(input, "placeholder", "Search");
			toggle_class(input, "input-hidden", !/*searchIsActive*/ ctx[0]);
			attr(button1, "id", "right-panel-close-search");
			attr(button1, "tabindex", /*closeTabIndex*/ ctx[4]);
			attr(button1, "type", "button");
			attr(button1, "aria-label", "Clear search");
			attr(button1, "class", "svelte-16k0yud");
			toggle_class(button1, "bx--header__action", true);
			toggle_class(button1, "btn-clear", true);
			toggle_class(button1, "btn-clear-hidden", !/*searchIsActive*/ ctx[0]);
			attr(div0, "id", "right-panel-action-search");
			attr(div0, "class", "search-wrapper-2 svelte-16k0yud");
			attr(div0, "role", "combobox");
			attr(div0, "aria-expanded", /*searchIsActive*/ ctx[0]);
			attr(div1, "role", "search");
			attr(div1, "class", "search-wrapper svelte-16k0yud");
			toggle_class(div1, "search-wrapper-hidden", !/*searchIsActive*/ ctx[0]);
			toggle_class(div1, "search-focus", /*isSearchFocus*/ ctx[2] || /*searchIsActive*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, button0);
			mount_component(icon0, button0, null);
			append(div0, t0);
			append(div0, input);
			/*input_binding*/ ctx[12](input);
			append(div0, t1);
			append(div0, button1);
			mount_component(icon1, button1, null);
			/*div1_binding*/ ctx[17](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "mouseup", /*mouseup_handler*/ ctx[9]),
					listen(button0, "click", /*click_handler*/ ctx[10]),
					listen(button0, "keydown", /*keydown_handler*/ ctx[11]),
					listen(input, "focus", /*focus_handler*/ ctx[13]),
					listen(input, "focusout", /*focusout_handler*/ ctx[14]),
					listen(input, "input", /*dispatchInputs*/ ctx[7]),
					listen(button1, "click", /*click_handler_1*/ ctx[15]),
					listen(button1, "keydown", /*keydown_handler_1*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*searchTabIndex*/ 8) {
				attr(button0, "tabindex", /*searchTabIndex*/ ctx[3]);
			}

			if (dirty & /*searchIsActive*/ 1) {
				toggle_class(button0, "btn-search-disabled", /*searchIsActive*/ ctx[0]);
			}

			if (!current || dirty & /*closeTabIndex*/ 16) {
				attr(input, "tabindex", /*closeTabIndex*/ ctx[4]);
			}

			if (dirty & /*searchIsActive*/ 1) {
				toggle_class(input, "input-hidden", !/*searchIsActive*/ ctx[0]);
			}

			if (!current || dirty & /*closeTabIndex*/ 16) {
				attr(button1, "tabindex", /*closeTabIndex*/ ctx[4]);
			}

			if (dirty & /*searchIsActive*/ 1) {
				toggle_class(button1, "btn-clear-hidden", !/*searchIsActive*/ ctx[0]);
			}

			if (!current || dirty & /*searchIsActive*/ 1) {
				attr(div0, "aria-expanded", /*searchIsActive*/ ctx[0]);
			}

			if (dirty & /*searchIsActive*/ 1) {
				toggle_class(div1, "search-wrapper-hidden", !/*searchIsActive*/ ctx[0]);
			}

			if (dirty & /*isSearchFocus, searchIsActive*/ 5) {
				toggle_class(div1, "search-focus", /*isSearchFocus*/ ctx[2] || /*searchIsActive*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(icon0);
			/*input_binding*/ ctx[12](null);
			destroy_component(icon1);
			/*div1_binding*/ ctx[17](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2X($$self, $$props, $$invalidate) {
	let $searchStore;
	component_subscribe($$self, store, $$value => $$invalidate(8, $searchStore = $$value));
	let { searchIsActive = false } = $$props;
	const dispatch = createEventDispatcher();
	let searchTabIndex = "0";
	let closeTabIndex = "-1";
	let elInput = undefined;
	let elTypeSearch = undefined;
	let isSearchFocus = false;

	function dispatchInputs(event) {
		const params = {
			action: "search",
			textInput: event.target.value
		};

		dispatch("inputSearch", params);
	}

	const mouseup_handler = ({ target }) => {
		if (target && elTypeSearch) {
			if (!elTypeSearch.contains(target)) {
				$$invalidate(0, searchIsActive = false);
				$$invalidate(2, isSearchFocus = false);
			}
		}
	};

	const click_handler = () => {
		$$invalidate(2, isSearchFocus = true);
		$$invalidate(0, searchIsActive = true);
		dispatch("focusInputSearch");
	};

	const keydown_handler = ({ key }) => {
		if (key === "Enter") {
			$$invalidate(0, searchIsActive = !searchIsActive);
		}
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			elInput = $$value;
			($$invalidate(1, elInput), $$invalidate(0, searchIsActive));
		});
	}

	const focus_handler = () => dispatch("focusInputSearch");
	const focusout_handler = () => dispatch("focusOutInputSearch");

	const click_handler_1 = () => {
		$$invalidate(2, isSearchFocus = false);
		$$invalidate(0, searchIsActive = false);
		store.clear();
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === "Enter") {
			$$invalidate(0, searchIsActive = !searchIsActive);
		}
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			elTypeSearch = $$value;
			$$invalidate(5, elTypeSearch);
		});
	}

	$$self.$$set = $$props => {
		if ("searchIsActive" in $$props) $$invalidate(0, searchIsActive = $$props.searchIsActive);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*searchIsActive, elInput*/ 3) {
			 if (!searchIsActive) {
				if (elInput) {
					$$invalidate(1, elInput.value = "", elInput);
				}

				store.clear();
			}
		}

		if ($$self.$$.dirty & /*searchIsActive*/ 1) {
			 if (searchIsActive) {
				$$invalidate(3, searchTabIndex = "-1");
				$$invalidate(4, closeTabIndex = "0");
			} else {
				$$invalidate(3, searchTabIndex = "0");
				$$invalidate(4, closeTabIndex = "-1");
			}
		}

		if ($$self.$$.dirty & /*isSearchFocus, elInput*/ 6) {
			 if (isSearchFocus) {
				elInput.focus();
			}
		}

		if ($$self.$$.dirty & /*$searchStore*/ 256) ;
	};

	return [
		searchIsActive,
		elInput,
		isSearchFocus,
		searchTabIndex,
		closeTabIndex,
		elTypeSearch,
		dispatch,
		dispatchInputs,
		$searchStore,
		mouseup_handler,
		click_handler,
		keydown_handler,
		input_binding,
		focus_handler,
		focusout_handler,
		click_handler_1,
		keydown_handler_1,
		div1_binding
	];
}

class HeaderActionSearch extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-16k0yud-style")) add_css$2();
		init(this, options, instance$2X, create_fragment$2X, safe_not_equal, { searchIsActive: 0 });
	}
}

/* src/UIShell/GlobalHeader/HeaderNav.svelte generated by Svelte v3.32.1 */

function create_fragment$2Y(ctx) {
	let nav;
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let ul_levels = [/*props*/ ctx[0]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	let nav_levels = [/*props*/ ctx[0], /*$$restProps*/ ctx[1]];
	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	return {
		c() {
			nav = element("nav");
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--header__menu-bar", true);
			set_attributes(nav, nav_data);
			toggle_class(nav, "bx--header__nav", true);
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*props*/ 1 && /*props*/ ctx[0]]));
			toggle_class(ul, "bx--header__menu-bar", true);

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				dirty & /*props*/ 1 && /*props*/ ctx[0],
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
			]));

			toggle_class(nav, "bx--header__nav", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2Y($$self, $$props, $$invalidate) {
	let props;
	const omit_props_names = ["ariaLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { ariaLabel = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("ariaLabel" in $$new_props) $$invalidate(2, ariaLabel = $$new_props.ariaLabel);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(0, props = {
			"aria-label": ariaLabel || $$props["aria-label"],
			"aria-labelledby": $$props["aria-labelledby"]
		});
	};

	$$props = exclude_internal_props($$props);
	return [props, $$restProps, ariaLabel, $$scope, slots];
}

class HeaderNav extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2Y, create_fragment$2Y, safe_not_equal, { ariaLabel: 2 });
	}
}

/* src/UIShell/GlobalHeader/HeaderNavItem.svelte generated by Svelte v3.32.1 */

function create_fragment$2Z(ctx) {
	let li;
	let a;
	let span;
	let t;
	let a_rel_value;
	let mounted;
	let dispose;

	let a_levels = [
		{ role: "menuitem" },
		{ tabindex: "0" },
		{ href: /*href*/ ctx[1] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
			? "noopener noreferrer"
			: undefined
		},
		/*$$restProps*/ ctx[3]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			span = element("span");
			t = text(/*text*/ ctx[2]);
			toggle_class(span, "bx--text-truncate--end", true);
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__menu-item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, span);
			append(span, t);
			/*a_binding*/ ctx[12](a);

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[4]),
					listen(a, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(a, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(a, "mouseleave", /*mouseleave_handler*/ ctx[7]),
					listen(a, "keyup", /*keyup_handler*/ ctx[8]),
					listen(a, "keydown", /*keydown_handler*/ ctx[9]),
					listen(a, "focus", /*focus_handler*/ ctx[10]),
					listen(a, "blur", /*blur_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*text*/ 4) set_data(t, /*text*/ ctx[2]);

			set_attributes(a, a_data = get_spread_update(a_levels, [
				{ role: "menuitem" },
				{ tabindex: "0" },
				dirty & /*href*/ 2 && { href: /*href*/ ctx[1] },
				dirty & /*$$restProps*/ 8 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
				? "noopener noreferrer"
				: undefined) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(a, "bx--header__menu-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
			/*a_binding*/ ctx[12](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2Z($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","text","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { href = undefined } = $$props;
	let { text = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("href" in $$new_props) $$invalidate(1, href = $$new_props.href);
		if ("text" in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	return [
		ref,
		href,
		text,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler,
		focus_handler,
		blur_handler,
		a_binding
	];
}

class HeaderNavItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2Z, create_fragment$2Z, safe_not_equal, { href: 1, text: 2, ref: 0 });
	}
}

/* src/UIShell/GlobalHeader/HeaderNavMenu.svelte generated by Svelte v3.32.1 */

function create_fragment$2_(ctx) {
	let li;
	let a;
	let t0;
	let t1;
	let chevrondown16;
	let t2;
	let ul;
	let current;
	let mounted;
	let dispose;

	chevrondown16 = new ChevronDown16({
			props: { class: "bx--header__menu-arrow" }
		});

	let a_levels = [
		{ role: "menuitem" },
		{ tabindex: "0" },
		{ "aria-haspopup": "menu" },
		{ "aria-expanded": /*expanded*/ ctx[0] },
		{ "aria-label": /*text*/ ctx[3] },
		{ href: /*href*/ ctx[2] },
		/*$$restProps*/ ctx[4]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			li = element("li");
			a = element("a");
			t0 = text(/*text*/ ctx[3]);
			t1 = space();
			create_component(chevrondown16.$$.fragment);
			t2 = space();
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__menu-item", true);
			toggle_class(a, "bx--header__menu-title", true);
			attr(ul, "role", "menu");
			attr(ul, "aria-label", /*text*/ ctx[3]);
			toggle_class(ul, "bx--header__menu", true);
			toggle_class(li, "bx--header__submenu", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			append(a, t1);
			mount_component(chevrondown16, a, null);
			/*a_binding*/ ctx[16](a);
			append(li, t2);
			append(li, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "mouseup", /*mouseup_handler*/ ctx[15]),
					listen(a, "keydown", /*keydown_handler*/ ctx[7]),
					listen(a, "keydown", /*keydown_handler_1*/ ctx[17]),
					listen(a, "click", prevent_default(/*click_handler*/ ctx[8])),
					listen(a, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(a, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(a, "mouseleave", /*mouseleave_handler*/ ctx[11]),
					listen(a, "keyup", /*keyup_handler*/ ctx[12]),
					listen(a, "focus", /*focus_handler*/ ctx[13]),
					listen(a, "blur", /*blur_handler*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*text*/ 8) set_data(t0, /*text*/ ctx[3]);

			set_attributes(a, a_data = get_spread_update(a_levels, [
				{ role: "menuitem" },
				{ tabindex: "0" },
				{ "aria-haspopup": "menu" },
				(!current || dirty & /*expanded*/ 1) && { "aria-expanded": /*expanded*/ ctx[0] },
				(!current || dirty & /*text*/ 8) && { "aria-label": /*text*/ ctx[3] },
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(a, "bx--header__menu-item", true);
			toggle_class(a, "bx--header__menu-title", true);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (!current || dirty & /*text*/ 8) {
				attr(ul, "aria-label", /*text*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(chevrondown16.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(chevrondown16.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(chevrondown16);
			/*a_binding*/ ctx[16](null);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2_($$self, $$props, $$invalidate) {
	const omit_props_names = ["expanded","href","text","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { expanded = false } = $$props;
	let { href = "/" } = $$props;
	let { text = undefined } = $$props;
	let { ref = null } = $$props;

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	const mouseup_handler = ({ target }) => {
		if (ref.contains(target) || target === ref) {
			$$invalidate(0, expanded = !expanded);
		} else {
			if (expanded) {
				$$invalidate(0, expanded = false);
			}
		}
	};

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler_1 = ({ key }) => {
		if (key === "Enter") {
			$$invalidate(0, expanded = !expanded);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("expanded" in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("text" in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	return [
		expanded,
		ref,
		href,
		text,
		$$restProps,
		$$scope,
		slots,
		keydown_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		mouseup_handler,
		a_binding,
		keydown_handler_1
	];
}

class HeaderNavMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2_, create_fragment$2_, safe_not_equal, { expanded: 0, href: 2, text: 3, ref: 1 });
	}
}

/* src/UIShell/GlobalHeader/HeaderPanelDivider.svelte generated by Svelte v3.32.1 */

function add_css$3() {
	var style = element("style");
	style.id = "svelte-298l2-style";
	style.textContent = ".subject-divider.svelte-298l2.svelte-298l2{color:#525252;padding-bottom:4px;border-bottom:1px solid #525252;margin:32px 1rem 8px}.subject-divider.svelte-298l2 span.svelte-298l2{font-size:0.75rem;font-weight:400;line-height:1rem;letter-spacing:0.32px;color:#c6c6c6}";
	append(document.head, style);
}

function create_fragment$2$(ctx) {
	let li;
	let span;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			li = element("li");
			span = element("span");
			if (default_slot) default_slot.c();
			attr(span, "class", "svelte-298l2");
			attr(li, "class", "subject-divider svelte-298l2");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2$($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class HeaderPanelDivider extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-298l2-style")) add_css$3();
		init(this, options, instance$2$, create_fragment$2$, safe_not_equal, {});
	}
}

/* src/UIShell/GlobalHeader/HeaderPanelLink.svelte generated by Svelte v3.32.1 */

function create_fragment$30(ctx) {
	let li;
	let a;
	let a_rel_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let a_levels = [
		{ href: /*href*/ ctx[1] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[2].target === "_blank"
			? "noopener noreferrer"
			: undefined
		},
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--switcher__item-link", true);
			toggle_class(li, "bx--switcher__item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);

			if (default_slot) {
				default_slot.m(a, null);
			}

			/*a_binding*/ ctx[6](a);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 2) && { href: /*href*/ ctx[1] },
				(!current || dirty & /*$$restProps*/ 4 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[2].target === "_blank"
				? "noopener noreferrer"
				: undefined)) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--switcher__item-link", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
			/*a_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$30($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { href = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("href" in $$new_props) $$invalidate(1, href = $$new_props.href);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [ref, href, $$restProps, $$scope, slots, click_handler, a_binding];
}

class HeaderPanelLink extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$30, create_fragment$30, safe_not_equal, { href: 1, ref: 0 });
	}
}

/* src/UIShell/GlobalHeader/HeaderPanelLinks.svelte generated by Svelte v3.32.1 */

function create_fragment$31(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			toggle_class(ul, "bx--switcher__item", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$31($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class HeaderPanelLinks extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$31, create_fragment$31, safe_not_equal, {});
	}
}

/* src/UIShell/GlobalHeader/HeaderUtilities.svelte generated by Svelte v3.32.1 */

function create_fragment$32(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--header__global", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$32($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class HeaderUtilities extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$32, create_fragment$32, safe_not_equal, {});
	}
}

/* src/UIShell/SideNav/SideNav.svelte generated by Svelte v3.32.1 */

function create_if_block$1J(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			toggle_class(div, "bx--side-nav__overlay", true);
			toggle_class(div, "bx--side-nav__overlay-active", /*isOpen*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*isOpen*/ 1) {
				toggle_class(div, "bx--side-nav__overlay-active", /*isOpen*/ ctx[0]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$33(ctx) {
	let t;
	let nav;
	let nav_aria_hidden_value;
	let current;
	let if_block = !/*fixed*/ ctx[1] && create_if_block$1J(ctx);
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	let nav_levels = [
		{
			"aria-hidden": nav_aria_hidden_value = !/*isOpen*/ ctx[0]
		},
		{ "aria-label": /*ariaLabel*/ ctx[2] },
		/*$$restProps*/ ctx[3]
	];

	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			nav = element("nav");
			if (default_slot) default_slot.c();
			set_attributes(nav, nav_data);
			toggle_class(nav, "bx--side-nav__navigation", true);
			toggle_class(nav, "bx--side-nav", true);
			toggle_class(nav, "bx--side-nav--ux", true);
			toggle_class(nav, "bx--side-nav--expanded", /*isOpen*/ ctx[0]);
			toggle_class(nav, "bx--side-nav--collapsed", !/*isOpen*/ ctx[0]);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, nav, anchor);

			if (default_slot) {
				default_slot.m(nav, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*fixed*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1J(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				(!current || dirty & /*isOpen*/ 1 && nav_aria_hidden_value !== (nav_aria_hidden_value = !/*isOpen*/ ctx[0])) && { "aria-hidden": nav_aria_hidden_value },
				(!current || dirty & /*ariaLabel*/ 4) && { "aria-label": /*ariaLabel*/ ctx[2] },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(nav, "bx--side-nav__navigation", true);
			toggle_class(nav, "bx--side-nav", true);
			toggle_class(nav, "bx--side-nav--ux", true);
			toggle_class(nav, "bx--side-nav--expanded", /*isOpen*/ ctx[0]);
			toggle_class(nav, "bx--side-nav--collapsed", !/*isOpen*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(nav);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$33($$self, $$props, $$invalidate) {
	const omit_props_names = ["fixed","ariaLabel","isOpen"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { fixed = false } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { isOpen = false } = $$props;

	onMount(() => {
		shouldRenderHamburgerMenu.set(true);
		return () => shouldRenderHamburgerMenu.set(false);
	});

	const click_handler = () => {
		$$invalidate(0, isOpen = false);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("fixed" in $$new_props) $$invalidate(1, fixed = $$new_props.fixed);
		if ("ariaLabel" in $$new_props) $$invalidate(2, ariaLabel = $$new_props.ariaLabel);
		if ("isOpen" in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [isOpen, fixed, ariaLabel, $$restProps, $$scope, slots, click_handler];
}

class SideNav extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$33, create_fragment$33, safe_not_equal, { fixed: 1, ariaLabel: 2, isOpen: 0 });
	}
}

/* src/UIShell/SideNav/SideNavItems.svelte generated by Svelte v3.32.1 */

function create_fragment$34(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			toggle_class(ul, "bx--side-nav__items", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[0], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$34($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class SideNavItems extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$34, create_fragment$34, safe_not_equal, {});
	}
}

/* src/UIShell/SideNav/SideNavLink.svelte generated by Svelte v3.32.1 */

function create_if_block$1K(ctx) {
	let div;
	let icon_1;
	let current;
	icon_1 = new Icon({ props: { render: /*icon*/ ctx[4] } });

	return {
		c() {
			div = element("div");
			create_component(icon_1.$$.fragment);
			toggle_class(div, "bx--side-nav__icon", true);
			toggle_class(div, "bx--side-nav__icon--small", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(icon_1, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const icon_1_changes = {};
			if (dirty & /*icon*/ 16) icon_1_changes.render = /*icon*/ ctx[4];
			icon_1.$set(icon_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(icon_1);
		}
	};
}

function create_fragment$35(ctx) {
	let li;
	let a;
	let t0;
	let span;
	let t1;
	let a_aria_current_value;
	let a_rel_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*icon*/ ctx[4] && create_if_block$1K(ctx);

	let a_levels = [
		{
			"aria-current": a_aria_current_value = /*isSelected*/ ctx[1] ? "page" : undefined
		},
		{ href: /*href*/ ctx[2] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[5].target === "_blank"
			? "noopener noreferrer"
			: undefined
		},
		/*$$restProps*/ ctx[5]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			t1 = text(/*text*/ ctx[3]);
			toggle_class(span, "bx--side-nav__link-text", true);
			set_attributes(a, a_data);
			toggle_class(a, "bx--side-nav__link", true);
			toggle_class(a, "bx--side-nav__link--current", /*isSelected*/ ctx[1]);
			toggle_class(li, "bx--side-nav__item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			if (if_block) if_block.m(a, null);
			append(a, t0);
			append(a, span);
			append(span, t1);
			/*a_binding*/ ctx[7](a);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*icon*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*icon*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1K(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*text*/ 8) set_data(t1, /*text*/ ctx[3]);

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*isSelected*/ 2 && a_aria_current_value !== (a_aria_current_value = /*isSelected*/ ctx[1] ? "page" : undefined)) && { "aria-current": a_aria_current_value },
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				(!current || dirty & /*$$restProps*/ 32 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[5].target === "_blank"
				? "noopener noreferrer"
				: undefined)) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
			]));

			toggle_class(a, "bx--side-nav__link", true);
			toggle_class(a, "bx--side-nav__link--current", /*isSelected*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (if_block) if_block.d();
			/*a_binding*/ ctx[7](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$35($$self, $$props, $$invalidate) {
	const omit_props_names = ["isSelected","href","text","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { isSelected = false } = $$props;
	let { href = undefined } = $$props;
	let { text = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("isSelected" in $$new_props) $$invalidate(1, isSelected = $$new_props.isSelected);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("text" in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ("icon" in $$new_props) $$invalidate(4, icon = $$new_props.icon);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	return [ref, isSelected, href, text, icon, $$restProps, click_handler, a_binding];
}

class SideNavLink extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$35, create_fragment$35, safe_not_equal, {
			isSelected: 1,
			href: 2,
			text: 3,
			icon: 4,
			ref: 0
		});
	}
}

/* src/UIShell/SideNav/SideNavMenu.svelte generated by Svelte v3.32.1 */

function create_if_block$1L(ctx) {
	let div;
	let icon_1;
	let current;
	icon_1 = new Icon({ props: { render: /*icon*/ ctx[3] } });

	return {
		c() {
			div = element("div");
			create_component(icon_1.$$.fragment);
			toggle_class(div, "bx--side-nav__icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(icon_1, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const icon_1_changes = {};
			if (dirty & /*icon*/ 8) icon_1_changes.render = /*icon*/ ctx[3];
			icon_1.$set(icon_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(icon_1);
		}
	};
}

function create_fragment$36(ctx) {
	let li;
	let button;
	let t0;
	let span;
	let t1;
	let t2;
	let div;
	let icon_1;
	let t3;
	let ul;
	let current;
	let mounted;
	let dispose;
	let if_block = /*icon*/ ctx[3] && create_if_block$1L(ctx);

	icon_1 = new Icon({
			props: {
				title: "Open Menu",
				tabindex: "0",
				render: ChevronDown16
			}
		});

	let button_levels = [
		{ type: "button" },
		{ "aria-expanded": /*expanded*/ ctx[0] },
		/*$$restProps*/ ctx[4]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			li = element("li");
			button = element("button");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			t1 = text(/*text*/ ctx[2]);
			t2 = space();
			div = element("div");
			create_component(icon_1.$$.fragment);
			t3 = space();
			ul = element("ul");
			if (default_slot) default_slot.c();
			toggle_class(span, "bx--side-nav__submenu-title", true);
			toggle_class(div, "bx--side-nav__icon", true);
			toggle_class(div, "bx--side-nav__icon--small", true);
			toggle_class(div, "bx--side-nav__submenu-chevron", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--side-nav__submenu", true);
			attr(ul, "role", "menu");
			toggle_class(ul, "bx--side-nav__menu", true);
			toggle_class(li, "bx--side-nav__item", true);
			toggle_class(li, "bx--side-nav__item--icon", /*icon*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			if (if_block) if_block.m(button, null);
			append(button, t0);
			append(button, span);
			append(span, t1);
			append(button, t2);
			append(button, div);
			mount_component(icon_1, div, null);
			/*button_binding*/ ctx[8](button);
			append(li, t3);
			append(li, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[7]),
					listen(button, "click", /*click_handler_1*/ ctx[9])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*icon*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*icon*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1L(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*text*/ 4) set_data(t1, /*text*/ ctx[2]);

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*expanded*/ 1) && { "aria-expanded": /*expanded*/ ctx[0] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(button, "bx--side-nav__submenu", true);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (dirty & /*icon*/ 8) {
				toggle_class(li, "bx--side-nav__item--icon", /*icon*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(icon_1.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(icon_1.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (if_block) if_block.d();
			destroy_component(icon_1);
			/*button_binding*/ ctx[8](null);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$36($$self, $$props, $$invalidate) {
	const omit_props_names = ["expanded","text","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { expanded = false } = $$props;
	let { text = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(0, expanded = !expanded);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("expanded" in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ("text" in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ("icon" in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	return [
		expanded,
		ref,
		text,
		icon,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		button_binding,
		click_handler_1
	];
}

class SideNavMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$36, create_fragment$36, safe_not_equal, { expanded: 0, text: 2, icon: 3, ref: 1 });
	}
}

/* src/UIShell/SideNav/SideNavMenuItem.svelte generated by Svelte v3.32.1 */

function fallback_block$U(ctx) {
	let t;

	return {
		c() {
			t = text(/*text*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 8) set_data(t, /*text*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$37(ctx) {
	let li;
	let a;
	let span;
	let a_aria_current_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	const default_slot_or_fallback = default_slot || fallback_block$U(ctx);

	let a_levels = [
		{
			"aria-current": a_aria_current_value = /*isSelected*/ ctx[1] ? "page" : undefined
		},
		{ href: /*href*/ ctx[2] },
		/*$$restProps*/ ctx[4]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			span = element("span");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			toggle_class(span, "bx--side-nav__link-text", true);
			set_attributes(a, a_data);
			toggle_class(a, "bx--side-nav__link", true);
			toggle_class(li, "bx--side-nav__menu-item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, span);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(span, null);
			}

			/*a_binding*/ ctx[8](a);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*text*/ 8) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*isSelected*/ 2 && a_aria_current_value !== (a_aria_current_value = /*isSelected*/ ctx[1] ? "page" : undefined)) && { "aria-current": a_aria_current_value },
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(a, "bx--side-nav__link", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[8](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$37($$self, $$props, $$invalidate) {
	const omit_props_names = ["isSelected","href","text","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { isSelected = undefined } = $$props;
	let { href = undefined } = $$props;
	let { text = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("isSelected" in $$new_props) $$invalidate(1, isSelected = $$new_props.isSelected);
		if ("href" in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ("text" in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		isSelected,
		href,
		text,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		a_binding
	];
}

class SideNavMenuItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$37, create_fragment$37, safe_not_equal, { isSelected: 1, href: 2, text: 3, ref: 0 });
	}
}

/* src/UIShell/Content.svelte generated by Svelte v3.32.1 */

function create_fragment$38(ctx) {
	let main;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let main_levels = [{ id: /*id*/ ctx[0] }, /*$$restProps*/ ctx[1]];
	let main_data = {};

	for (let i = 0; i < main_levels.length; i += 1) {
		main_data = assign(main_data, main_levels[i]);
	}

	return {
		c() {
			main = element("main");
			if (default_slot) default_slot.c();
			set_attributes(main, main_data);
			toggle_class(main, "bx--content", true);
		},
		m(target, anchor) {
			insert(target, main, anchor);

			if (default_slot) {
				default_slot.m(main, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			set_attributes(main, main_data = get_spread_update(main_levels, [
				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
			]));

			toggle_class(main, "bx--content", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$38($$self, $$props, $$invalidate) {
	const omit_props_names = ["id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "main-content" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [id, $$restProps, $$scope, slots];
}

class Content extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$38, create_fragment$38, safe_not_equal, { id: 0 });
	}
}

/* src/UIShell/SkipToContent.svelte generated by Svelte v3.32.1 */

function fallback_block$V(ctx) {
	let t;

	return {
		c() {
			t = text("Skip to main content");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$39(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	const default_slot_or_fallback = default_slot || fallback_block$V();

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{ tabindex: /*tabindex*/ ctx[1] },
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--skip-to-content", true);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
				(!current || dirty & /*tabindex*/ 2) && { tabindex: /*tabindex*/ ctx[1] },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--skip-to-content", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$39($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","tabindex"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { href = "#main-content" } = $$props;
	let { tabindex = "0" } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("href" in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ("tabindex" in $$new_props) $$invalidate(1, tabindex = $$new_props.tabindex);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [href, tabindex, $$restProps, $$scope, slots, click_handler];
}

class SkipToContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$39, create_fragment$39, safe_not_equal, { href: 0, tabindex: 1 });
	}
}

/* src/UIShell/HeaderGlobalAction.svelte generated by Svelte v3.32.1 */

function fallback_block$W(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment$3a(ctx) {
	let button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	const default_slot_or_fallback = default_slot || fallback_block$W(ctx);
	let button_levels = [{ type: "button" }, /*$$restProps*/ ctx[3]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isActive*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			/*button_binding*/ ctx[7](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*icon*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [{ type: "button" }, dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isActive*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[7](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$3a($$self, $$props, $$invalidate) {
	const omit_props_names = ["isActive","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { isActive = false } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("isActive" in $$new_props) $$invalidate(1, isActive = $$new_props.isActive);
		if ("icon" in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		isActive,
		icon,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		button_binding
	];
}

class HeaderGlobalAction extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3a, create_fragment$3a, safe_not_equal, { isActive: 1, icon: 2, ref: 0 });
	}
}

/* src/UIShell/HeaderSearch.svelte generated by Svelte v3.32.1 */

function add_css$4() {
	var style = element("style");
	style.id = "svelte-qozwl4-style";
	style.textContent = "label.svelte-qozwl4.svelte-qozwl4{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;white-space:nowrap;border:0;visibility:inherit;clip:rect(0, 0, 0, 0)}[role=\"search\"].svelte-qozwl4.svelte-qozwl4{position:relative;display:flex;max-width:28rem;width:100%;margin-left:0.5rem;height:3rem;background-color:#393939;color:#fff;transition:max-width 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      background 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}[role=\"search\"].svelte-qozwl4.svelte-qozwl4:not(.active){max-width:3rem;background-color:#161616}[role=\"search\"].active.svelte-qozwl4.svelte-qozwl4{outline:2px solid #fff;outline-offset:-2px}[role=\"combobox\"].svelte-qozwl4.svelte-qozwl4{display:flex;flex-grow:1;border-bottom:1px solid #393939}input.svelte-qozwl4.svelte-qozwl4{width:100%;height:3rem;padding:0;font-size:1rem;font-weight:400;line-height:1.375rem;letter-spacing:0;color:#fff;caret-color:#fff;background-color:initial;border:none;outline:none;transition:opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}input.svelte-qozwl4.svelte-qozwl4:not(.active){opacity:0;pointer-events:none}button.svelte-qozwl4.svelte-qozwl4{width:3rem;height:100%;padding:0;flex-shrink:0;opacity:1;transition:background-color 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}.disabled.svelte-qozwl4.svelte-qozwl4{border:none;pointer-events:none}[aria-label=\"Clear search\"].svelte-qozwl4.svelte-qozwl4:hover{background-color:#4c4c4c}.hidden.svelte-qozwl4.svelte-qozwl4{opacity:0;display:none}ul.svelte-qozwl4.svelte-qozwl4{position:absolute;z-index:10000;padding:1rem 0;left:0;right:0;top:3rem;background-color:#161616;border:1px solid #393939;border-top:none;box-shadow:0 4px 8px 0 rgba(0, 0, 0, 0.5)}[role=\"menuitem\"].svelte-qozwl4.svelte-qozwl4{padding:6px 1rem;cursor:pointer;font-size:0.875rem;font-weight:600;line-height:1.29;letter-spacing:0.16px;transition:all 70ms cubic-bezier(0.2, 0, 0.38, 0.9);display:block;text-decoration:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:#c6c6c6}.selected.svelte-qozwl4.svelte-qozwl4,[role=\"menuitem\"].svelte-qozwl4.svelte-qozwl4:hover{background-color:#353535;color:#f4f4f4}[role=\"menuitem\"].svelte-qozwl4 span.svelte-qozwl4{font-size:0.75rem;font-weight:400;line-height:1.34;letter-spacing:0.32px;text-transform:lowercase;color:#c6c6c6}";
	append(document.head, style);
}

function get_each_context$g(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[27] = list[i];
	child_ctx[29] = i;
	return child_ctx;
}

const get_default_slot_changes$7 = dirty => ({ result: dirty & /*results*/ 16 });

const get_default_slot_context$7 = ctx => ({
	result: /*result*/ ctx[27],
	index: /*i*/ ctx[29]
});

// (132:2) {#if active && results.length > 0}
function create_if_block$1M(ctx) {
	let ul;
	let current;
	let each_value = /*results*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$g(get_each_context$g(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "aria-labelledby", "search-label");
			attr(ul, "role", "menu");
			attr(ul, "id", "search-menu");
			attr(ul, "class", "svelte-qozwl4");
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*results, selectedId, selectedResultIndex, tick, selectResult, $$scope*/ 4692) {
				each_value = /*results*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$g(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$g(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (150:14) {#if result.description}
function create_if_block_1$B(ctx) {
	let span;
	let t0;
	let t1_value = /*result*/ ctx[27].description + "";
	let t1;

	return {
		c() {
			span = element("span");
			t0 = text("– ");
			t1 = text(t1_value);
			attr(span, "class", "svelte-qozwl4");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*results*/ 16 && t1_value !== (t1_value = /*result*/ ctx[27].description + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (148:48)                
function fallback_block$X(ctx) {
	let t0_value = /*result*/ ctx[27].text + "";
	let t0;
	let t1;
	let if_block_anchor;
	let if_block = /*result*/ ctx[27].description && create_if_block_1$B(ctx);

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*results*/ 16 && t0_value !== (t0_value = /*result*/ ctx[27].text + "")) set_data(t0, t0_value);

			if (/*result*/ ctx[27].description) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$B(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (134:6) {#each results as result, i}
function create_each_block$g(ctx) {
	let li;
	let a;
	let a_href_value;
	let t;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], get_default_slot_context$7);
	const default_slot_or_fallback = default_slot || fallback_block$X(ctx);

	function click_handler_2() {
		return /*click_handler_2*/ ctx[25](/*i*/ ctx[29]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
			attr(a, "tabindex", "-1");
			attr(a, "id", "search-menuitem-" + /*i*/ ctx[29]);
			attr(a, "role", "menuitem");
			attr(a, "href", a_href_value = /*result*/ ctx[27].href);
			attr(a, "class", "svelte-qozwl4");
			toggle_class(a, "selected", /*selectedId*/ ctx[6] === `search-menuitem-${/*i*/ ctx[29]}`);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			append(li, t);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", prevent_default(click_handler_2));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, results*/ 4112) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, get_default_slot_changes$7, get_default_slot_context$7);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*results*/ 16) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty & /*results*/ 16 && a_href_value !== (a_href_value = /*result*/ ctx[27].href)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*selectedId*/ 64) {
				toggle_class(a, "selected", /*selectedId*/ ctx[6] === `search-menuitem-${/*i*/ ctx[29]}`);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$3b(ctx) {
	let div1;
	let label;
	let t1;
	let div0;
	let button0;
	let search20;
	let button0_tabindex_value;
	let t2;
	let input;
	let input_tabindex_value;
	let t3;
	let button1;
	let close20;
	let button1_tabindex_value;
	let t4;
	let current;
	let mounted;
	let dispose;
	search20 = new Search20({ props: { title: "Search" } });

	let input_levels = [
		{ type: "text" },
		{ autocomplete: "off" },
		{ placeholder: "Search..." },
		{
			tabindex: input_tabindex_value = /*active*/ ctx[0] ? "0" : "-1"
		},
		/*$$restProps*/ ctx[10],
		{ id: "search-input" },
		{
			"aria-activedescendant": /*selectedId*/ ctx[6]
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	close20 = new Close20({ props: { title: "Close" } });
	let if_block = /*active*/ ctx[0] && /*results*/ ctx[4].length > 0 && create_if_block$1M(ctx);

	return {
		c() {
			div1 = element("div");
			label = element("label");
			label.textContent = "Search";
			t1 = space();
			div0 = element("div");
			button0 = element("button");
			create_component(search20.$$.fragment);
			t2 = space();
			input = element("input");
			t3 = space();
			button1 = element("button");
			create_component(close20.$$.fragment);
			t4 = space();
			if (if_block) if_block.c();
			attr(label, "for", "search-input");
			attr(label, "id", "search-label");
			attr(label, "class", "svelte-qozwl4");
			attr(button0, "type", "button");
			attr(button0, "aria-label", "Search");
			attr(button0, "tabindex", button0_tabindex_value = /*active*/ ctx[0] ? "-1" : "0");
			attr(button0, "class", "svelte-qozwl4");
			toggle_class(button0, "bx--header__action", true);
			toggle_class(button0, "disabled", /*active*/ ctx[0]);
			set_attributes(input, input_data);
			toggle_class(input, "active", /*active*/ ctx[0]);
			toggle_class(input, "svelte-qozwl4", true);
			attr(button1, "type", "button");
			attr(button1, "aria-label", "Clear search");
			attr(button1, "tabindex", button1_tabindex_value = /*active*/ ctx[0] ? "0" : "-1");
			attr(button1, "class", "svelte-qozwl4");
			toggle_class(button1, "bx--header__action", true);
			toggle_class(button1, "hidden", !/*active*/ ctx[0]);
			attr(div0, "role", "combobox");
			attr(div0, "aria-expanded", /*active*/ ctx[0]);
			attr(div0, "class", "svelte-qozwl4");
			attr(div1, "role", "search");
			attr(div1, "class", "svelte-qozwl4");
			toggle_class(div1, "active", /*active*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, label);
			append(div1, t1);
			append(div1, div0);
			append(div0, button0);
			mount_component(search20, button0, null);
			append(div0, t2);
			append(div0, input);
			/*input_binding*/ ctx[21](input);
			set_input_value(input, /*value*/ ctx[3]);
			append(div0, t3);
			append(div0, button1);
			mount_component(close20, button1, null);
			append(div1, t4);
			if (if_block) if_block.m(div1, null);
			/*div1_binding*/ ctx[26](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "mouseup", /*mouseup_handler*/ ctx[19]),
					listen(button0, "click", /*click_handler*/ ctx[20]),
					listen(input, "input", /*input_input_handler*/ ctx[22]),
					listen(input, "change", /*change_handler*/ ctx[14]),
					listen(input, "input", /*input_handler*/ ctx[15]),
					listen(input, "focus", /*focus_handler*/ ctx[16]),
					listen(input, "blur", /*blur_handler*/ ctx[17]),
					listen(input, "keydown", /*keydown_handler*/ ctx[18]),
					listen(input, "keydown", /*keydown_handler_1*/ ctx[23]),
					listen(button1, "click", /*click_handler_1*/ ctx[24])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*active*/ 1 && button0_tabindex_value !== (button0_tabindex_value = /*active*/ ctx[0] ? "-1" : "0")) {
				attr(button0, "tabindex", button0_tabindex_value);
			}

			if (dirty & /*active*/ 1) {
				toggle_class(button0, "disabled", /*active*/ ctx[0]);
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "text" },
				{ autocomplete: "off" },
				{ placeholder: "Search..." },
				(!current || dirty & /*active*/ 1 && input_tabindex_value !== (input_tabindex_value = /*active*/ ctx[0] ? "0" : "-1")) && { tabindex: input_tabindex_value },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10],
				{ id: "search-input" },
				(!current || dirty & /*selectedId*/ 64) && {
					"aria-activedescendant": /*selectedId*/ ctx[6]
				}
			]));

			if (dirty & /*value*/ 8 && input.value !== /*value*/ ctx[3]) {
				set_input_value(input, /*value*/ ctx[3]);
			}

			toggle_class(input, "active", /*active*/ ctx[0]);
			toggle_class(input, "svelte-qozwl4", true);

			if (!current || dirty & /*active*/ 1 && button1_tabindex_value !== (button1_tabindex_value = /*active*/ ctx[0] ? "0" : "-1")) {
				attr(button1, "tabindex", button1_tabindex_value);
			}

			if (dirty & /*active*/ 1) {
				toggle_class(button1, "hidden", !/*active*/ ctx[0]);
			}

			if (!current || dirty & /*active*/ 1) {
				attr(div0, "aria-expanded", /*active*/ ctx[0]);
			}

			if (/*active*/ ctx[0] && /*results*/ ctx[4].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*active, results*/ 17) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1M(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*active*/ 1) {
				toggle_class(div1, "active", /*active*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(search20.$$.fragment, local);
			transition_in(close20.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(search20.$$.fragment, local);
			transition_out(close20.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(search20);
			/*input_binding*/ ctx[21](null);
			destroy_component(close20);
			if (if_block) if_block.d();
			/*div1_binding*/ ctx[26](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$3b($$self, $$props, $$invalidate) {
	let selectedResult;
	let selectedId;
	const omit_props_names = ["value","active","ref","results","selectedResultIndex"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = "" } = $$props;
	let { active = false } = $$props;
	let { ref = null } = $$props;
	let { results = [] } = $$props;
	let { selectedResultIndex = 0 } = $$props;
	const dispatch = createEventDispatcher();
	let refSearch = null;

	function reset() {
		$$invalidate(0, active = false);
		$$invalidate(3, value = "");
		$$invalidate(2, selectedResultIndex = 0);
	}

	function selectResult() {
		dispatch("select", {
			value,
			selectedResultIndex,
			selectedResult
		});

		reset();
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	const mouseup_handler = ({ target }) => {
		if (active && !refSearch.contains(target)) $$invalidate(0, active = false);
	};

	const click_handler = () => {
		$$invalidate(0, active = true);
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(3, value);
	}

	const keydown_handler_1 = e => {
		switch (e.key) {
			case "Enter":
				selectResult();
				break;
			case "ArrowDown":
				e.preventDefault();
				if (selectedResultIndex === results.length - 1) {
					$$invalidate(2, selectedResultIndex = 0);
				} else {
					$$invalidate(2, selectedResultIndex += 1);
				}
				break;
			case "ArrowUp":
				e.preventDefault();
				if (selectedResultIndex === 0) {
					$$invalidate(2, selectedResultIndex = results.length - 1);
				} else {
					$$invalidate(2, selectedResultIndex -= 1);
				}
				break;
		}
	};

	const click_handler_1 = () => {
		reset();
		dispatch("clear");
	};

	const click_handler_2 = async i => {
		$$invalidate(2, selectedResultIndex = i);
		await tick();
		selectResult();
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			refSearch = $$value;
			$$invalidate(5, refSearch);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("value" in $$new_props) $$invalidate(3, value = $$new_props.value);
		if ("active" in $$new_props) $$invalidate(0, active = $$new_props.active);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("results" in $$new_props) $$invalidate(4, results = $$new_props.results);
		if ("selectedResultIndex" in $$new_props) $$invalidate(2, selectedResultIndex = $$new_props.selectedResultIndex);
		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*active, ref*/ 3) {
			 if (active && ref) ref.focus();
		}

		if ($$self.$$.dirty & /*active*/ 1) {
			 dispatch(active ? "active" : "inactive");
		}

		if ($$self.$$.dirty & /*results, selectedResultIndex*/ 20) {
			 $$invalidate(11, selectedResult = results[selectedResultIndex]);
		}

		if ($$self.$$.dirty & /*selectedResult, selectedResultIndex*/ 2052) {
			 $$invalidate(6, selectedId = selectedResult
			? `search-menuitem-${selectedResultIndex}`
			: undefined);
		}
	};

	return [
		active,
		ref,
		selectedResultIndex,
		value,
		results,
		refSearch,
		selectedId,
		dispatch,
		reset,
		selectResult,
		$$restProps,
		selectedResult,
		$$scope,
		slots,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		keydown_handler,
		mouseup_handler,
		click_handler,
		input_binding,
		input_input_handler,
		keydown_handler_1,
		click_handler_1,
		click_handler_2,
		div1_binding
	];
}

class HeaderSearch extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-qozwl4-style")) add_css$4();

		init(this, options, instance$3b, create_fragment$3b, safe_not_equal, {
			value: 3,
			active: 0,
			ref: 1,
			results: 4,
			selectedResultIndex: 2
		});
	}
}

/* src/UIShell/SideNavDivider.svelte generated by Svelte v3.32.1 */

function create_fragment$3c(ctx) {
	let li;
	let li_levels = [{ role: "separator" }, /*$$restProps*/ ctx[0]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			set_attributes(li, li_data);
			toggle_class(li, "bx--side-nav__divider", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
		},
		p(ctx, [dirty]) {
			set_attributes(li, li_data = get_spread_update(li_levels, [{ role: "separator" }, dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(li, "bx--side-nav__divider", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function instance$3c($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [$$restProps];
}

class SideNavDivider extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3c, create_fragment$3c, safe_not_equal, {});
	}
}

/* src/UnorderedList/UnorderedList.svelte generated by Svelte v3.32.1 */

function create_fragment$3d(ctx) {
	let ul;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let ul_levels = [/*$$restProps*/ ctx[1]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--list--unordered", true);
			toggle_class(ul, "bx--list--nested", /*nested*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler*/ ctx[4]),
					listen(ul, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(ul, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(ul, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(ul, "bx--list--unordered", true);
			toggle_class(ul, "bx--list--nested", /*nested*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$3d($$self, $$props, $$invalidate) {
	const omit_props_names = ["nested"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { nested = false } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("nested" in $$new_props) $$invalidate(0, nested = $$new_props.nested);
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [
		nested,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class UnorderedList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3d, create_fragment$3d, safe_not_equal, { nested: 0 });
	}
}

export { Accordion, AccordionItem, AccordionSkeleton, AspectRatio, Breadcrumb, BreadcrumbItem, BreadcrumbSkeleton, Button, ButtonSet, ButtonSkeleton, Checkbox, CheckboxSkeleton, ClickableTile, CodeSnippet, CodeSnippetSkeleton, Column, ComboBox, ComposedModal, Content, ContentSwitcher, ContextMenu, ContextMenuDivider, ContextMenuGroup, ContextMenuOption, ContextMenuRadioGroup, Copy, CopyButton, DataTable, DataTableSkeleton, DatePicker, DatePickerInput, DatePickerSkeleton, Dropdown, DropdownSkeleton, ExpandableTile, FileUploader, FileUploaderButton, FileUploaderDropContainer, FileUploaderItem, FileUploaderSkeleton, Filename, FluidForm, Form, FormGroup, FormItem, FormLabel, Grid, Header, HeaderAction, HeaderActionLink, HeaderActionSearch, HeaderGlobalAction, HeaderNav, HeaderNavItem, HeaderNavMenu, HeaderPanelDivider, HeaderPanelLink, HeaderPanelLinks, HeaderSearch, HeaderUtilities, Icon, IconSkeleton, ImageLoader, InlineLoading, InlineNotification, Link, ListBox, ListBoxField, ListBoxMenu, ListBoxMenuIcon, ListBoxMenuItem, ListBoxSelection, ListItem, Loading, LocalStorage, Modal, ModalBody, ModalFooter, ModalHeader, MultiSelect, NotificationActionButton, NotificationButton, NotificationIcon, NotificationTextDetails, NumberInput, NumberInputSkeleton, OrderedList, OutboundLink, OverflowMenu, OverflowMenuItem, Pagination, PaginationNav, PaginationSkeleton, PasswordInput, Popover, ProgressIndicator, ProgressIndicatorSkeleton, ProgressStep, RadioButton, RadioButtonGroup, RadioButtonSkeleton, RadioTile, Row, Search, SearchSkeleton, Select, SelectItem, SelectItemGroup, SelectSkeleton, SelectableTile, SideNav, SideNavDivider, SideNavItems, SideNavLink, SideNavMenu, SideNavMenuItem, SkeletonPlaceholder, SkeletonText, SkipToContent, Slider, SliderSkeleton, StructuredList, StructuredListBody, StructuredListCell, StructuredListHead, StructuredListInput, StructuredListRow, StructuredListSkeleton, Switch, Tab, TabContent, Table, TableBody, TableCell, TableContainer, TableHead, TableHeader, TableRow, Tabs, TabsSkeleton, Tag, TagSkeleton, TextArea, TextAreaSkeleton, TextInput, TextInputSkeleton, Tile, TileGroup, TimePicker, TimePickerSelect, ToastNotification, Toggle, ToggleSkeleton, ToggleSmall, ToggleSmallSkeleton, Toolbar, ToolbarBatchActions, ToolbarContent, ToolbarMenu, ToolbarMenuItem, ToolbarSearch, Tooltip, TooltipDefinition, TooltipIcon, Truncate, UnorderedList };
